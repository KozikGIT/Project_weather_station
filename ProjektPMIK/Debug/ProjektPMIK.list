
ProjektPMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040f0  08012e18  08012e18  00022e18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f08  08016f08  00030324  2**0
                  CONTENTS
  4 .ARM          00000008  08016f08  08016f08  00026f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f10  08016f10  00030324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f10  08016f10  00026f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f14  08016f14  00026f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  08016f18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a58c  20000324  0801723c  00030324  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a8b0  0801723c  0003a8b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030324  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281d1  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005711  00000000  00000000  00058525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fe0  00000000  00000000  0005dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d58  00000000  00000000  0005fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f15c  00000000  00000000  00061970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b362  00000000  00000000  00090acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001152bf  00000000  00000000  000bbe2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d10ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d94  00000000  00000000  001d1140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012dfc 	.word	0x08012dfc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	08012dfc 	.word	0x08012dfc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <bufclr>:
#include "FUNCTIONS.h"

extern uint start_Time9;

void bufclr (char *buf)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	int len = strlen (buf);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff f8df 	bl	80001e4 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	60bb      	str	r3, [r7, #8]
	for (int i=0; i<len; i++) buf[i] = '\0';
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e007      	b.n	8001040 <bufclr+0x28>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fa      	ldr	r2, [r7, #12]
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	429a      	cmp	r2, r3
 8001046:	dbf3      	blt.n	8001030 <bufclr+0x18>
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <ESP_Init>:
  * Funkcja pozwalająca na połączenie się z internetem za pomocą ESP8266, gdzie argumenty to:
  * Nazwa sieci, hasło do sieci
  * @retval None
  */
void ESP_Init (char *SSID, char *PASSWD)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b096      	sub	sp, #88	; 0x58
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800105e:	f000 f8e7 	bl	8001230 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <ESP_Init+0x88>)
 8001064:	f000 f9a0 	bl	80013a8 <Uart_sendstring>
	HAL_Delay(2000);
 8001068:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800106c:	f003 fdde 	bl	8004c2c <HAL_Delay>

	/********* AT **********/
	Uart_sendstring("AT\r\n");
 8001070:	481b      	ldr	r0, [pc, #108]	; (80010e0 <ESP_Init+0x8c>)
 8001072:	f000 f999 	bl	80013a8 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
 8001076:	bf00      	nop
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <ESP_Init+0x90>)
 800107a:	f000 fa39 	bl	80014f0 <Wait_for>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f9      	beq.n	8001078 <ESP_Init+0x24>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n");
 8001084:	4818      	ldr	r0, [pc, #96]	; (80010e8 <ESP_Init+0x94>)
 8001086:	f000 f98f 	bl	80013a8 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n")));
 800108a:	bf00      	nop
 800108c:	4817      	ldr	r0, [pc, #92]	; (80010ec <ESP_Init+0x98>)
 800108e:	f000 fa2f 	bl	80014f0 <Wait_for>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f9      	beq.n	800108c <ESP_Init+0x38>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8001098:	f107 0008 	add.w	r0, r7, #8
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4913      	ldr	r1, [pc, #76]	; (80010f0 <ESP_Init+0x9c>)
 80010a2:	f00d fd07 	bl	800eab4 <siprintf>
	Uart_sendstring(data);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f97c 	bl	80013a8 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n")));
 80010b0:	bf00      	nop
 80010b2:	4810      	ldr	r0, [pc, #64]	; (80010f4 <ESP_Init+0xa0>)
 80010b4:	f000 fa1c 	bl	80014f0 <Wait_for>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f9      	beq.n	80010b2 <ESP_Init+0x5e>

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <ESP_Init+0xa4>)
 80010c0:	f000 f972 	bl	80013a8 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=0\r\r\n\r\nOK\r\n")));
 80010c4:	bf00      	nop
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <ESP_Init+0xa8>)
 80010c8:	f000 fa12 	bl	80014f0 <Wait_for>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f9      	beq.n	80010c6 <ESP_Init+0x72>

}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3758      	adds	r7, #88	; 0x58
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	08012e18 	.word	0x08012e18
 80010e0:	08012e24 	.word	0x08012e24
 80010e4:	08012e2c 	.word	0x08012e2c
 80010e8:	08012e38 	.word	0x08012e38
 80010ec:	08012e48 	.word	0x08012e48
 80010f0:	08012e60 	.word	0x08012e60
 80010f4:	08012e78 	.word	0x08012e78
 80010f8:	08012e8c 	.word	0x08012e8c
 80010fc:	08012e9c 	.word	0x08012e9c

08001100 <ESP_GetData>:
  * Funkcja pozwalająca na pobranie danych z internetu, gdzie argumenty to:
  * Kod Get Requesta, bufor na dane
  * @retval None
  */
void ESP_GetData (char *api_key, char *Total)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0a4      	sub	sp, #144	; 0x90
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
	if(HAL_GetTick()-start_Time9>=2000)
 800110a:	f003 fd83 	bl	8004c14 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <ESP_GetData+0x110>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800111a:	d375      	bcc.n	8001208 <ESP_GetData+0x108>
								    	{
	char local_buf[100] = {0};
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2260      	movs	r2, #96	; 0x60
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00c fc73 	bl	800da14 <memset>
	char local_buf2[30] = {0};
 800112e:	2300      	movs	r3, #0
 8001130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001132:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	831a      	strh	r2, [r3, #24]
	
	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8001146:	4833      	ldr	r0, [pc, #204]	; (8001214 <ESP_GetData+0x114>)
 8001148:	f000 f92e 	bl	80013a8 <Uart_sendstring>
	while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
 800114c:	bf00      	nop
 800114e:	4832      	ldr	r0, [pc, #200]	; (8001218 <ESP_GetData+0x118>)
 8001150:	f000 f9ce 	bl	80014f0 <Wait_for>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f9      	beq.n	800114e <ESP_GetData+0x4e>
	
	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	492e      	ldr	r1, [pc, #184]	; (800121c <ESP_GetData+0x11c>)
 8001162:	4618      	mov	r0, r3
 8001164:	f00d fca6 	bl	800eab4 <siprintf>
	int len = strlen (local_buf);
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f839 	bl	80001e4 <strlen>
 8001172:	4603      	mov	r3, r0
 8001174:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	
	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8001178:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800117c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001180:	4927      	ldr	r1, [pc, #156]	; (8001220 <ESP_GetData+0x120>)
 8001182:	4618      	mov	r0, r3
 8001184:	f00d fc96 	bl	800eab4 <siprintf>
	Uart_sendstring(local_buf2);
 8001188:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f90b 	bl	80013a8 <Uart_sendstring>
	while (!(Wait_for(">")));
 8001192:	bf00      	nop
 8001194:	4823      	ldr	r0, [pc, #140]	; (8001224 <ESP_GetData+0x124>)
 8001196:	f000 f9ab 	bl	80014f0 <Wait_for>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0f9      	beq.n	8001194 <ESP_GetData+0x94>
	
	bufclr(local_buf2);
 80011a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff37 	bl	8001018 <bufclr>

	Uart_sendstring (local_buf);
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f8fa 	bl	80013a8 <Uart_sendstring>
	while (!(Wait_for("SEND OK\r\n")));
 80011b4:	bf00      	nop
 80011b6:	481c      	ldr	r0, [pc, #112]	; (8001228 <ESP_GetData+0x128>)
 80011b8:	f000 f99a 	bl	80014f0 <Wait_for>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f9      	beq.n	80011b6 <ESP_GetData+0xb6>
	

	while (!(Wait_for (">")));
 80011c2:	bf00      	nop
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <ESP_GetData+0x124>)
 80011c6:	f000 f993 	bl	80014f0 <Wait_for>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f9      	beq.n	80011c4 <ESP_GetData+0xc4>
	while (!(Copy_upto ("</span>", local_buf2)));
 80011d0:	bf00      	nop
 80011d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011d6:	4619      	mov	r1, r3
 80011d8:	4814      	ldr	r0, [pc, #80]	; (800122c <ESP_GetData+0x12c>)
 80011da:	f000 f915 	bl	8001408 <Copy_upto>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f6      	beq.n	80011d2 <ESP_GetData+0xd2>
	len = strlen (local_buf2);
 80011e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7fe fffb 	bl	80001e4 <strlen>
 80011ee:	4603      	mov	r3, r0
 80011f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	snprintf (Total, len-6,local_buf2);
 80011f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80011f8:	3b06      	subs	r3, #6
 80011fa:	4619      	mov	r1, r3
 80011fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001200:	461a      	mov	r2, r3
 8001202:	6838      	ldr	r0, [r7, #0]
 8001204:	f00d fc22 	bl	800ea4c <sniprintf>
//	bufclr(local_buf2);
//	while (!(Wait_for("<span>")));
//	while (!(Copy_upto ("</span>", local_buf2)));
//	len = strlen (local_buf2);
//	snprintf (Recovered, len-6,local_buf2);
}
 8001208:	bf00      	nop
 800120a:	3790      	adds	r7, #144	; 0x90
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000a548 	.word	0x2000a548
 8001214:	08012eb4 	.word	0x08012eb4
 8001218:	08012ee0 	.word	0x08012ee0
 800121c:	08012ef0 	.word	0x08012ef0
 8001220:	08012f20 	.word	0x08012f20
 8001224:	08012f30 	.word	0x08012f30
 8001228:	08012f34 	.word	0x08012f34
 800122c:	08012f40 	.word	0x08012f40

08001230 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <Ringbuf_init+0x3c>)
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <Ringbuf_init+0x40>)
 8001238:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <Ringbuf_init+0x44>)
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <Ringbuf_init+0x48>)
 800123e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <Ringbuf_init+0x4c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <Ringbuf_init+0x4c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <Ringbuf_init+0x4c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <Ringbuf_init+0x4c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0220 	orr.w	r2, r2, #32
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	200003d0 	.word	0x200003d0
 8001270:	20000340 	.word	0x20000340
 8001274:	200003d4 	.word	0x200003d4
 8001278:	20000388 	.word	0x20000388
 800127c:	2000a70c 	.word	0x2000a70c

08001280 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	3301      	adds	r3, #1
 8001292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001296:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d007      	beq.n	80012b2 <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	683a      	ldr	r2, [r7, #0]
 80012a8:	79f9      	ldrb	r1, [r7, #7]
 80012aa:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <Uart_read+0x4c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <Uart_read+0x4c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d102      	bne.n	80012dc <Uart_read+0x1c>
  {
    return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e010      	b.n	80012fe <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <Uart_read+0x4c>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <Uart_read+0x4c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	5cd3      	ldrb	r3, [r2, r3]
 80012e8:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <Uart_read+0x4c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <Uart_read+0x4c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80012fc:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200003d0 	.word	0x200003d0

08001310 <Uart_write>:

void Uart_write(int c)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db21      	blt.n	8001362 <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <Uart_write+0x60>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	3301      	adds	r3, #1
 8001326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800132a:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 800132c:	bf00      	nop
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <Uart_write+0x60>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d0f9      	beq.n	800132e <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <Uart_write+0x60>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <Uart_write+0x60>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	b2c9      	uxtb	r1, r1
 8001348:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <Uart_write+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <Uart_write+0x64>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <Uart_write+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001360:	601a      	str	r2, [r3, #0]
	}
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200003d4 	.word	0x200003d4
 8001374:	2000a70c 	.word	0x2000a70c

08001378 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <IsDataAvailable+0x2c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <IsDataAvailable+0x2c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138a:	b29b      	uxth	r3, r3
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	3340      	adds	r3, #64	; 0x40
 8001392:	b29b      	uxth	r3, r3
 8001394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200003d0 	.word	0x200003d0

080013a8 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80013b0:	e006      	b.n	80013c0 <Uart_sendstring+0x18>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	607a      	str	r2, [r7, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ffa8 	bl	8001310 <Uart_write>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f4      	bne.n	80013b2 <Uart_sendstring+0xa>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <Uart_peek+0x30>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <Uart_peek+0x30>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d102      	bne.n	80013ee <Uart_peek+0x1a>
  {
    return -1;
 80013e8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ec:	e005      	b.n	80013fa <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <Uart_peek+0x30>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <Uart_peek+0x30>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200003d0 	.word	0x200003d0

08001408 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7fe fee4 	bl	80001e4 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8001424:	bf00      	nop
 8001426:	f7ff ffa7 	bl	8001378 <IsDataAvailable>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0fa      	beq.n	8001426 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8001430:	e01b      	b.n	800146a <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001432:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <Copy_upto+0xe4>)
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <Copy_upto+0xe4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	4403      	add	r3, r0
 8001442:	5c8a      	ldrb	r2, [r1, r2]
 8001444:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <Copy_upto+0xe4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	1c5a      	adds	r2, r3, #1
 800144e:	4b27      	ldr	r3, [pc, #156]	; (80014ec <Copy_upto+0xe4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001456:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	3301      	adds	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 800145e:	bf00      	nop
 8001460:	f7ff ff8a 	bl	8001378 <IsDataAvailable>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0fa      	beq.n	8001460 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 800146a:	f7ff ffb3 	bl	80013d4 <Uart_peek>
 800146e:	4601      	mov	r1, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4299      	cmp	r1, r3
 800147a:	d1da      	bne.n	8001432 <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 800147c:	e019      	b.n	80014b2 <Copy_upto+0xaa>
	{
		so_far++;
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001484:	f7ff ff1c 	bl	80012c0 <Uart_read>
 8001488:	4601      	mov	r1, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	613a      	str	r2, [r7, #16]
 8001490:	461a      	mov	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4413      	add	r3, r2
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d101      	bne.n	80014a6 <Copy_upto+0x9e>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e01d      	b.n	80014e2 <Copy_upto+0xda>
		while (!IsDataAvailable());
 80014a6:	bf00      	nop
 80014a8:	f7ff ff66 	bl	8001378 <IsDataAvailable>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0fa      	beq.n	80014a8 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 80014b2:	f7ff ff8f 	bl	80013d4 <Uart_peek>
 80014b6:	4601      	mov	r1, r0
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4299      	cmp	r1, r3
 80014c2:	d0dc      	beq.n	800147e <Copy_upto+0x76>
	}

	if (so_far != len)
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d002      	beq.n	80014d2 <Copy_upto+0xca>
	{
		so_far = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
		goto again;
 80014d0:	e7a8      	b.n	8001424 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d101      	bne.n	80014de <Copy_upto+0xd6>
 80014da:	2301      	movs	r3, #1
 80014dc:	e001      	b.n	80014e2 <Copy_upto+0xda>
	else return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200003d0 	.word	0x200003d0

080014f0 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7fe fe71 	bl	80001e4 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8001506:	bf00      	nop
 8001508:	f7ff ff36 	bl	8001378 <IsDataAvailable>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0fa      	beq.n	8001508 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8001512:	f7ff ff5f 	bl	80013d4 <Uart_peek>
 8001516:	4601      	mov	r1, r0
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4299      	cmp	r1, r3
 8001522:	d01a      	beq.n	800155a <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <Wait_for+0xa4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	4b19      	ldr	r3, [pc, #100]	; (8001594 <Wait_for+0xa4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001536:	e7e6      	b.n	8001506 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	3301      	adds	r3, #1
 800153c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800153e:	f7ff febf 	bl	80012c0 <Uart_read>
		if (so_far == len) return 1;
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	429a      	cmp	r2, r3
 8001548:	d101      	bne.n	800154e <Wait_for+0x5e>
 800154a:	2301      	movs	r3, #1
 800154c:	e01d      	b.n	800158a <Wait_for+0x9a>
		while (!IsDataAvailable());
 800154e:	bf00      	nop
 8001550:	f7ff ff12 	bl	8001378 <IsDataAvailable>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0fa      	beq.n	8001550 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 800155a:	f7ff ff3b 	bl	80013d4 <Uart_peek>
 800155e:	4601      	mov	r1, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4299      	cmp	r1, r3
 800156a:	d0e5      	beq.n	8001538 <Wait_for+0x48>
	}

	if (so_far != len)
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	429a      	cmp	r2, r3
 8001572:	d002      	beq.n	800157a <Wait_for+0x8a>
	{
		so_far = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
		goto again;
 8001578:	e7c5      	b.n	8001506 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	429a      	cmp	r2, r3
 8001580:	d101      	bne.n	8001586 <Wait_for+0x96>
 8001582:	2301      	movs	r3, #1
 8001584:	e001      	b.n	800158a <Wait_for+0x9a>
	else return -1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200003d0 	.word	0x200003d0

08001598 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0320 	and.w	r3, r3, #32
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d014      	beq.n	80015e4 <Uart_isr+0x4c>
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d00f      	beq.n	80015e4 <Uart_isr+0x4c>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
    	huart->Instance->ISR;                       /* Read status register */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <Uart_isr+0xb0>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fe4f 	bl	8001280 <store_char>
        return;
 80015e2:	e02d      	b.n	8001640 <Uart_isr+0xa8>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d028      	beq.n	8001640 <Uart_isr+0xa8>
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d023      	beq.n	8001640 <Uart_isr+0xa8>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <Uart_isr+0xb4>)
 80015fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <Uart_isr+0xb4>)
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	429a      	cmp	r2, r3
 8001602:	d108      	bne.n	8001616 <Uart_isr+0x7e>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001612:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->TDR = c;

    	    }
    	return;
 8001614:	e013      	b.n	800163e <Uart_isr+0xa6>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <Uart_isr+0xb4>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <Uart_isr+0xb4>)
 800161c:	5cd3      	ldrb	r3, [r2, r3]
 800161e:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <Uart_isr+0xb4>)
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	3301      	adds	r3, #1
 8001626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800162a:	4a08      	ldr	r2, [pc, #32]	; (800164c <Uart_isr+0xb4>)
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->ISR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	7bba      	ldrb	r2, [r7, #14]
 800163a:	b292      	uxth	r2, r2
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28
    	return;
 800163e:	bf00      	nop
    }
}
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003d0 	.word	0x200003d0
 800164c:	20000388 	.word	0x20000388

08001650 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <MX_ADC1_Init+0x134>)
 8001674:	4a44      	ldr	r2, [pc, #272]	; (8001788 <MX_ADC1_Init+0x138>)
 8001676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <MX_ADC1_Init+0x134>)
 800167a:	2200      	movs	r2, #0
 800167c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <MX_ADC1_Init+0x134>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <MX_ADC1_Init+0x134>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800168a:	4b3e      	ldr	r3, [pc, #248]	; (8001784 <MX_ADC1_Init+0x134>)
 800168c:	2201      	movs	r2, #1
 800168e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <MX_ADC1_Init+0x134>)
 8001692:	2204      	movs	r2, #4
 8001694:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001696:	4b3b      	ldr	r3, [pc, #236]	; (8001784 <MX_ADC1_Init+0x134>)
 8001698:	2200      	movs	r2, #0
 800169a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800169c:	4b39      	ldr	r3, [pc, #228]	; (8001784 <MX_ADC1_Init+0x134>)
 800169e:	2200      	movs	r2, #0
 80016a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <MX_ADC1_Init+0x134>)
 80016a4:	2204      	movs	r2, #4
 80016a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016a8:	4b36      	ldr	r3, [pc, #216]	; (8001784 <MX_ADC1_Init+0x134>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	4b34      	ldr	r3, [pc, #208]	; (8001784 <MX_ADC1_Init+0x134>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <MX_ADC1_Init+0x134>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <MX_ADC1_Init+0x134>)
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <MX_ADC1_Init+0x134>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <MX_ADC1_Init+0x134>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016d2:	482c      	ldr	r0, [pc, #176]	; (8001784 <MX_ADC1_Init+0x134>)
 80016d4:	f003 fcea 	bl	80050ac <HAL_ADC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80016de:	f002 f951 	bl	8003984 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4825      	ldr	r0, [pc, #148]	; (8001784 <MX_ADC1_Init+0x134>)
 80016ee:	f004 ffc5 	bl	800667c <HAL_ADCEx_MultiModeConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016f8:	f002 f944 	bl	8003984 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_ADC1_Init+0x13c>)
 80016fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001700:	2306      	movs	r3, #6
 8001702:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001704:	2307      	movs	r3, #7
 8001706:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001708:	237f      	movs	r3, #127	; 0x7f
 800170a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800170c:	2304      	movs	r3, #4
 800170e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	4619      	mov	r1, r3
 8001718:	481a      	ldr	r0, [pc, #104]	; (8001784 <MX_ADC1_Init+0x134>)
 800171a:	f004 f9f5 	bl	8005b08 <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001724:	f002 f92e 	bl	8003984 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_ADC1_Init+0x140>)
 800172a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800172c:	230c      	movs	r3, #12
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4813      	ldr	r0, [pc, #76]	; (8001784 <MX_ADC1_Init+0x134>)
 8001736:	f004 f9e7 	bl	8005b08 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001740:	f002 f920 	bl	8003984 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_ADC1_Init+0x144>)
 8001746:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001748:	2312      	movs	r3, #18
 800174a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_ADC1_Init+0x134>)
 8001752:	f004 f9d9 	bl	8005b08 <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 800175c:	f002 f912 	bl	8003984 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_ADC1_Init+0x148>)
 8001762:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001764:	2318      	movs	r3, #24
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_ADC1_Init+0x134>)
 800176e:	f004 f9cb 	bl	8005b08 <HAL_ADC_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001778:	f002 f904 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200003d8 	.word	0x200003d8
 8001788:	50040000 	.word	0x50040000
 800178c:	2e300800 	.word	0x2e300800
 8001790:	32601000 	.word	0x32601000
 8001794:	0c900008 	.word	0x0c900008
 8001798:	3ac04000 	.word	0x3ac04000

0800179c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b0ac      	sub	sp, #176	; 0xb0
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2288      	movs	r2, #136	; 0x88
 80017ba:	2100      	movs	r1, #0
 80017bc:	4618      	mov	r0, r3
 80017be:	f00c f929 	bl	800da14 <memset>
  if(adcHandle->Instance==ADC1)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a39      	ldr	r2, [pc, #228]	; (80018ac <HAL_ADC_MspInit+0x110>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d16a      	bne.n	80018a2 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80017d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80017da:	2301      	movs	r3, #1
 80017dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80017de:	2301      	movs	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80017e2:	2310      	movs	r3, #16
 80017e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80017e6:	2307      	movs	r3, #7
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80017ee:	2302      	movs	r3, #2
 80017f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80017f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4618      	mov	r0, r3
 80017fe:	f006 ffc7 	bl	8008790 <HAL_RCCEx_PeriphCLKConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001808:	f002 f8bc 	bl	8003984 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800180c:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 800180e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 8001812:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001816:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 800181a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 8001826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_ADC_MspInit+0x114>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN3
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8001854:	2324      	movs	r3, #36	; 0x24
 8001856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185a:	230b      	movs	r3, #11
 800185c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800186a:	4619      	mov	r1, r3
 800186c:	4811      	ldr	r0, [pc, #68]	; (80018b4 <HAL_ADC_MspInit+0x118>)
 800186e:	f005 f945 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001878:	230b      	movs	r3, #11
 800187a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f005 f935 	bl	8006afc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2012      	movs	r0, #18
 8001898:	f005 f87b 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800189c:	2012      	movs	r0, #18
 800189e:	f005 f894 	bl	80069ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018a2:	bf00      	nop
 80018a4:	37b0      	adds	r7, #176	; 0xb0
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	50040000 	.word	0x50040000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000800 	.word	0x48000800

080018b8 <channel_of_display>:
  * @brief
  * Funnkcja w której dzieją się poszczególne rzeczy po wciśnieciu przyisków na pilocie
  * @retval None
  */
void channel_of_display()
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af08      	add	r7, sp, #32
	  int value23 = ir_read();
 80018be:	f000 fc7d 	bl	80021bc <ir_read>
 80018c2:	61f8      	str	r0, [r7, #28]



		    if (value23 != -1) {
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ca:	f000 8168 	beq.w	8001b9e <channel_of_display+0x2e6>
		      printf("code = %d\n", value23);
 80018ce:	69f9      	ldr	r1, [r7, #28]
 80018d0:	4821      	ldr	r0, [pc, #132]	; (8001958 <channel_of_display+0xa0>)
 80018d2:	f00d f801 	bl	800e8d8 <iprintf>
		      czy_wyswietlono=0;
 80018d6:	4b21      	ldr	r3, [pc, #132]	; (800195c <channel_of_display+0xa4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]


if(value23==0x4A) //przycisk 9
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b4a      	cmp	r3, #74	; 0x4a
 80018e0:	d109      	bne.n	80018f6 <channel_of_display+0x3e>
{ustaw_panel=(ustaw_panel+1) %2;
 80018e2:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <channel_of_display+0xa8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	bfb8      	it	lt
 80018f0:	425b      	neglt	r3, r3
 80018f2:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <channel_of_display+0xa8>)
 80018f4:	6013      	str	r3, [r2, #0]
	}

if(value23==0x52) //przycisk 8
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	2b52      	cmp	r3, #82	; 0x52
 80018fa:	d102      	bne.n	8001902 <channel_of_display+0x4a>
{
	pobierz_dane=1;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <channel_of_display+0xac>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
	}

if(value23==0x42) //przycisk 7
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	2b42      	cmp	r3, #66	; 0x42
 8001906:	d102      	bne.n	800190e <channel_of_display+0x56>
{
	pobierz_dane=2;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <channel_of_display+0xac>)
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
	}


	if(licznik_kanalu>-2)
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <channel_of_display+0xb0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001916:	db0b      	blt.n	8001930 <channel_of_display+0x78>
	{
		if(value23==7)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b07      	cmp	r3, #7
 800191c:	d10c      	bne.n	8001938 <channel_of_display+0x80>
				    {
				    	printf("lewo \n");
 800191e:	4813      	ldr	r0, [pc, #76]	; (800196c <channel_of_display+0xb4>)
 8001920:	f00d f876 	bl	800ea10 <puts>
				    	licznik_kanalu--;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <channel_of_display+0xb0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3b01      	subs	r3, #1
 800192a:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <channel_of_display+0xb0>)
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e003      	b.n	8001938 <channel_of_display+0x80>


	}
	else
	{
		licznik_kanalu=-2;
 8001930:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <channel_of_display+0xb0>)
 8001932:	f06f 0201 	mvn.w	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
	}

	if(licznik_kanalu<2)
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <channel_of_display+0xb0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	dc19      	bgt.n	8001974 <channel_of_display+0xbc>
	{
		if(value23==9)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b09      	cmp	r3, #9
 8001944:	d119      	bne.n	800197a <channel_of_display+0xc2>
				   	    {
				   	    	printf("prawo \n");
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <channel_of_display+0xb8>)
 8001948:	f00d f862 	bl	800ea10 <puts>
				   	    	licznik_kanalu++;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <channel_of_display+0xb0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <channel_of_display+0xb0>)
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e010      	b.n	800197a <channel_of_display+0xc2>
 8001958:	08012f48 	.word	0x08012f48
 800195c:	2000a4fc 	.word	0x2000a4fc
 8001960:	2000a4f4 	.word	0x2000a4f4
 8001964:	2000a4f0 	.word	0x2000a4f0
 8001968:	2000a4f8 	.word	0x2000a4f8
 800196c:	08012f54 	.word	0x08012f54
 8001970:	08012f5c 	.word	0x08012f5c
				   	    }

	}
	else
		{
			licznik_kanalu=2;
 8001974:	4b8c      	ldr	r3, [pc, #560]	; (8001ba8 <channel_of_display+0x2f0>)
 8001976:	2202      	movs	r2, #2
 8001978:	601a      	str	r2, [r3, #0]





	if(value23==13) //Przycisk C
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	2b0d      	cmp	r3, #13
 800197e:	d10c      	bne.n	800199a <channel_of_display+0xe2>
	{
		if(licznik_zmiany_daty>=0 && licznik_zmiany_daty<=6)
 8001980:	4b8a      	ldr	r3, [pc, #552]	; (8001bac <channel_of_display+0x2f4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db08      	blt.n	800199a <channel_of_display+0xe2>
 8001988:	4b88      	ldr	r3, [pc, #544]	; (8001bac <channel_of_display+0x2f4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b06      	cmp	r3, #6
 800198e:	dc04      	bgt.n	800199a <channel_of_display+0xe2>
		licznik_zmiany_daty++;
 8001990:	4b86      	ldr	r3, [pc, #536]	; (8001bac <channel_of_display+0x2f4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a85      	ldr	r2, [pc, #532]	; (8001bac <channel_of_display+0x2f4>)
 8001998:	6013      	str	r3, [r2, #0]

	}
	if(value23==21) //Przycisk Play zatwierdzenie daty i godziny
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b15      	cmp	r3, #21
 800199e:	d12b      	bne.n	80019f8 <channel_of_display+0x140>
		{
		RTC_TimeTypeDef new_time = {0};
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
	  	RTC_DateTypeDef new_date={0};
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
	  	set_new_date_and_time(new_date,new_time,rok1,miesiac1,dzien1,godzina1,minuta1,sekunda1);
 80019b4:	4b7e      	ldr	r3, [pc, #504]	; (8001bb0 <channel_of_display+0x2f8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a7e      	ldr	r2, [pc, #504]	; (8001bb4 <channel_of_display+0x2fc>)
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	497e      	ldr	r1, [pc, #504]	; (8001bb8 <channel_of_display+0x300>)
 80019be:	6809      	ldr	r1, [r1, #0]
 80019c0:	487e      	ldr	r0, [pc, #504]	; (8001bbc <channel_of_display+0x304>)
 80019c2:	6800      	ldr	r0, [r0, #0]
 80019c4:	4c7e      	ldr	r4, [pc, #504]	; (8001bc0 <channel_of_display+0x308>)
 80019c6:	6824      	ldr	r4, [r4, #0]
 80019c8:	4d7e      	ldr	r5, [pc, #504]	; (8001bc4 <channel_of_display+0x30c>)
 80019ca:	682d      	ldr	r5, [r5, #0]
 80019cc:	9507      	str	r5, [sp, #28]
 80019ce:	9406      	str	r4, [sp, #24]
 80019d0:	9005      	str	r0, [sp, #20]
 80019d2:	9104      	str	r1, [sp, #16]
 80019d4:	9203      	str	r2, [sp, #12]
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	466a      	mov	r2, sp
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019e2:	e882 0003 	stmia.w	r2, {r0, r1}
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 ff89 	bl	8002904 <set_new_date_and_time>
			licznik_zmiany_daty=0;
 80019f2:	4b6e      	ldr	r3, [pc, #440]	; (8001bac <channel_of_display+0x2f4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]

		}


	if(licznik_zmiany_daty==1)
 80019f8:	4b6c      	ldr	r3, [pc, #432]	; (8001bac <channel_of_display+0x2f4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d115      	bne.n	8001a2c <channel_of_display+0x174>
	{


						if(value23==64) //+
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b40      	cmp	r3, #64	; 0x40
 8001a04:	d104      	bne.n	8001a10 <channel_of_display+0x158>
						{
							rok1++;
 8001a06:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <channel_of_display+0x2f8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	4a68      	ldr	r2, [pc, #416]	; (8001bb0 <channel_of_display+0x2f8>)
 8001a0e:	6013      	str	r3, [r2, #0]
						}

							if(value23==25) //-
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b19      	cmp	r3, #25
 8001a14:	d104      	bne.n	8001a20 <channel_of_display+0x168>
							{	rok1--;
 8001a16:	4b66      	ldr	r3, [pc, #408]	; (8001bb0 <channel_of_display+0x2f8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	4a64      	ldr	r2, [pc, #400]	; (8001bb0 <channel_of_display+0x2f8>)
 8001a1e:	6013      	str	r3, [r2, #0]
							}

		printf("rok: %d \n",rok1);
 8001a20:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <channel_of_display+0x2f8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4868      	ldr	r0, [pc, #416]	; (8001bc8 <channel_of_display+0x310>)
 8001a28:	f00c ff56 	bl	800e8d8 <iprintf>
	}
	if(licznik_zmiany_daty==2)
 8001a2c:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <channel_of_display+0x2f4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <channel_of_display+0x1c4>
		{


							if(value23==64) //+
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b40      	cmp	r3, #64	; 0x40
 8001a38:	d10b      	bne.n	8001a52 <channel_of_display+0x19a>
							{

								miesiac1++;
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a5c      	ldr	r2, [pc, #368]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a42:	6013      	str	r3, [r2, #0]
								if(miesiac1>12)
 8001a44:	4b5b      	ldr	r3, [pc, #364]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d902      	bls.n	8001a52 <channel_of_display+0x19a>
								{
									miesiac1=12;
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
								}

							}

								if(value23==25) //-
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	2b19      	cmp	r3, #25
 8001a56:	d10b      	bne.n	8001a70 <channel_of_display+0x1b8>
								{	miesiac1--;
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a60:	6013      	str	r3, [r2, #0]
								if(miesiac1<1)
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d102      	bne.n	8001a70 <channel_of_display+0x1b8>
																{
																	miesiac1=1;
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
																}
								}

			printf("miesiac: %d \n",miesiac1);
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <channel_of_display+0x2fc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	4855      	ldr	r0, [pc, #340]	; (8001bcc <channel_of_display+0x314>)
 8001a78:	f00c ff2e 	bl	800e8d8 <iprintf>
		}

	if(licznik_zmiany_daty==3)
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <channel_of_display+0x2f4>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d123      	bne.n	8001acc <channel_of_display+0x214>
		{


							if(value23==64) //+     //do poprawy maksymalna ilosc dni
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b40      	cmp	r3, #64	; 0x40
 8001a88:	d10b      	bne.n	8001aa2 <channel_of_display+0x1ea>
							{
								dzien1++;
 8001a8a:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <channel_of_display+0x300>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a49      	ldr	r2, [pc, #292]	; (8001bb8 <channel_of_display+0x300>)
 8001a92:	6013      	str	r3, [r2, #0]
								if(dzien1>31)
 8001a94:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <channel_of_display+0x300>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b1f      	cmp	r3, #31
 8001a9a:	d902      	bls.n	8001aa2 <channel_of_display+0x1ea>
								{
									dzien1=31;
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <channel_of_display+0x300>)
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	601a      	str	r2, [r3, #0]
								}
							}

								if(value23==25) //-
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b19      	cmp	r3, #25
 8001aa6:	d10b      	bne.n	8001ac0 <channel_of_display+0x208>
								{	dzien1--;
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <channel_of_display+0x300>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	4a42      	ldr	r2, [pc, #264]	; (8001bb8 <channel_of_display+0x300>)
 8001ab0:	6013      	str	r3, [r2, #0]
								if(dzien1<1)
 8001ab2:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <channel_of_display+0x300>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <channel_of_display+0x208>
																{
																	dzien1=1;
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <channel_of_display+0x300>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
																}
								}

			printf("dzien: %d \n",dzien1);
 8001ac0:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <channel_of_display+0x300>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4842      	ldr	r0, [pc, #264]	; (8001bd0 <channel_of_display+0x318>)
 8001ac8:	f00c ff06 	bl	800e8d8 <iprintf>
		}

	if(licznik_zmiany_daty==4)
 8001acc:	4b37      	ldr	r3, [pc, #220]	; (8001bac <channel_of_display+0x2f4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d11c      	bne.n	8001b0e <channel_of_display+0x256>
		{


							if(value23==64) //+
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b40      	cmp	r3, #64	; 0x40
 8001ad8:	d10b      	bne.n	8001af2 <channel_of_display+0x23a>
							{
								godzina1++;
 8001ada:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <channel_of_display+0x304>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	4a36      	ldr	r2, [pc, #216]	; (8001bbc <channel_of_display+0x304>)
 8001ae2:	6013      	str	r3, [r2, #0]
								if(godzina1>23)
 8001ae4:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <channel_of_display+0x304>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b17      	cmp	r3, #23
 8001aea:	d902      	bls.n	8001af2 <channel_of_display+0x23a>
																{
																	godzina1=23;
 8001aec:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <channel_of_display+0x304>)
 8001aee:	2217      	movs	r2, #23
 8001af0:	601a      	str	r2, [r3, #0]
																}
							}

								if(value23==25) //-
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	2b19      	cmp	r3, #25
 8001af6:	d104      	bne.n	8001b02 <channel_of_display+0x24a>
								{	godzina1--;
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <channel_of_display+0x304>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <channel_of_display+0x304>)
 8001b00:	6013      	str	r3, [r2, #0]
									{
										godzina1=0;
									}
								}

			printf("godzina: %d \n",godzina1);
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <channel_of_display+0x304>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4619      	mov	r1, r3
 8001b08:	4832      	ldr	r0, [pc, #200]	; (8001bd4 <channel_of_display+0x31c>)
 8001b0a:	f00c fee5 	bl	800e8d8 <iprintf>
		}

	if(licznik_zmiany_daty==5)
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <channel_of_display+0x2f4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b05      	cmp	r3, #5
 8001b14:	d11c      	bne.n	8001b50 <channel_of_display+0x298>
		{


							if(value23==64) //+
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b40      	cmp	r3, #64	; 0x40
 8001b1a:	d10b      	bne.n	8001b34 <channel_of_display+0x27c>
							{
								minuta1++;
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <channel_of_display+0x308>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a27      	ldr	r2, [pc, #156]	; (8001bc0 <channel_of_display+0x308>)
 8001b24:	6013      	str	r3, [r2, #0]
								if(minuta1>59)
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <channel_of_display+0x308>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001b2c:	d902      	bls.n	8001b34 <channel_of_display+0x27c>
																	{
																		minuta1=59;
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <channel_of_display+0x308>)
 8001b30:	223b      	movs	r2, #59	; 0x3b
 8001b32:	601a      	str	r2, [r3, #0]
																	}
							}

								if(value23==25) //-
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	2b19      	cmp	r3, #25
 8001b38:	d104      	bne.n	8001b44 <channel_of_display+0x28c>
								{	minuta1--;
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <channel_of_display+0x308>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <channel_of_display+0x308>)
 8001b42:	6013      	str	r3, [r2, #0]
																									{
																										minuta1=0;
																									}
								}

			printf("minuta: %d \n",minuta1);
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <channel_of_display+0x308>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4823      	ldr	r0, [pc, #140]	; (8001bd8 <channel_of_display+0x320>)
 8001b4c:	f00c fec4 	bl	800e8d8 <iprintf>
		}

	if(licznik_zmiany_daty==6)
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <channel_of_display+0x2f4>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b06      	cmp	r3, #6
 8001b56:	d11c      	bne.n	8001b92 <channel_of_display+0x2da>
		{


							if(value23==64) //+
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b40      	cmp	r3, #64	; 0x40
 8001b5c:	d10b      	bne.n	8001b76 <channel_of_display+0x2be>
							{
								sekunda1++;
 8001b5e:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <channel_of_display+0x30c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <channel_of_display+0x30c>)
 8001b66:	6013      	str	r3, [r2, #0]
								if(sekunda1>59)
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <channel_of_display+0x30c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b3b      	cmp	r3, #59	; 0x3b
 8001b6e:	d902      	bls.n	8001b76 <channel_of_display+0x2be>
																									{
																										sekunda1=59;
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <channel_of_display+0x30c>)
 8001b72:	223b      	movs	r2, #59	; 0x3b
 8001b74:	601a      	str	r2, [r3, #0]
																									}
							}

								if(value23==25) //-
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	2b19      	cmp	r3, #25
 8001b7a:	d104      	bne.n	8001b86 <channel_of_display+0x2ce>
								{	sekunda1--;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <channel_of_display+0x30c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <channel_of_display+0x30c>)
 8001b84:	6013      	str	r3, [r2, #0]
																									{
																										sekunda1=0;
																									}
								}

			printf("sekunda: %d \n",sekunda1);
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <channel_of_display+0x30c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4813      	ldr	r0, [pc, #76]	; (8001bdc <channel_of_display+0x324>)
 8001b8e:	f00c fea3 	bl	800e8d8 <iprintf>





	printf("licznik_kanalu wynosi: %d \n",licznik_kanalu);
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <channel_of_display+0x2f0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4619      	mov	r1, r3
 8001b98:	4811      	ldr	r0, [pc, #68]	; (8001be0 <channel_of_display+0x328>)
 8001b9a:	f00c fe9d 	bl	800e8d8 <iprintf>




		    }
	}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000a4f8 	.word	0x2000a4f8
 8001bac:	2000043c 	.word	0x2000043c
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	2000000c 	.word	0x2000000c
 8001bc0:	20000010 	.word	0x20000010
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	08012f64 	.word	0x08012f64
 8001bcc:	08012f70 	.word	0x08012f70
 8001bd0:	08012f80 	.word	0x08012f80
 8001bd4:	08012f8c 	.word	0x08012f8c
 8001bd8:	08012f9c 	.word	0x08012f9c
 8001bdc:	08012fac 	.word	0x08012fac
 8001be0:	08012fbc 	.word	0x08012fbc

08001be4 <ds18b20_init>:
#define DS18B20_READ_SCRATCHPAD    0xBE



HAL_StatusTypeDef ds18b20_init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  return wire_init();
 8001be8:	f002 fe5a 	bl	80048a0 <wire_init>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <ds18b20_read_address>:



HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code)
{
 8001bf2:	b590      	push	{r4, r7, lr}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t crc;

  if (wire_reset() != HAL_OK)
 8001bfa:	f002 fe73 	bl	80048e4 <wire_reset>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <ds18b20_read_address+0x16>
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e021      	b.n	8001c4c <ds18b20_read_address+0x5a>

  wire_write(DS18B20_READ_ROM);
 8001c08:	2033      	movs	r0, #51	; 0x33
 8001c0a:	f002 ff07 	bl	8004a1c <wire_write>

  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e009      	b.n	8001c28 <ds18b20_read_address+0x36>
    rom_code[i] = wire_read();
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	18d4      	adds	r4, r2, r3
 8001c1a:	f002 feb1 	bl	8004980 <wire_read>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	3301      	adds	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	ddf2      	ble.n	8001c14 <ds18b20_read_address+0x22>

  crc = wire_crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 8001c2e:	2107      	movs	r1, #7
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f002 ff3b 	bl	8004aac <wire_crc>
 8001c36:	4603      	mov	r3, r0
 8001c38:	72fb      	strb	r3, [r7, #11]
  if (rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3307      	adds	r3, #7
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	7afa      	ldrb	r2, [r7, #11]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d101      	bne.n	8001c4a <ds18b20_read_address+0x58>
    return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <ds18b20_read_address+0x5a>
  else
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <send_cmd>:



static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8001c60:	f002 fe40 	bl	80048e4 <wire_reset>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <send_cmd+0x1a>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e01e      	b.n	8001cac <send_cmd+0x58>

  if (!rom_code) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d103      	bne.n	8001c7c <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8001c74:	20cc      	movs	r0, #204	; 0xcc
 8001c76:	f002 fed1 	bl	8004a1c <wire_write>
 8001c7a:	e012      	b.n	8001ca2 <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8001c7c:	2055      	movs	r0, #85	; 0x55
 8001c7e:	f002 fecd 	bl	8004a1c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e009      	b.n	8001c9c <send_cmd+0x48>
      wire_write(rom_code[i]);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fec3 	bl	8004a1c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b07      	cmp	r3, #7
 8001ca0:	ddf2      	ble.n	8001c88 <send_cmd+0x34>
  }
  wire_write(cmd);
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f002 feb9 	bl	8004a1c <wire_write>
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <ds18b20_start_measure>:



HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8001cbc:	2144      	movs	r1, #68	; 0x44
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffc8 	bl	8001c54 <send_cmd>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8001cce:	b590      	push	{r4, r7, lr}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001cd8:	21be      	movs	r1, #190	; 0xbe
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffba 	bl	8001c54 <send_cmd>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e01e      	b.n	8001d28 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	e009      	b.n	8001d04 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	18d4      	adds	r4, r2, r3
 8001cf6:	f002 fe43 	bl	8004980 <wire_read>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3301      	adds	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	ddf2      	ble.n	8001cf0 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8001d0a:	2108      	movs	r1, #8
 8001d0c:	6838      	ldr	r0, [r7, #0]
 8001d0e:	f002 fecd 	bl	8004aac <wire_crc>
 8001d12:	4603      	mov	r3, r0
 8001d14:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	3308      	adds	r3, #8
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	7afa      	ldrb	r2, [r7, #11]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d101      	bne.n	8001d26 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}

08001d30 <ds18b20_get_temp>:


float ds18b20_get_temp(const uint8_t* rom_code)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff ffc5 	bl	8001cce <ds18b20_read_scratchpad>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <ds18b20_get_temp+0x20>
    return 85.0f;
 8001d4a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001d78 <ds18b20_get_temp+0x48>
 8001d4e:	e00b      	b.n	8001d68 <ds18b20_get_temp+0x38>
 8001d50:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8001d52:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8001d54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d60:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001d64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001d68:	eef0 7a47 	vmov.f32	s15, s14
 8001d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	42aa0000 	.word	0x42aa0000

08001d7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a30      	ldr	r2, [pc, #192]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a2a      	ldr	r2, [pc, #168]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <MX_GPIO_Init+0xf4>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	2110      	movs	r1, #16
 8001df6:	481f      	ldr	r0, [pc, #124]	; (8001e74 <MX_GPIO_Init+0xf8>)
 8001df8:	f005 f842 	bl	8006e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f640 0104 	movw	r1, #2052	; 0x804
 8001e02:	481d      	ldr	r0, [pc, #116]	; (8001e78 <MX_GPIO_Init+0xfc>)
 8001e04:	f005 f83c 	bl	8006e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e0e:	481a      	ldr	r0, [pc, #104]	; (8001e78 <MX_GPIO_Init+0xfc>)
 8001e10:	f005 f836 	bl	8006e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4812      	ldr	r0, [pc, #72]	; (8001e74 <MX_GPIO_Init+0xf8>)
 8001e2a:	f004 fe67 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e32:	2311      	movs	r3, #17
 8001e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 8001e3e:	f107 0314 	add.w	r3, r7, #20
 8001e42:	4619      	mov	r1, r3
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <MX_GPIO_Init+0xf8>)
 8001e46:	f004 fe59 	bl	8006afc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8001e4a:	f641 0304 	movw	r3, #6148	; 0x1804
 8001e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_GPIO_Init+0xfc>)
 8001e64:	f004 fe4a 	bl	8006afc <HAL_GPIO_Init>

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	48000800 	.word	0x48000800
 8001e78:	48000400 	.word	0x48000400

08001e7c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <MX_I2C1_Init+0x78>)
 8001e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e88:	4a1b      	ldr	r2, [pc, #108]	; (8001ef8 <MX_I2C1_Init+0x7c>)
 8001e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eaa:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001eb6:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eb8:	f004 fffa 	bl	8006eb0 <HAL_I2C_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ec2:	f001 fd5f 	bl	8003984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001eca:	f005 fd55 	bl	8007978 <HAL_I2CEx_ConfigAnalogFilter>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ed4:	f001 fd56 	bl	8003984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_I2C1_Init+0x74>)
 8001edc:	f005 fd97 	bl	8007a0e <HAL_I2CEx_ConfigDigitalFilter>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001ee6:	f001 fd4d 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000440 	.word	0x20000440
 8001ef4:	40005400 	.word	0x40005400
 8001ef8:	10909cec 	.word	0x10909cec

08001efc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f02:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <MX_I2C3_Init+0x78>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <MX_I2C3_Init+0x7c>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f24:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f38:	f004 ffba 	bl	8006eb0 <HAL_I2C_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001f42:	f001 fd1f 	bl	8003984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f46:	2100      	movs	r1, #0
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f4a:	f005 fd15 	bl	8007978 <HAL_I2CEx_ConfigAnalogFilter>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001f54:	f001 fd16 	bl	8003984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4805      	ldr	r0, [pc, #20]	; (8001f70 <MX_I2C3_Init+0x74>)
 8001f5c:	f005 fd57 	bl	8007a0e <HAL_I2CEx_ConfigDigitalFilter>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001f66:	f001 fd0d 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000494 	.word	0x20000494
 8001f74:	40005c00 	.word	0x40005c00
 8001f78:	10909cec 	.word	0x10909cec

08001f7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0ae      	sub	sp, #184	; 0xb8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2288      	movs	r2, #136	; 0x88
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00b fd39 	bl	800da14 <memset>
  if(i2cHandle->Instance==I2C1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a42      	ldr	r2, [pc, #264]	; (80020b0 <HAL_I2C_MspInit+0x134>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d13b      	bne.n	8002024 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fac:	2340      	movs	r3, #64	; 0x40
 8001fae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f006 fbe9 	bl	8008790 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fc4:	f001 fcde 	bl	8003984 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd4:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe0:	23c0      	movs	r3, #192	; 0xc0
 8001fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe6:	2312      	movs	r3, #18
 8001fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002002:	4619      	mov	r1, r3
 8002004:	482c      	ldr	r0, [pc, #176]	; (80020b8 <HAL_I2C_MspInit+0x13c>)
 8002006:	f004 fd79 	bl	8006afc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200e:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8002010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002022:	e040      	b.n	80020a6 <HAL_I2C_MspInit+0x12a>
  else if(i2cHandle->Instance==I2C3)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_I2C_MspInit+0x140>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d13b      	bne.n	80020a6 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800202e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002032:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002034:	2300      	movs	r3, #0
 8002036:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002038:	f107 031c 	add.w	r3, r7, #28
 800203c:	4618      	mov	r0, r3
 800203e:	f006 fba7 	bl	8008790 <HAL_RCCEx_PeriphCLKConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002048:	f001 fc9c 	bl	8003984 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002064:	2303      	movs	r3, #3
 8002066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206a:	2312      	movs	r3, #18
 800206c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800207c:	2304      	movs	r3, #4
 800207e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002082:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002086:	4619      	mov	r1, r3
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <HAL_I2C_MspInit+0x144>)
 800208a:	f004 fd37 	bl	8006afc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 8002094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_I2C_MspInit+0x138>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	bf00      	nop
 80020a8:	37b8      	adds	r7, #184	; 0xb8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40005400 	.word	0x40005400
 80020b4:	40021000 	.word	0x40021000
 80020b8:	48000400 	.word	0x48000400
 80020bc:	40005c00 	.word	0x40005c00
 80020c0:	48000800 	.word	0x48000800

080020c4 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2bf9      	cmp	r3, #249	; 0xf9
 80020d0:	d801      	bhi.n	80020d6 <calc_pulse+0x12>
		return PULSE_ERROR;
 80020d2:	2305      	movs	r3, #5
 80020d4:	e021      	b.n	800211a <calc_pulse+0x56>
	else if (time < 1200)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80020dc:	d201      	bcs.n	80020e2 <calc_pulse+0x1e>
		return PULSE_SHORT;
 80020de:	2304      	movs	r3, #4
 80020e0:	e01b      	b.n	800211a <calc_pulse+0x56>
	else if (time < 2000)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80020e8:	d201      	bcs.n	80020ee <calc_pulse+0x2a>
		return PULSE_LONG;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e015      	b.n	800211a <calc_pulse+0x56>
	else if (time < 3000)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d801      	bhi.n	80020fc <calc_pulse+0x38>
		return PULSE_2MS;
 80020f8:	2302      	movs	r3, #2
 80020fa:	e00e      	b.n	800211a <calc_pulse+0x56>
	else if (time < 6000)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f241 726f 	movw	r2, #5999	; 0x176f
 8002102:	4293      	cmp	r3, r2
 8002104:	d801      	bhi.n	800210a <calc_pulse+0x46>
		return PULSE_4MS;
 8002106:	2301      	movs	r3, #1
 8002108:	e007      	b.n	800211a <calc_pulse+0x56>
	else if (time < 12000)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002110:	4293      	cmp	r3, r2
 8002112:	d801      	bhi.n	8002118 <calc_pulse+0x54>
		return PULSE_9MS;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8002118:	2305      	movs	r3, #5
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800212e:	4b19      	ldr	r3, [pc, #100]	; (8002194 <ir_tim_interrupt+0x6c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b1f      	cmp	r3, #31
 8002134:	dc2a      	bgt.n	800218c <ir_tim_interrupt+0x64>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8002136:	2100      	movs	r1, #0
 8002138:	4817      	ldr	r0, [pc, #92]	; (8002198 <ir_tim_interrupt+0x70>)
 800213a:	f008 fe35 	bl	800ada8 <HAL_TIM_ReadCapturedValue>
 800213e:	4603      	mov	r3, r0
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff ffbf 	bl	80020c4 <calc_pulse>
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d00c      	beq.n	800216a <ir_tim_interrupt+0x42>
 8002150:	2b04      	cmp	r3, #4
 8002152:	d117      	bne.n	8002184 <ir_tim_interrupt+0x5c>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <ir_tim_interrupt+0x74>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <ir_tim_interrupt+0x74>)
 800215c:	6013      	str	r3, [r2, #0]
		received_bits++;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <ir_tim_interrupt+0x6c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <ir_tim_interrupt+0x6c>)
 8002166:	6013      	str	r3, [r2, #0]
		break;
 8002168:	e011      	b.n	800218e <ir_tim_interrupt+0x66>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <ir_tim_interrupt+0x74>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	085b      	lsrs	r3, r3, #1
 8002170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <ir_tim_interrupt+0x74>)
 8002176:	6013      	str	r3, [r2, #0]
		received_bits++;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <ir_tim_interrupt+0x6c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <ir_tim_interrupt+0x6c>)
 8002180:	6013      	str	r3, [r2, #0]
		break;
 8002182:	e004      	b.n	800218e <ir_tim_interrupt+0x66>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <ir_tim_interrupt+0x6c>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
		break;
 800218a:	e000      	b.n	800218e <ir_tim_interrupt+0x66>
		return;
 800218c:	bf00      	nop
	}
}
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	200004ec 	.word	0x200004ec
 8002198:	2000a674 	.word	0x2000a674
 800219c:	200004e8 	.word	0x200004e8

080021a0 <ir_init>:

void ir_init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim2);
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <ir_init+0x18>)
 80021a6:	f007 fea7 	bl	8009ef8 <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80021aa:	2100      	movs	r1, #0
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <ir_init+0x18>)
 80021ae:	f008 f8d5 	bl	800a35c <HAL_TIM_IC_Start_IT>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000a674 	.word	0x2000a674

080021bc <ir_read>:

int ir_read(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <ir_read+0x30>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d002      	beq.n	80021d0 <ir_read+0x14>
		return -1;
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	e007      	b.n	80021e0 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <ir_read+0x34>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <ir_read+0x30>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
	return value;
 80021de:	79fb      	ldrb	r3, [r7, #7]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	200004ec 	.word	0x200004ec
 80021f0:	200004e8 	.word	0x200004e8

080021f4 <lcd_cmd>:

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

static void lcd_cmd(uint8_t cmd) //funkcja statyczna zeby nie bylo konfliktu z nazwy funkcji z innymi plikami, a ta funkcje wykorzystujemy tylko tu
//nie deklarujemy w pliku naglowkowym funkji statycznych
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);  //ustawiamy stan niski czyli przesylamy komende
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <lcd_cmd+0x44>)
 8002206:	f004 fe3b 	bl	8006e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800220a:	2200      	movs	r2, #0
 800220c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002210:	4809      	ldr	r0, [pc, #36]	; (8002238 <lcd_cmd+0x44>)
 8002212:	f004 fe35 	bl	8006e80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8002216:	1df9      	adds	r1, r7, #7
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	2201      	movs	r2, #1
 800221e:	4807      	ldr	r0, [pc, #28]	; (800223c <lcd_cmd+0x48>)
 8002220:	f007 fb3f 	bl	80098a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); //wylaamy przesyl
 8002224:	2201      	movs	r2, #1
 8002226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222a:	4803      	ldr	r0, [pc, #12]	; (8002238 <lcd_cmd+0x44>)
 800222c:	f004 fe28 	bl	8006e80 <HAL_GPIO_WritePin>
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	48000400 	.word	0x48000400
 800223c:	2000a5c0 	.word	0x2000a5c0

08002240 <lcd_data>:

static void lcd_data(uint8_t data)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);  //wysylamy dane (stan wysoki na dc)
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002250:	480c      	ldr	r0, [pc, #48]	; (8002284 <lcd_data+0x44>)
 8002252:	f004 fe15 	bl	8006e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	4809      	ldr	r0, [pc, #36]	; (8002284 <lcd_data+0x44>)
 800225e:	f004 fe0f 	bl	8006e80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8002262:	1df9      	adds	r1, r7, #7
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	2201      	movs	r2, #1
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <lcd_data+0x48>)
 800226c:	f007 fb19 	bl	80098a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <lcd_data+0x44>)
 8002278:	f004 fe02 	bl	8006e80 <HAL_GPIO_WritePin>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	48000400 	.word	0x48000400
 8002288:	2000a5c0 	.word	0x2000a5c0

0800228c <lcd_data16>:
static void lcd_data16(uint16_t value)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	b29b      	uxth	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ffce 	bl	8002240 <lcd_data>
	lcd_data(value);
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ffc9 	bl	8002240 <lcd_data>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <lcd_set_window>:
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b084      	sub	sp, #16
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	60f8      	str	r0, [r7, #12]
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80022c4:	202a      	movs	r0, #42	; 0x2a
 80022c6:	f7ff ff95 	bl	80021f4 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ffda 	bl	800228c <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ffd1 	bl	800228c <lcd_data16>

  lcd_cmd(ST7735S_RASET);
 80022ea:	202b      	movs	r0, #43	; 0x2b
 80022ec:	f7ff ff82 	bl	80021f4 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3302      	adds	r3, #2
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ffc7 	bl	800228c <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	b29a      	uxth	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	b29b      	uxth	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ffbc 	bl	800228c <lcd_data16>
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <lcd_send>:


#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <lcd_send+0x20>
		lcd_cmd(value);
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff ff5d 	bl	80021f4 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 800233a:	e004      	b.n	8002346 <lcd_send+0x2a>
		lcd_data(value);
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff7d 	bl	8002240 <lcd_data>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <lcd_init>:
};



void lcd_init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	4817      	ldr	r0, [pc, #92]	; (80023b8 <lcd_init+0x68>)
 800235c:	f004 fd90 	bl	8006e80 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002360:	2064      	movs	r0, #100	; 0x64
 8002362:	f002 fc63 	bl	8004c2c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8002366:	2201      	movs	r2, #1
 8002368:	2104      	movs	r1, #4
 800236a:	4813      	ldr	r0, [pc, #76]	; (80023b8 <lcd_init+0x68>)
 800236c:	f004 fd88 	bl	8006e80 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8002370:	2064      	movs	r0, #100	; 0x64
 8002372:	f002 fc5b 	bl	8004c2c <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	e009      	b.n	8002390 <lcd_init+0x40>
    lcd_send(init_table[i]);
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <lcd_init+0x6c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ffc9 	bl	800231c <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3301      	adds	r3, #1
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b4b      	cmp	r3, #75	; 0x4b
 8002394:	d9f2      	bls.n	800237c <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8002396:	20c8      	movs	r0, #200	; 0xc8
 8002398:	f002 fc48 	bl	8004c2c <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 800239c:	2011      	movs	r0, #17
 800239e:	f7ff ff29 	bl	80021f4 <lcd_cmd>
  HAL_Delay(120);
 80023a2:	2078      	movs	r0, #120	; 0x78
 80023a4:	f002 fc42 	bl	8004c2c <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 80023a8:	2029      	movs	r0, #41	; 0x29
 80023aa:	f7ff ff23 	bl	80021f4 <lcd_cmd>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	48000400 	.word	0x48000400
 80023bc:	0801381c 	.word	0x0801381c

080023c0 <lcd_put_pixel>:
	lcd_cmd(ST7735S_RAMWR);
	for (int i = 0; i < width * height; i++)
		lcd_data16(color);
}
void lcd_put_pixel(int x, int y, uint16_t color)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	461a      	mov	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	4905      	ldr	r1, [pc, #20]	; (80023f4 <lcd_put_pixel+0x34>)
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	200004f0 	.word	0x200004f0

080023f8 <lcd_copy>:

void lcd_copy(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	22a0      	movs	r2, #160	; 0xa0
 8002400:	2100      	movs	r1, #0
 8002402:	2000      	movs	r0, #0
 8002404:	f7ff ff57 	bl	80022b6 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8002408:	202c      	movs	r0, #44	; 0x2c
 800240a:	f7ff fef3 	bl	80021f4 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <lcd_copy+0x50>)
 8002416:	f004 fd33 	bl	8006e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <lcd_copy+0x50>)
 8002422:	f004 fd2d 	bl	8006e80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800242e:	4907      	ldr	r1, [pc, #28]	; (800244c <lcd_copy+0x54>)
 8002430:	4807      	ldr	r0, [pc, #28]	; (8002450 <lcd_copy+0x58>)
 8002432:	f007 fa36 	bl	80098a2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8002436:	2201      	movs	r2, #1
 8002438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <lcd_copy+0x50>)
 800243e:	f004 fd1f 	bl	8006e80 <HAL_GPIO_WritePin>
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	48000400 	.word	0x48000400
 800244c:	200004f0 	.word	0x200004f0
 8002450:	2000a5c0 	.word	0x2000a5c0

08002454 <lps_read_reg>:
#define LPS25HB_TEMP_OUT_H 		0x2C

#define TIMEOUT                 100

static uint8_t lps_read_reg(uint8_t reg)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af04      	add	r7, sp, #16
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	b29a      	uxth	r2, r3
 8002466:	2364      	movs	r3, #100	; 0x64
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2301      	movs	r3, #1
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f107 030f 	add.w	r3, r7, #15
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	21ba      	movs	r1, #186	; 0xba
 8002478:	4803      	ldr	r0, [pc, #12]	; (8002488 <lps_read_reg+0x34>)
 800247a:	f004 febd 	bl	80071f8 <HAL_I2C_Mem_Read>

    return value;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000440 	.word	0x20000440

0800248c <lps_write_reg>:

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af04      	add	r7, sp, #16
 8002492:	4603      	mov	r3, r0
 8002494:	460a      	mov	r2, r1
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	4613      	mov	r3, r2
 800249a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	2364      	movs	r3, #100	; 0x64
 80024a2:	9302      	str	r3, [sp, #8]
 80024a4:	2301      	movs	r3, #1
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	1dbb      	adds	r3, r7, #6
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2301      	movs	r3, #1
 80024ae:	21ba      	movs	r1, #186	; 0xba
 80024b0:	4803      	ldr	r0, [pc, #12]	; (80024c0 <lps_write_reg+0x34>)
 80024b2:	f004 fd8d 	bl	8006fd0 <HAL_I2C_Mem_Write>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000440 	.word	0x20000440

080024c4 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
    if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xBD)
 80024c8:	200f      	movs	r0, #15
 80024ca:	f7ff ffc3 	bl	8002454 <lps_read_reg>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2bbd      	cmp	r3, #189	; 0xbd
 80024d2:	d001      	beq.n	80024d8 <lps25hb_init+0x14>
         return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e004      	b.n	80024e2 <lps25hb_init+0x1e>

    lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 80024d8:	21c0      	movs	r1, #192	; 0xc0
 80024da:	2020      	movs	r0, #32
 80024dc:	f7ff ffd6 	bl	800248c <lps_write_reg>
    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af04      	add	r7, sp, #16
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 80024ee:	2364      	movs	r3, #100	; 0x64
 80024f0:	9302      	str	r3, [sp, #8]
 80024f2:	2302      	movs	r3, #2
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	22ab      	movs	r2, #171	; 0xab
 80024fe:	21ba      	movs	r1, #186	; 0xba
 8002500:	480d      	ldr	r0, [pc, #52]	; (8002538 <lps25hb_read_temp+0x50>)
 8002502:	f004 fe79 	bl	80071f8 <HAL_I2C_Mem_Read>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <lps25hb_read_temp+0x28>
         Error_Handler();
 800250c:	f001 fa3a 	bl	8003984 <Error_Handler>

     return 42.5f + temp / 480.0f;
 8002510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800253c <lps25hb_read_temp+0x54>
 8002520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002524:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002540 <lps25hb_read_temp+0x58>
 8002528:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800252c:	eeb0 0a67 	vmov.f32	s0, s15
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000440 	.word	0x20000440
 800253c:	43f00000 	.word	0x43f00000
 8002540:	422a0000 	.word	0x422a0000

08002544 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af04      	add	r7, sp, #16
     int32_t pressure = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 800254e:	2364      	movs	r3, #100	; 0x64
 8002550:	9302      	str	r3, [sp, #8]
 8002552:	2303      	movs	r3, #3
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	1d3b      	adds	r3, r7, #4
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2301      	movs	r3, #1
 800255c:	22a8      	movs	r2, #168	; 0xa8
 800255e:	21ba      	movs	r1, #186	; 0xba
 8002560:	480b      	ldr	r0, [pc, #44]	; (8002590 <lps25hb_read_pressure+0x4c>)
 8002562:	f004 fe49 	bl	80071f8 <HAL_I2C_Mem_Read>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <lps25hb_read_pressure+0x2c>
         Error_Handler();
 800256c:	f001 fa0a 	bl	8003984 <Error_Handler>

     return pressure / 4096.0f;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002594 <lps25hb_read_pressure+0x50>
 800257e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002582:	eef0 7a66 	vmov.f32	s15, s13
}
 8002586:	eeb0 0a67 	vmov.f32	s0, s15
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000440 	.word	0x20000440
 8002594:	45800000 	.word	0x45800000

08002598 <HAL_TIM_IC_CaptureCallback>:
  * @brief
  * Callback związany z odczytywaniem naciśniętego przycisku na pilocie IR oraz rozpoznawaniem go
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x30>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d108      	bne.n	80025ba <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim2))
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <HAL_TIM_IC_CaptureCallback+0x30>)
 80025aa:	f008 fc69 	bl	800ae80 <HAL_TIM_GetActiveChannel>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d104      	bne.n	80025be <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 80025b4:	f7ff fdb8 	bl	8002128 <ir_tim_interrupt>
        break;
 80025b8:	e002      	b.n	80025c0 <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 80025be:	bf00      	nop
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	2000a674 	.word	0x2000a674

080025cc <is_button_pressed>:
  * @brief
  * Po naciśnięciu przycisku użytkownika, następuje reset czasu
  * @retval None
  */
bool is_button_pressed(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) {
 80025d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <is_button_pressed+0x20>)
 80025d6:	f004 fc3b 	bl	8006e50 <HAL_GPIO_ReadPin>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <is_button_pressed+0x18>
    return true;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <is_button_pressed+0x1a>
  } else {
    return false;
 80025e4:	2300      	movs	r3, #0
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	48000800 	.word	0x48000800

080025f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f6:	f002 faa4 	bl	8004b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025fa:	f000 f877 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fe:	f7ff fbbd 	bl	8001d7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002602:	f001 fe57 	bl	80042b4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002606:	f001 f9c3 	bl	8003990 <MX_RTC_Init>
  MX_TIM6_Init();
 800260a:	f001 fd45 	bl	8004098 <MX_TIM6_Init>
  MX_I2C1_Init();
 800260e:	f7ff fc35 	bl	8001e7c <MX_I2C1_Init>
  MX_I2C3_Init();
 8002612:	f7ff fc73 	bl	8001efc <MX_I2C3_Init>
  MX_TIM2_Init();
 8002616:	f001 fcb3 	bl	8003f80 <MX_TIM2_Init>
  MX_SPI2_Init();
 800261a:	f001 fa13 	bl	8003a44 <MX_SPI2_Init>
  MX_UART5_Init();
 800261e:	f001 fe19 	bl	8004254 <MX_UART5_Init>
  MX_TIM1_Init();
 8002622:	f001 fbf5 	bl	8003e10 <MX_TIM1_Init>
  MX_ADC1_Init();
 8002626:	f7ff f813 	bl	8001650 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */




  	call_one_wire_temperature(); //sprawdzenie czy termometr podpiety
 800262a:	f000 f93b 	bl	80028a4 <call_one_wire_temperature>



	initialize_main_calendar(start_date);  //data startowa po wlaczeniu programu
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <main+0xe4>)
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f000 f94f 	bl	80028d4 <initialize_main_calendar>
	call_calendar(); //wypisywanie miesiecy
 8002636:	f000 f917 	bl	8002868 <call_calendar>
	start_GetTicks(); //GetTicks
 800263a:	f000 fb41 	bl	8002cc0 <start_GetTicks>
	  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED); //włączanie PWM do obracania panelem fotowoltaicznym oraz jego kanałów
 800263e:	217f      	movs	r1, #127	; 0x7f
 8002640:	4825      	ldr	r0, [pc, #148]	; (80026d8 <main+0xe8>)
 8002642:	f003 ff89 	bl	8006558 <HAL_ADCEx_Calibration_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002646:	2100      	movs	r1, #0
 8002648:	4824      	ldr	r0, [pc, #144]	; (80026dc <main+0xec>)
 800264a:	f007 fd1f 	bl	800a08c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800264e:	2104      	movs	r1, #4
 8002650:	4822      	ldr	r0, [pc, #136]	; (80026dc <main+0xec>)
 8002652:	f007 fd1b 	bl	800a08c <HAL_TIM_PWM_Start>
	  htim1.Instance->CCR1=1300;
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <main+0xec>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f240 5214 	movw	r2, #1300	; 0x514
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance->CCR2=1200;
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <main+0xec>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	  is_pressure_sensor_connected();// czy czujnik cisnienia jest dolaczony
 800266a:	f000 f8d3 	bl	8002814 <is_pressure_sensor_connected>
	  serial_port_information(); //informacja co wpisac do konsoli
 800266e:	f000 fb19 	bl	8002ca4 <serial_port_information>
	  lcd_init();//inicjalizacja wyświetlacza
 8002672:	f7ff fe6d 	bl	8002350 <lcd_init>
	  ir_init(); //wystartowanie Input Capture timera
 8002676:	f7ff fd93 	bl	80021a0 <ir_init>

	  for(int i=0;i<=127;i++)//resetowanie pamięci EEPROM po każdorazowym restarcie
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
 800267e:	e013      	b.n	80026a8 <main+0xb8>
	  {
		  	  HAL_I2C_Mem_Write(&hi2c3, 0xA0, i, 1, 0, sizeof(0), 1000);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	2304      	movs	r3, #4
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2300      	movs	r3, #0
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	21a0      	movs	r1, #160	; 0xa0
 8002696:	4812      	ldr	r0, [pc, #72]	; (80026e0 <main+0xf0>)
 8002698:	f004 fc9a 	bl	8006fd0 <HAL_I2C_Mem_Write>
	  			    			  HAL_Delay(5);
 800269c:	2005      	movs	r0, #5
 800269e:	f002 fac5 	bl	8004c2c <HAL_Delay>
	  for(int i=0;i<=127;i++)//resetowanie pamięci EEPROM po każdorazowym restarcie
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3301      	adds	r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b7f      	cmp	r3, #127	; 0x7f
 80026ac:	dde8      	ble.n	8002680 <main+0x90>
	  }

	  last_day=date.Date;
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <main+0xf4>)
 80026b0:	789a      	ldrb	r2, [r3, #2]
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <main+0xf8>)
 80026b4:	701a      	strb	r2, [r3, #0]


  while (1)
  {
	  channel_of_display(); //sprawdzanie ktory kanal wyswietlacza
 80026b6:	f7ff f8ff 	bl	80018b8 <channel_of_display>
	  serial_port_data();   //pomiary na porcie szeregowym
 80026ba:	f000 fb53 	bl	8002d64 <serial_port_data>
	  print_what_you_write_and_entered(); //wypisanie na port szeregowy tego co wpisalismy
 80026be:	f000 fadb 	bl	8002c78 <print_what_you_write_and_entered>
	  lcd_put_in_while(); //wyswietlanie poszczegolnych kanalow
 80026c2:	f000 fb65 	bl	8002d90 <lcd_put_in_while>
	  write_to_memory(); //zapis do pamięci EEPROM danyh pogodowych
 80026c6:	f000 fed9 	bl	800347c <write_to_memory>
	  ESP_loop();  //pobieranie danych z internetu
 80026ca:	f000 ffef 	bl	80036ac <ESP_loop>
	  ADC_measure(); //pomiar ADC dla obracania panelem fotowoltaicznym
 80026ce:	f001 f86d 	bl	80037ac <ADC_measure>
	  channel_of_display(); //sprawdzanie ktory kanal wyswietlacza
 80026d2:	e7f0      	b.n	80026b6 <main+0xc6>
 80026d4:	2000a508 	.word	0x2000a508
 80026d8:	200003d8 	.word	0x200003d8
 80026dc:	2000a628 	.word	0x2000a628
 80026e0:	20000494 	.word	0x20000494
 80026e4:	2000a520 	.word	0x2000a520
 80026e8:	2000a504 	.word	0x2000a504

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b096      	sub	sp, #88	; 0x58
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	2244      	movs	r2, #68	; 0x44
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00b f98a 	bl	800da14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	463b      	mov	r3, r7
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
 800270c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800270e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002712:	f005 f9e7 	bl	8007ae4 <HAL_PWREx_ControlVoltageScaling>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800271c:	f001 f932 	bl	8003984 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002720:	f005 f9c2 	bl	8007aa8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <SystemClock_Config+0xc0>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	4a20      	ldr	r2, [pc, #128]	; (80027ac <SystemClock_Config+0xc0>)
 800272c:	f023 0318 	bic.w	r3, r3, #24
 8002730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002734:	2314      	movs	r3, #20
 8002736:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002738:	2301      	movs	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800273c:	2301      	movs	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002744:	2360      	movs	r3, #96	; 0x60
 8002746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002748:	2302      	movs	r3, #2
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800274c:	2301      	movs	r3, #1
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002750:	2301      	movs	r3, #1
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002754:	2328      	movs	r3, #40	; 0x28
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002758:	2307      	movs	r3, #7
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800275c:	2302      	movs	r3, #2
 800275e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002760:	2302      	movs	r3, #2
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4618      	mov	r0, r3
 800276a:	f005 fa11 	bl	8007b90 <HAL_RCC_OscConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002774:	f001 f906 	bl	8003984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002778:	230f      	movs	r3, #15
 800277a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800277c:	2303      	movs	r3, #3
 800277e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800278c:	463b      	mov	r3, r7
 800278e:	2104      	movs	r1, #4
 8002790:	4618      	mov	r0, r3
 8002792:	f005 fdd9 	bl	8008348 <HAL_RCC_ClockConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800279c:	f001 f8f2 	bl	8003984 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80027a0:	f006 fae0 	bl	8008d64 <HAL_RCCEx_EnableMSIPLLMode>
}
 80027a4:	bf00      	nop
 80027a6:	3758      	adds	r7, #88	; 0x58
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000

080027b0 <print_lps25hb_sensor>:
  * @brief
  * Wyświetlanie parametrów pogodowych na porcie szeregowym
  * @retval None
  */
void print_lps25hb_sensor()
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0


	if(HAL_GetTick()-start_Time4>=5000)
 80027b4:	f002 fa2e 	bl	8004c14 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <print_lps25hb_sensor+0x58>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3287 	movw	r2, #4999	; 0x1387
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d91c      	bls.n	8002802 <print_lps25hb_sensor+0x52>
			    	{printf("T = %.1f*C\n", lps25hb_read_temp());
 80027c8:	f7ff fe8e 	bl	80024e8 <lps25hb_read_temp>
 80027cc:	ee10 3a10 	vmov	r3, s0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fd fec9 	bl	8000568 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	480c      	ldr	r0, [pc, #48]	; (800280c <print_lps25hb_sensor+0x5c>)
 80027dc:	f00c f87c 	bl	800e8d8 <iprintf>
	    printf("p = %.1f hPa\n", lps25hb_read_pressure());
 80027e0:	f7ff feb0 	bl	8002544 <lps25hb_read_pressure>
 80027e4:	ee10 3a10 	vmov	r3, s0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fd febd 	bl	8000568 <__aeabi_f2d>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4807      	ldr	r0, [pc, #28]	; (8002810 <print_lps25hb_sensor+0x60>)
 80027f4:	f00c f870 	bl	800e8d8 <iprintf>


			    		start_Time4=HAL_GetTick();
 80027f8:	f002 fa0c 	bl	8004c14 <HAL_GetTick>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a02      	ldr	r2, [pc, #8]	; (8002808 <print_lps25hb_sensor+0x58>)
 8002800:	6013      	str	r3, [r2, #0]
			    	}

}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2000a534 	.word	0x2000a534
 800280c:	08012fd8 	.word	0x08012fd8
 8002810:	08012fe4 	.word	0x08012fe4

08002814 <is_pressure_sensor_connected>:
  * Sprawdzenie czy czujnik ciśnienia jest podłączony
  * @retval None
  */

void is_pressure_sensor_connected()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	printf("Searching...\n");
 8002818:	480f      	ldr	r0, [pc, #60]	; (8002858 <is_pressure_sensor_connected+0x44>)
 800281a:	f00c f8f9 	bl	800ea10 <puts>
	if (lps25hb_init() == HAL_OK) {
 800281e:	f7ff fe51 	bl	80024c4 <lps25hb_init>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <is_pressure_sensor_connected+0x1c>
	  printf("OK: LPS25HB\n");
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <is_pressure_sensor_connected+0x48>)
 800282a:	f00c f8f1 	bl	800ea10 <puts>
 800282e:	e004      	b.n	800283a <is_pressure_sensor_connected+0x26>
	} else {
	  printf("Error: LPS25HB not found\n");
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <is_pressure_sensor_connected+0x4c>)
 8002832:	f00c f8ed 	bl	800ea10 <puts>
	  Error_Handler();
 8002836:	f001 f8a5 	bl	8003984 <Error_Handler>
	}
	  if(HAL_GetTick()-start_Time3>=100)
 800283a:	f002 f9eb 	bl	8004c14 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <is_pressure_sensor_connected+0x50>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b63      	cmp	r3, #99	; 0x63
 8002848:	d904      	bls.n	8002854 <is_pressure_sensor_connected+0x40>
		    	{


		    		start_Time3=HAL_GetTick();
 800284a:	f002 f9e3 	bl	8004c14 <HAL_GetTick>
 800284e:	4603      	mov	r3, r0
 8002850:	4a04      	ldr	r2, [pc, #16]	; (8002864 <is_pressure_sensor_connected+0x50>)
 8002852:	6013      	str	r3, [r2, #0]
		    	}
	}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	08012ff4 	.word	0x08012ff4
 800285c:	08013004 	.word	0x08013004
 8002860:	08013010 	.word	0x08013010
 8002864:	2000a530 	.word	0x2000a530

08002868 <call_calendar>:
  * @brief
  * Wypisywanie nazw miesięcy na porcie szeregowym
  * @retval None
  */
void call_calendar()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
	for(int i=0;i<=12;i++)
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	e00a      	b.n	800288a <call_calendar+0x22>
	  {printf("%c",months_names[2][i]);}
 8002874:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <call_calendar+0x38>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3328      	adds	r3, #40	; 0x28
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f00c f842 	bl	800e908 <putchar>
	for(int i=0;i<=12;i++)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3301      	adds	r3, #1
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b0c      	cmp	r3, #12
 800288e:	ddf1      	ble.n	8002874 <call_calendar+0xc>
	printf("\n");
 8002890:	200a      	movs	r0, #10
 8002892:	f00c f839 	bl	800e908 <putchar>



}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000001c 	.word	0x2000001c

080028a4 <call_one_wire_temperature>:
  * @brief
  * Sprawdzenie czy czujnik temperatury jest podłączony
  * @retval None
  */
void  call_one_wire_temperature()
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
	 if (ds18b20_init() != HAL_OK) {
 80028aa:	f7ff f99b 	bl	8001be4 <ds18b20_init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <call_one_wire_temperature+0x14>
	    Error_Handler();
 80028b4:	f001 f866 	bl	8003984 <Error_Handler>
	  }

	  uint8_t ds1[DS18B20_ROM_CODE_SIZE];

	  if (ds18b20_read_address(ds1) != HAL_OK) {
 80028b8:	463b      	mov	r3, r7
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f999 	bl	8001bf2 <ds18b20_read_address>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <call_one_wire_temperature+0x26>
	    Error_Handler();
 80028c6:	f001 f85d 	bl	8003984 <Error_Handler>
	  }
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <initialize_main_calendar>:
  * @brief
  * Inicjalizacja zegara RTC jakimiś danymi przy starcie systemu
  * @retval None
  */
void initialize_main_calendar(RTC_DateTypeDef start_date)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	start_date.Year = 25;
 80028dc:	2319      	movs	r3, #25
 80028de:	71fb      	strb	r3, [r7, #7]
	start_date.Month = 06;
 80028e0:	2306      	movs	r3, #6
 80028e2:	717b      	strb	r3, [r7, #5]
	start_date.Date = 1;
 80028e4:	2301      	movs	r3, #1
 80028e6:	71bb      	strb	r3, [r7, #6]
	start_date.WeekDay = RTC_WEEKDAY_TUESDAY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	713b      	strb	r3, [r7, #4]
	  HAL_RTC_SetDate(&hrtc, &start_date, RTC_FORMAT_BIN);
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2200      	movs	r2, #0
 80028f0:	4619      	mov	r1, r3
 80028f2:	4803      	ldr	r0, [pc, #12]	; (8002900 <initialize_main_calendar+0x2c>)
 80028f4:	f006 fd8c 	bl	8009410 <HAL_RTC_SetDate>



	}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	2000a59c 	.word	0x2000a59c

08002904 <set_new_date_and_time>:
  * @brief
  * Ustawianie nowego czasu i daty na RTC
  * @retval None
  */
void set_new_date_and_time(RTC_DateTypeDef new_date,RTC_TimeTypeDef new_time, uint8_t newYear,uint8_t newMonth,uint8_t newDate,uint8_t newHours,uint8_t newMinutes,uint8_t newSeconds)
{
 8002904:	b084      	sub	sp, #16
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	f107 0014 	add.w	r0, r7, #20
 8002912:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  			new_date.Year=newYear;
 8002916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800291a:	71fb      	strb	r3, [r7, #7]
		  	new_date.Month=newMonth;
 800291c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002920:	717b      	strb	r3, [r7, #5]
		  	new_date.Date=newDate;
 8002922:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002926:	71bb      	strb	r3, [r7, #6]
		  	new_time.Hours = newHours;
 8002928:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800292c:	753b      	strb	r3, [r7, #20]
		  	new_time.Minutes = newMinutes;
 800292e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002932:	757b      	strb	r3, [r7, #21]
		  	new_time.Seconds = newSeconds;
 8002934:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002938:	75bb      	strb	r3, [r7, #22]
		  	HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	2200      	movs	r2, #0
 8002940:	4619      	mov	r1, r3
 8002942:	4808      	ldr	r0, [pc, #32]	; (8002964 <set_new_date_and_time+0x60>)
 8002944:	f006 fc6b 	bl	800921e <HAL_RTC_SetTime>
		  	HAL_RTC_SetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2200      	movs	r2, #0
 800294c:	4619      	mov	r1, r3
 800294e:	4805      	ldr	r0, [pc, #20]	; (8002964 <set_new_date_and_time+0x60>)
 8002950:	f006 fd5e 	bl	8009410 <HAL_RTC_SetDate>





}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800295e:	b004      	add	sp, #16
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	2000a59c 	.word	0x2000a59c

08002968 <read_time_and_data>:
  * @brief
  * Odczyt daty i czasu z RTC
  * @retval None
  */
void read_time_and_data(uint time_compare)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b096      	sub	sp, #88	; 0x58
 800296c:	af08      	add	r7, sp, #32
 800296e:	6078      	str	r0, [r7, #4]




			  // jeśli naciśnięto przycisk
			  if (is_button_pressed()) {
 8002970:	f7ff fe2c 	bl	80025cc <is_button_pressed>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <read_time_and_data+0x64>
			  	// ważne: nieużywane pola muszą być wyzerowane
			  	RTC_TimeTypeDef new_time = {0};
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	60da      	str	r2, [r3, #12]
 8002988:	611a      	str	r2, [r3, #16]
			  	RTC_DateTypeDef new_date={0};
 800298a:	2300      	movs	r3, #0
 800298c:	623b      	str	r3, [r7, #32]

			  	// czekamy na zwolnienie przycisku
			  	while (is_button_pressed()) {}
 800298e:	bf00      	nop
 8002990:	f7ff fe1c 	bl	80025cc <is_button_pressed>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1fa      	bne.n	8002990 <read_time_and_data+0x28>

			  	 set_new_date_and_time(new_date,new_time,20,4,15,20,30,22);
 800299a:	2316      	movs	r3, #22
 800299c:	9307      	str	r3, [sp, #28]
 800299e:	231e      	movs	r3, #30
 80029a0:	9306      	str	r3, [sp, #24]
 80029a2:	2314      	movs	r3, #20
 80029a4:	9305      	str	r3, [sp, #20]
 80029a6:	230f      	movs	r3, #15
 80029a8:	9304      	str	r3, [sp, #16]
 80029aa:	2304      	movs	r3, #4
 80029ac:	9303      	str	r3, [sp, #12]
 80029ae:	2314      	movs	r3, #20
 80029b0:	9302      	str	r3, [sp, #8]
 80029b2:	466a      	mov	r2, sp
 80029b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029bc:	e882 0003 	stmia.w	r2, {r0, r1}
 80029c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c6:	6a38      	ldr	r0, [r7, #32]
 80029c8:	f7ff ff9c 	bl	8002904 <set_new_date_and_time>

			  	// ustawiamy godzinę 07:45:00

			  }

			  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN); //pobieramy date i czas
 80029cc:	2200      	movs	r2, #0
 80029ce:	4931      	ldr	r1, [pc, #196]	; (8002a94 <read_time_and_data+0x12c>)
 80029d0:	4831      	ldr	r0, [pc, #196]	; (8002a98 <read_time_and_data+0x130>)
 80029d2:	f006 fcc1 	bl	8009358 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80029d6:	2200      	movs	r2, #0
 80029d8:	4930      	ldr	r1, [pc, #192]	; (8002a9c <read_time_and_data+0x134>)
 80029da:	482f      	ldr	r0, [pc, #188]	; (8002a98 <read_time_and_data+0x130>)
 80029dc:	f006 fd9f 	bl	800951e <HAL_RTC_GetDate>


	if(time.Hours==0 && time.Seconds==0 && time.Minutes==0)  //nastepny dzien
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <read_time_and_data+0x12c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d129      	bne.n	8002a3c <read_time_and_data+0xd4>
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <read_time_and_data+0x12c>)
 80029ea:	789b      	ldrb	r3, [r3, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d125      	bne.n	8002a3c <read_time_and_data+0xd4>
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <read_time_and_data+0x12c>)
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d121      	bne.n	8002a3c <read_time_and_data+0xd4>
			{
		if((HAL_GetTick()-time_compare)>1000)
 80029f8:	f002 f90c 	bl	8004c14 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a06:	d919      	bls.n	8002a3c <read_time_and_data+0xd4>
		{RTC_TimeTypeDef new_time = {0};
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	611a      	str	r2, [r3, #16]
	  	RTC_DateTypeDef new_date={0};
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]

			next_day(new_date,new_time);
 8002a1c:	466a      	mov	r2, sp
 8002a1e:	f107 0318 	add.w	r3, r7, #24
 8002a22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002a26:	e882 0003 	stmia.w	r2, {r0, r1}
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f000 f839 	bl	8002aa8 <next_day>
		time_compare=HAL_GetTick();
 8002a36:	f002 f8ed 	bl	8004c14 <HAL_GetTick>
 8002a3a:	6078      	str	r0, [r7, #4]





	if(HAL_GetTick()-start_Time>=2000)
 8002a3c:	f002 f8ea 	bl	8004c14 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <read_time_and_data+0x138>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a4c:	d31e      	bcc.n	8002a8c <read_time_and_data+0x124>
	{


		printf("RTC: %04d-%02d-%02d, %02d:%02d:%02d\n", 2000 + date.Year, date.Month, date.Date, time.Hours, time.Minutes, time.Seconds);
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <read_time_and_data+0x134>)
 8002a50:	78db      	ldrb	r3, [r3, #3]
 8002a52:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 8002a56:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <read_time_and_data+0x134>)
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <read_time_and_data+0x134>)
 8002a5e:	789b      	ldrb	r3, [r3, #2]
 8002a60:	461d      	mov	r5, r3
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <read_time_and_data+0x12c>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <read_time_and_data+0x12c>)
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <read_time_and_data+0x12c>)
 8002a70:	789b      	ldrb	r3, [r3, #2]
 8002a72:	9302      	str	r3, [sp, #8]
 8002a74:	9001      	str	r0, [sp, #4]
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	462b      	mov	r3, r5
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <read_time_and_data+0x13c>)
 8002a7e:	f00b ff2b 	bl	800e8d8 <iprintf>
		start_Time=HAL_GetTick();
 8002a82:	f002 f8c7 	bl	8004c14 <HAL_GetTick>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <read_time_and_data+0x138>)
 8002a8a:	6013      	str	r3, [r2, #0]
	}

}
 8002a8c:	bf00      	nop
 8002a8e:	3738      	adds	r7, #56	; 0x38
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bdb0      	pop	{r4, r5, r7, pc}
 8002a94:	2000a50c 	.word	0x2000a50c
 8002a98:	2000a59c 	.word	0x2000a59c
 8002a9c:	2000a520 	.word	0x2000a520
 8002aa0:	2000a528 	.word	0x2000a528
 8002aa4:	0801302c 	.word	0x0801302c

08002aa8 <next_day>:
  * @brief
  * Sprawdzenie czy następny dziń nastał
  * @retval None
  */
void next_day(RTC_DateTypeDef new_date,RTC_TimeTypeDef new_time)
{
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	f107 001c 	add.w	r0, r7, #28
 8002ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	printf("nastepny dzien \n");
 8002aba:	484e      	ldr	r0, [pc, #312]	; (8002bf4 <next_day+0x14c>)
 8002abc:	f00b ffa8 	bl	800ea10 <puts>

	if(months_lenghts[new_date.Month-1]==31)
 8002ac0:	797b      	ldrb	r3, [r7, #5]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	4a4c      	ldr	r2, [pc, #304]	; (8002bf8 <next_day+0x150>)
 8002ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aca:	2b1f      	cmp	r3, #31
 8002acc:	d11a      	bne.n	8002b04 <next_day+0x5c>
	{
		if(new_date.Date<31)
 8002ace:	79bb      	ldrb	r3, [r7, #6]
 8002ad0:	2b1e      	cmp	r3, #30
 8002ad2:	d804      	bhi.n	8002ade <next_day+0x36>
		{
			new_date.Date++;
 8002ad4:	79bb      	ldrb	r3, [r7, #6]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	71bb      	strb	r3, [r7, #6]
 8002adc:	e05c      	b.n	8002b98 <next_day+0xf0>
		}
		else
		{
			if(new_date.Month==12)
 8002ade:	797b      	ldrb	r3, [r7, #5]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d108      	bne.n	8002af6 <next_day+0x4e>
			{
				new_date.Month=1;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	717b      	strb	r3, [r7, #5]
				new_date.Date=1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	71bb      	strb	r3, [r7, #6]
				new_date.Year++;
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	71fb      	strb	r3, [r7, #7]
 8002af4:	e050      	b.n	8002b98 <next_day+0xf0>


			}
			else
			{
				new_date.Month++;
 8002af6:	797b      	ldrb	r3, [r7, #5]
 8002af8:	3301      	adds	r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	717b      	strb	r3, [r7, #5]
				new_date.Date=1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	71bb      	strb	r3, [r7, #6]
 8002b02:	e049      	b.n	8002b98 <next_day+0xf0>
		}

	}
	else
	{
		if(months_lenghts[new_date.Month-1]==30)
 8002b04:	797b      	ldrb	r3, [r7, #5]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	4a3b      	ldr	r2, [pc, #236]	; (8002bf8 <next_day+0x150>)
 8002b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0e:	2b1e      	cmp	r3, #30
 8002b10:	d10e      	bne.n	8002b30 <next_day+0x88>
		{
			if(new_date.Date<31)
 8002b12:	79bb      	ldrb	r3, [r7, #6]
 8002b14:	2b1e      	cmp	r3, #30
 8002b16:	d804      	bhi.n	8002b22 <next_day+0x7a>
					{
						new_date.Date++;
 8002b18:	79bb      	ldrb	r3, [r7, #6]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	71bb      	strb	r3, [r7, #6]
 8002b20:	e03a      	b.n	8002b98 <next_day+0xf0>
					}
			else
			{
				new_date.Month++;
 8002b22:	797b      	ldrb	r3, [r7, #5]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	717b      	strb	r3, [r7, #5]
			    new_date.Date=1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	71bb      	strb	r3, [r7, #6]
 8002b2e:	e033      	b.n	8002b98 <next_day+0xf0>
			}

		}
		else
		{
			if(new_date.Month==2)
 8002b30:	797b      	ldrb	r3, [r7, #5]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d130      	bne.n	8002b98 <next_day+0xf0>
			{
				if(new_date.Date<28)
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	2b1b      	cmp	r3, #27
 8002b3a:	d804      	bhi.n	8002b46 <next_day+0x9e>
				{
					new_date.Date++;
 8002b3c:	79bb      	ldrb	r3, [r7, #6]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	71bb      	strb	r3, [r7, #6]
 8002b44:	e028      	b.n	8002b98 <next_day+0xf0>

				}
				else
				{
					if(new_date.Date==28)
 8002b46:	79bb      	ldrb	r3, [r7, #6]
 8002b48:	2b1c      	cmp	r3, #28
 8002b4a:	d11c      	bne.n	8002b86 <next_day+0xde>
					{

						if((new_date.Year/400)==0)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f203 138f 	addw	r3, r3, #399	; 0x18f
 8002b52:	f240 321e 	movw	r2, #798	; 0x31e
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d803      	bhi.n	8002b62 <next_day+0xba>
							{
								months_lenghts[1]=29;
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <next_day+0x150>)
 8002b5c:	221d      	movs	r2, #29
 8002b5e:	605a      	str	r2, [r3, #4]
 8002b60:	e01a      	b.n	8002b98 <next_day+0xf0>

							}
						else
						{

							if((new_date.Year/100)==0)
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b63      	cmp	r3, #99	; 0x63
 8002b66:	d803      	bhi.n	8002b70 <next_day+0xc8>
							{
								months_lenghts[1]=29;
 8002b68:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <next_day+0x150>)
 8002b6a:	221d      	movs	r2, #29
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e013      	b.n	8002b98 <next_day+0xf0>

							}
							else
							{
								if((new_date.Year/4)==0)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d803      	bhi.n	8002b7e <next_day+0xd6>
								{
									months_lenghts[1]=29;
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <next_day+0x150>)
 8002b78:	221d      	movs	r2, #29
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	e00c      	b.n	8002b98 <next_day+0xf0>
								}

								else
								{
									months_lenghts[1]=28;
 8002b7e:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <next_day+0x150>)
 8002b80:	221c      	movs	r2, #28
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	e008      	b.n	8002b98 <next_day+0xf0>
					}

					else
					{

						if(new_date.Date==29)
 8002b86:	79bb      	ldrb	r3, [r7, #6]
 8002b88:	2b1d      	cmp	r3, #29
 8002b8a:	d105      	bne.n	8002b98 <next_day+0xf0>
						{
							new_date.Month++;
 8002b8c:	797b      	ldrb	r3, [r7, #5]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	717b      	strb	r3, [r7, #5]
							new_date.Date=1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	71bb      	strb	r3, [r7, #6]

	}



	 HAL_RTC_GetTime(&hrtc, &new_time, RTC_FORMAT_BIN); //pobieramy date i czas
 8002b98:	f107 031c 	add.w	r3, r7, #28
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4816      	ldr	r0, [pc, #88]	; (8002bfc <next_day+0x154>)
 8002ba2:	f006 fbd9 	bl	8009358 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	4619      	mov	r1, r3
 8002bac:	4813      	ldr	r0, [pc, #76]	; (8002bfc <next_day+0x154>)
 8002bae:	f006 fcb6 	bl	800951e <HAL_RTC_GetDate>

	for(int i=0;i<=12;i++)
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	e010      	b.n	8002bda <next_day+0x132>
	  {


		printf("%c",months_names[new_date.Month-1][i]);
 8002bb8:	797b      	ldrb	r3, [r7, #5]
 8002bba:	1e5a      	subs	r2, r3, #1
 8002bbc:	4910      	ldr	r1, [pc, #64]	; (8002c00 <next_day+0x158>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	18ca      	adds	r2, r1, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f00b fe9a 	bl	800e908 <putchar>
	for(int i=0;i<=12;i++)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	ddeb      	ble.n	8002bb8 <next_day+0x110>
	  }
	printf("\n");
 8002be0:	200a      	movs	r0, #10
 8002be2:	f00b fe91 	bl	800e908 <putchar>


	}
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bf0:	b004      	add	sp, #16
 8002bf2:	4770      	bx	lr
 8002bf4:	08013054 	.word	0x08013054
 8002bf8:	2000010c 	.word	0x2000010c
 8002bfc:	2000a59c 	.word	0x2000a59c
 8002c00:	2000001c 	.word	0x2000001c

08002c04 <ds18b20_temperature_sensor>:
  * @brief
  * Zapis danych z czujnika temperatury
  * @retval None
  */
void ds18b20_temperature_sensor()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
	  ds18b20_start_measure(NULL);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7ff f852 	bl	8001cb4 <ds18b20_start_measure>
		    	 if(HAL_GetTick()-start_Time2>=2000)
 8002c10:	f002 f800 	bl	8004c14 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <ds18b20_temperature_sensor+0x64>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c20:	d31e      	bcc.n	8002c60 <ds18b20_temperature_sensor+0x5c>
		    		    	{
		    		 float temp = ds18b20_get_temp(NULL);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7ff f884 	bl	8001d30 <ds18b20_get_temp>
 8002c28:	ed87 0a01 	vstr	s0, [r7, #4]
		    if (temp >= 80.0f)
 8002c2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c30:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c6c <ds18b20_temperature_sensor+0x68>
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	db03      	blt.n	8002c46 <ds18b20_temperature_sensor+0x42>
		      printf("Sensor error...\n");
 8002c3e:	480c      	ldr	r0, [pc, #48]	; (8002c70 <ds18b20_temperature_sensor+0x6c>)
 8002c40:	f00b fee6 	bl	800ea10 <puts>
 8002c44:	e007      	b.n	8002c56 <ds18b20_temperature_sensor+0x52>
		    else
		      printf("temperature of ds18b20: %.1f\n", temp);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fc8e 	bl	8000568 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4808      	ldr	r0, [pc, #32]	; (8002c74 <ds18b20_temperature_sensor+0x70>)
 8002c52:	f00b fe41 	bl	800e8d8 <iprintf>





		    start_Time2=HAL_GetTick();
 8002c56:	f001 ffdd 	bl	8004c14 <HAL_GetTick>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a02      	ldr	r2, [pc, #8]	; (8002c68 <ds18b20_temperature_sensor+0x64>)
 8002c5e:	6013      	str	r3, [r2, #0]


		    		    	}


}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	2000a52c 	.word	0x2000a52c
 8002c6c:	42a00000 	.word	0x42a00000
 8002c70:	08013064 	.word	0x08013064
 8002c74:	08013074 	.word	0x08013074

08002c78 <print_what_you_write_and_entered>:
  * @brief
  * Wypisanie na porcie szeregowym napisanego na porcie szeregowym tekstu
  * @retval None
  */
void print_what_you_write_and_entered()
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0

	 uint8_t value;
		   			  if (HAL_UART_Receive(&huart2, &value, 1, 0) == HAL_OK)
 8002c7e:	1df9      	adds	r1, r7, #7
 8002c80:	2300      	movs	r3, #0
 8002c82:	2201      	movs	r2, #1
 8002c84:	4806      	ldr	r0, [pc, #24]	; (8002ca0 <print_what_you_write_and_entered+0x28>)
 8002c86:	f009 f8f5 	bl	800be74 <HAL_UART_Receive>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <print_what_you_write_and_entered+0x20>
		   				  line_append(value);
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fc30 	bl	80044f8 <line_append>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000a790 	.word	0x2000a790

08002ca4 <serial_port_information>:
  * @brief
  * Podstawowe informacie dotyczące pracy na porcie szeregowym
  * @retval None
  */
void serial_port_information()
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
	printf("jesli chcesz odczytywac pomiary na porcie szeregowym, napisz 'also reading' i zaakceptuj enterem \n");
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <serial_port_information+0x14>)
 8002caa:	f00b feb1 	bl	800ea10 <puts>
	printf("jesli chcesz tylko pisac na porcie szeregowym, napisz 'just write' i zaakceptuj enterem \n");
 8002cae:	4803      	ldr	r0, [pc, #12]	; (8002cbc <serial_port_information+0x18>)
 8002cb0:	f00b feae 	bl	800ea10 <puts>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	08013094 	.word	0x08013094
 8002cbc:	080130f8 	.word	0x080130f8

08002cc0 <start_GetTicks>:
  * @brief
  * Wystartowanie timerów SYsticks do różnych funkcji
  * @retval None
  */
void start_GetTicks()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	time_compare =HAL_GetTick();
 8002cc4:	f001 ffa6 	bl	8004c14 <HAL_GetTick>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a1b      	ldr	r2, [pc, #108]	; (8002d38 <start_GetTicks+0x78>)
 8002ccc:	6013      	str	r3, [r2, #0]
	 start_Time=HAL_GetTick();
 8002cce:	f001 ffa1 	bl	8004c14 <HAL_GetTick>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a19      	ldr	r2, [pc, #100]	; (8002d3c <start_GetTicks+0x7c>)
 8002cd6:	6013      	str	r3, [r2, #0]
	 start_Time2=HAL_GetTick();
 8002cd8:	f001 ff9c 	bl	8004c14 <HAL_GetTick>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a18      	ldr	r2, [pc, #96]	; (8002d40 <start_GetTicks+0x80>)
 8002ce0:	6013      	str	r3, [r2, #0]
	 start_Time3=HAL_GetTick();
 8002ce2:	f001 ff97 	bl	8004c14 <HAL_GetTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	4a16      	ldr	r2, [pc, #88]	; (8002d44 <start_GetTicks+0x84>)
 8002cea:	6013      	str	r3, [r2, #0]
	 start_Time4=HAL_GetTick();
 8002cec:	f001 ff92 	bl	8004c14 <HAL_GetTick>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a15      	ldr	r2, [pc, #84]	; (8002d48 <start_GetTicks+0x88>)
 8002cf4:	6013      	str	r3, [r2, #0]
	 start_Time5=HAL_GetTick();
 8002cf6:	f001 ff8d 	bl	8004c14 <HAL_GetTick>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <start_GetTicks+0x8c>)
 8002cfe:	6013      	str	r3, [r2, #0]
	 start_Time6=HAL_GetTick();
 8002d00:	f001 ff88 	bl	8004c14 <HAL_GetTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <start_GetTicks+0x90>)
 8002d08:	6013      	str	r3, [r2, #0]
	 start_Time7=HAL_GetTick();
 8002d0a:	f001 ff83 	bl	8004c14 <HAL_GetTick>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <start_GetTicks+0x94>)
 8002d12:	6013      	str	r3, [r2, #0]
	  start_Time11=HAL_GetTick();
 8002d14:	f001 ff7e 	bl	8004c14 <HAL_GetTick>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a0f      	ldr	r2, [pc, #60]	; (8002d58 <start_GetTicks+0x98>)
 8002d1c:	6013      	str	r3, [r2, #0]
	  start_Time9=HAL_GetTick();
 8002d1e:	f001 ff79 	bl	8004c14 <HAL_GetTick>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <start_GetTicks+0x9c>)
 8002d26:	6013      	str	r3, [r2, #0]
	  start_Time12=HAL_GetTick();
 8002d28:	f001 ff74 	bl	8004c14 <HAL_GetTick>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <start_GetTicks+0xa0>)
 8002d30:	6013      	str	r3, [r2, #0]
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000a524 	.word	0x2000a524
 8002d3c:	2000a528 	.word	0x2000a528
 8002d40:	2000a52c 	.word	0x2000a52c
 8002d44:	2000a530 	.word	0x2000a530
 8002d48:	2000a534 	.word	0x2000a534
 8002d4c:	2000a538 	.word	0x2000a538
 8002d50:	2000a53c 	.word	0x2000a53c
 8002d54:	2000a540 	.word	0x2000a540
 8002d58:	2000a544 	.word	0x2000a544
 8002d5c:	2000a548 	.word	0x2000a548
 8002d60:	2000a54c 	.word	0x2000a54c

08002d64 <serial_port_data>:


void serial_port_data(){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	  if(onlywrite==0)
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <serial_port_data+0x24>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d108      	bne.n	8002d82 <serial_port_data+0x1e>
	  {
		  print_lps25hb_sensor();
 8002d70:	f7ff fd1e 	bl	80027b0 <print_lps25hb_sensor>
	  // koniec czujnik cisnienia


// poczatek czujnik temperatury 1-wire
	    	ds18b20_temperature_sensor();
 8002d74:	f7ff ff46 	bl	8002c04 <ds18b20_temperature_sensor>

	  // koniec czujnik temperatury 1-wire



	    read_time_and_data(time_compare);
 8002d78:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <serial_port_data+0x28>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fdf3 	bl	8002968 <read_time_and_data>
	  }
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000a554 	.word	0x2000a554
 8002d8c:	2000a524 	.word	0x2000a524

08002d90 <lcd_put_in_while>:
/**
  * @brief
  * Wyświetlanie na wyświetlaczu TFT poszczególnego tekstu na poszczególnych kanałach
  * @retval None
  */
void lcd_put_in_while(){
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b09d      	sub	sp, #116	; 0x74
 8002d94:	af04      	add	r7, sp, #16


		 //lcd start

	 if(licznik_kanalu==-1)
 8002d96:	4bba      	ldr	r3, [pc, #744]	; (8003080 <lcd_put_in_while+0x2f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	f040 80a5 	bne.w	8002eec <lcd_put_in_while+0x15c>
			 {
				 if(czy_wyswietlono==0)
 8002da2:	4bb8      	ldr	r3, [pc, #736]	; (8003084 <lcd_put_in_while+0x2f4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 80a0 	bne.w	8002eec <lcd_put_in_while+0x15c>
				 {wchar_t *result [20];
					 	 	 	 	 	 	 	 	 	 	 	 	 	 	  hagl_put_text((L"                        "), 20, 25, YELLOW, font6x9);
 8002dac:	4bb6      	ldr	r3, [pc, #728]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002db4:	2219      	movs	r2, #25
 8002db6:	2114      	movs	r1, #20
 8002db8:	48b4      	ldr	r0, [pc, #720]	; (800308c <lcd_put_in_while+0x2fc>)
 8002dba:	f00a fb47 	bl	800d44c <hagl_put_text>
					 														  hagl_put_text((L"                        "), 20, 35, YELLOW, font6x9);
 8002dbe:	4bb2      	ldr	r3, [pc, #712]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002dc6:	2223      	movs	r2, #35	; 0x23
 8002dc8:	2114      	movs	r1, #20
 8002dca:	48b0      	ldr	r0, [pc, #704]	; (800308c <lcd_put_in_while+0x2fc>)
 8002dcc:	f00a fb3e 	bl	800d44c <hagl_put_text>
					 														  hagl_put_text((L"                        "), 20, 45, YELLOW, font6x9);
 8002dd0:	4bad      	ldr	r3, [pc, #692]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002dd8:	222d      	movs	r2, #45	; 0x2d
 8002dda:	2114      	movs	r1, #20
 8002ddc:	48ab      	ldr	r0, [pc, #684]	; (800308c <lcd_put_in_while+0x2fc>)
 8002dde:	f00a fb35 	bl	800d44c <hagl_put_text>
					 														  hagl_put_text((L"                        "), 20, 55, YELLOW, font6x9);
 8002de2:	4ba9      	ldr	r3, [pc, #676]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002dea:	2237      	movs	r2, #55	; 0x37
 8002dec:	2114      	movs	r1, #20
 8002dee:	48a7      	ldr	r0, [pc, #668]	; (800308c <lcd_put_in_while+0x2fc>)
 8002df0:	f00a fb2c 	bl	800d44c <hagl_put_text>
					 														  hagl_put_text((L"                        "), 20, 65, YELLOW, font6x9);
 8002df4:	4ba4      	ldr	r3, [pc, #656]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002dfc:	2241      	movs	r2, #65	; 0x41
 8002dfe:	2114      	movs	r1, #20
 8002e00:	48a2      	ldr	r0, [pc, #648]	; (800308c <lcd_put_in_while+0x2fc>)
 8002e02:	f00a fb23 	bl	800d44c <hagl_put_text>
					 														  hagl_put_text((L"                        "), 20, 75, YELLOW, font6x9);
 8002e06:	4ba0      	ldr	r3, [pc, #640]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002e0e:	224b      	movs	r2, #75	; 0x4b
 8002e10:	2114      	movs	r1, #20
 8002e12:	489e      	ldr	r0, [pc, #632]	; (800308c <lcd_put_in_while+0x2fc>)
 8002e14:	f00a fb1a 	bl	800d44c <hagl_put_text>
					 														  hagl_put_text((L"                        "), 20, 85, YELLOW, font6x9);
 8002e18:	4b9b      	ldr	r3, [pc, #620]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002e20:	2255      	movs	r2, #85	; 0x55
 8002e22:	2114      	movs	r1, #20
 8002e24:	4899      	ldr	r0, [pc, #612]	; (800308c <lcd_put_in_while+0x2fc>)
 8002e26:	f00a fb11 	bl	800d44c <hagl_put_text>
									  lcd_copy();
 8002e2a:	f7ff fae5 	bl	80023f8 <lcd_copy>

					  swprintf(result, 20,L"Temp Warsz: %s°C", Warszawa_pogoda.temp);
 8002e2e:	4638      	mov	r0, r7
 8002e30:	4b97      	ldr	r3, [pc, #604]	; (8003090 <lcd_put_in_while+0x300>)
 8002e32:	4a98      	ldr	r2, [pc, #608]	; (8003094 <lcd_put_in_while+0x304>)
 8002e34:	2114      	movs	r1, #20
 8002e36:	f00c fd59 	bl	800f8ec <swprintf>
					  hagl_put_text((result), 20, 25, YELLOW, font6x9);
 8002e3a:	4638      	mov	r0, r7
 8002e3c:	4b92      	ldr	r3, [pc, #584]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002e44:	2219      	movs	r2, #25
 8002e46:	2114      	movs	r1, #20
 8002e48:	f00a fb00 	bl	800d44c <hagl_put_text>
					  swprintf(result, 20,L"Wiatr Warsz:%skm/h", Warszawa_pogoda.wiatr);
 8002e4c:	4638      	mov	r0, r7
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <lcd_put_in_while+0x308>)
 8002e50:	4a92      	ldr	r2, [pc, #584]	; (800309c <lcd_put_in_while+0x30c>)
 8002e52:	2114      	movs	r1, #20
 8002e54:	f00c fd4a 	bl	800f8ec <swprintf>
					  hagl_put_text((result), 20, 35, YELLOW, font6x9);
 8002e58:	4638      	mov	r0, r7
 8002e5a:	4b8b      	ldr	r3, [pc, #556]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002e62:	2223      	movs	r2, #35	; 0x23
 8002e64:	2114      	movs	r1, #20
 8002e66:	f00a faf1 	bl	800d44c <hagl_put_text>
					  swprintf(result, 20,L"Cisn Warsz: %s hPa", Warszawa_pogoda.cisn);
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	4b8c      	ldr	r3, [pc, #560]	; (80030a0 <lcd_put_in_while+0x310>)
 8002e6e:	4a8d      	ldr	r2, [pc, #564]	; (80030a4 <lcd_put_in_while+0x314>)
 8002e70:	2114      	movs	r1, #20
 8002e72:	f00c fd3b 	bl	800f8ec <swprintf>
					  hagl_put_text((result), 20, 45, YELLOW, font6x9);
 8002e76:	4638      	mov	r0, r7
 8002e78:	4b83      	ldr	r3, [pc, #524]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002e80:	222d      	movs	r2, #45	; 0x2d
 8002e82:	2114      	movs	r1, #20
 8002e84:	f00a fae2 	bl	800d44c <hagl_put_text>
					  swprintf(result, 20,L"Temp Gdan: %s°C", Gdansk_pogoda.temp);
 8002e88:	4638      	mov	r0, r7
 8002e8a:	4b87      	ldr	r3, [pc, #540]	; (80030a8 <lcd_put_in_while+0x318>)
 8002e8c:	4a87      	ldr	r2, [pc, #540]	; (80030ac <lcd_put_in_while+0x31c>)
 8002e8e:	2114      	movs	r1, #20
 8002e90:	f00c fd2c 	bl	800f8ec <swprintf>
										  hagl_put_text((result), 20, 55, YELLOW, font6x9);
 8002e94:	4638      	mov	r0, r7
 8002e96:	4b7c      	ldr	r3, [pc, #496]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002e9e:	2237      	movs	r2, #55	; 0x37
 8002ea0:	2114      	movs	r1, #20
 8002ea2:	f00a fad3 	bl	800d44c <hagl_put_text>
										  swprintf(result, 20,L"Wiatr Gdan:%skm/h", Gdansk_pogoda.wiatr);
 8002ea6:	4638      	mov	r0, r7
 8002ea8:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <lcd_put_in_while+0x320>)
 8002eaa:	4a82      	ldr	r2, [pc, #520]	; (80030b4 <lcd_put_in_while+0x324>)
 8002eac:	2114      	movs	r1, #20
 8002eae:	f00c fd1d 	bl	800f8ec <swprintf>
										  hagl_put_text((result), 20, 65, YELLOW, font6x9);
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	4b74      	ldr	r3, [pc, #464]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002ebc:	2241      	movs	r2, #65	; 0x41
 8002ebe:	2114      	movs	r1, #20
 8002ec0:	f00a fac4 	bl	800d44c <hagl_put_text>
										  swprintf(result, 20,L"Cisn Gdan: %s hPa", Gdansk_pogoda.cisn);
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	4b7c      	ldr	r3, [pc, #496]	; (80030b8 <lcd_put_in_while+0x328>)
 8002ec8:	4a7c      	ldr	r2, [pc, #496]	; (80030bc <lcd_put_in_while+0x32c>)
 8002eca:	2114      	movs	r1, #20
 8002ecc:	f00c fd0e 	bl	800f8ec <swprintf>
										  hagl_put_text((result), 20, 75, YELLOW, font6x9);
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	4b6d      	ldr	r3, [pc, #436]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002eda:	224b      	movs	r2, #75	; 0x4b
 8002edc:	2114      	movs	r1, #20
 8002ede:	f00a fab5 	bl	800d44c <hagl_put_text>

			  lcd_copy();
 8002ee2:	f7ff fa89 	bl	80023f8 <lcd_copy>
			  czy_wyswietlono=1;
 8002ee6:	4b67      	ldr	r3, [pc, #412]	; (8003084 <lcd_put_in_while+0x2f4>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

			 }



	 if(licznik_kanalu==-2)
 8002eec:	4b64      	ldr	r3, [pc, #400]	; (8003080 <lcd_put_in_while+0x2f0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f113 0f02 	cmn.w	r3, #2
 8002ef4:	f040 815e 	bne.w	80031b4 <lcd_put_in_while+0x424>
			 {



				 if(czy_wyswietlono==0)
 8002ef8:	4b62      	ldr	r3, [pc, #392]	; (8003084 <lcd_put_in_while+0x2f4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f040 8159 	bne.w	80031b4 <lcd_put_in_while+0x424>
				 {
	 	 	 	 	 	 hagl_put_text((L"                        "), 20, 25, YELLOW, font6x9);
 8002f02:	4b61      	ldr	r3, [pc, #388]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f0a:	2219      	movs	r2, #25
 8002f0c:	2114      	movs	r1, #20
 8002f0e:	485f      	ldr	r0, [pc, #380]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f10:	f00a fa9c 	bl	800d44c <hagl_put_text>
					  hagl_put_text((L"                        "), 20, 35, YELLOW, font6x9);
 8002f14:	4b5c      	ldr	r3, [pc, #368]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f1c:	2223      	movs	r2, #35	; 0x23
 8002f1e:	2114      	movs	r1, #20
 8002f20:	485a      	ldr	r0, [pc, #360]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f22:	f00a fa93 	bl	800d44c <hagl_put_text>
					  hagl_put_text((L"                        "), 20, 45, YELLOW, font6x9);
 8002f26:	4b58      	ldr	r3, [pc, #352]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f2e:	222d      	movs	r2, #45	; 0x2d
 8002f30:	2114      	movs	r1, #20
 8002f32:	4856      	ldr	r0, [pc, #344]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f34:	f00a fa8a 	bl	800d44c <hagl_put_text>
					  hagl_put_text((L"                        "), 20, 55, YELLOW, font6x9);
 8002f38:	4b53      	ldr	r3, [pc, #332]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f40:	2237      	movs	r2, #55	; 0x37
 8002f42:	2114      	movs	r1, #20
 8002f44:	4851      	ldr	r0, [pc, #324]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f46:	f00a fa81 	bl	800d44c <hagl_put_text>
					  hagl_put_text((L"                        "), 20, 65, YELLOW, font6x9);
 8002f4a:	4b4f      	ldr	r3, [pc, #316]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f52:	2241      	movs	r2, #65	; 0x41
 8002f54:	2114      	movs	r1, #20
 8002f56:	484d      	ldr	r0, [pc, #308]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f58:	f00a fa78 	bl	800d44c <hagl_put_text>
					  hagl_put_text((L"                        "), 20, 75, YELLOW, font6x9);
 8002f5c:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f64:	224b      	movs	r2, #75	; 0x4b
 8002f66:	2114      	movs	r1, #20
 8002f68:	4848      	ldr	r0, [pc, #288]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f6a:	f00a fa6f 	bl	800d44c <hagl_put_text>
					  hagl_put_text((L"                        "), 20, 85, YELLOW, font6x9);
 8002f6e:	4b46      	ldr	r3, [pc, #280]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002f76:	2255      	movs	r2, #85	; 0x55
 8002f78:	2114      	movs	r1, #20
 8002f7a:	4844      	ldr	r0, [pc, #272]	; (800308c <lcd_put_in_while+0x2fc>)
 8002f7c:	f00a fa66 	bl	800d44c <hagl_put_text>
									  lcd_copy();
 8002f80:	f7ff fa3a 	bl	80023f8 <lcd_copy>

									  wchar_t *result [20];

									  read_to_memory(0);
 8002f84:	2000      	movs	r0, #0
 8002f86:	f000 fb39 	bl	80035fc <read_to_memory>
									  swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 8002f8a:	4b4d      	ldr	r3, [pc, #308]	; (80030c0 <lcd_put_in_while+0x330>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461c      	mov	r4, r3
 8002f90:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <lcd_put_in_while+0x334>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002f98:	4a4b      	ldr	r2, [pc, #300]	; (80030c8 <lcd_put_in_while+0x338>)
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4a4b      	ldr	r2, [pc, #300]	; (80030cc <lcd_put_in_while+0x33c>)
 8002fa0:	7812      	ldrb	r2, [r2, #0]
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	9202      	str	r2, [sp, #8]
 8002fa6:	9101      	str	r1, [sp, #4]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	4623      	mov	r3, r4
 8002fac:	4a48      	ldr	r2, [pc, #288]	; (80030d0 <lcd_put_in_while+0x340>)
 8002fae:	2114      	movs	r1, #20
 8002fb0:	f00c fc9c 	bl	800f8ec <swprintf>
									  hagl_put_text((result), 20, 25, YELLOW, font6x9);
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	4b34      	ldr	r3, [pc, #208]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8002fbe:	2219      	movs	r2, #25
 8002fc0:	2114      	movs	r1, #20
 8002fc2:	f00a fa43 	bl	800d44c <hagl_put_text>
									  read_to_memory(1);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f000 fb18 	bl	80035fc <read_to_memory>
									  swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 8002fcc:	4b3c      	ldr	r3, [pc, #240]	; (80030c0 <lcd_put_in_while+0x330>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	; (80030c4 <lcd_put_in_while+0x334>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002fda:	4a3b      	ldr	r2, [pc, #236]	; (80030c8 <lcd_put_in_while+0x338>)
 8002fdc:	7812      	ldrb	r2, [r2, #0]
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <lcd_put_in_while+0x33c>)
 8002fe2:	7812      	ldrb	r2, [r2, #0]
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	9202      	str	r2, [sp, #8]
 8002fe8:	9101      	str	r1, [sp, #4]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4623      	mov	r3, r4
 8002fee:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <lcd_put_in_while+0x340>)
 8002ff0:	2114      	movs	r1, #20
 8002ff2:	f00c fc7b 	bl	800f8ec <swprintf>
									  hagl_put_text((result), 20, 35, YELLOW, font6x9);
 8002ff6:	4638      	mov	r0, r7
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <lcd_put_in_while+0x2f8>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003000:	2223      	movs	r2, #35	; 0x23
 8003002:	2114      	movs	r1, #20
 8003004:	f00a fa22 	bl	800d44c <hagl_put_text>
									  read_to_memory(2);
 8003008:	2002      	movs	r0, #2
 800300a:	f000 faf7 	bl	80035fc <read_to_memory>
									 swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 800300e:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <lcd_put_in_while+0x330>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461c      	mov	r4, r3
 8003014:	4b2b      	ldr	r3, [pc, #172]	; (80030c4 <lcd_put_in_while+0x334>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800301c:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <lcd_put_in_while+0x338>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	4611      	mov	r1, r2
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <lcd_put_in_while+0x33c>)
 8003024:	7812      	ldrb	r2, [r2, #0]
 8003026:	4638      	mov	r0, r7
 8003028:	9202      	str	r2, [sp, #8]
 800302a:	9101      	str	r1, [sp, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4623      	mov	r3, r4
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <lcd_put_in_while+0x340>)
 8003032:	2114      	movs	r1, #20
 8003034:	f00c fc5a 	bl	800f8ec <swprintf>
									 hagl_put_text((result), 20, 45, YELLOW, font6x9);
 8003038:	4638      	mov	r0, r7
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <lcd_put_in_while+0x2f8>)
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003042:	222d      	movs	r2, #45	; 0x2d
 8003044:	2114      	movs	r1, #20
 8003046:	f00a fa01 	bl	800d44c <hagl_put_text>
									 read_to_memory(3);
 800304a:	2003      	movs	r0, #3
 800304c:	f000 fad6 	bl	80035fc <read_to_memory>
									 swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <lcd_put_in_while+0x330>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	461c      	mov	r4, r3
 8003056:	4b1b      	ldr	r3, [pc, #108]	; (80030c4 <lcd_put_in_while+0x334>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800305e:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <lcd_put_in_while+0x338>)
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	4611      	mov	r1, r2
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <lcd_put_in_while+0x33c>)
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	4638      	mov	r0, r7
 800306a:	9202      	str	r2, [sp, #8]
 800306c:	9101      	str	r1, [sp, #4]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	4623      	mov	r3, r4
 8003072:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <lcd_put_in_while+0x340>)
 8003074:	2114      	movs	r1, #20
 8003076:	f00c fc39 	bl	800f8ec <swprintf>
									 hagl_put_text((result), 20, 55, YELLOW, font6x9);
 800307a:	4638      	mov	r0, r7
 800307c:	e02a      	b.n	80030d4 <lcd_put_in_while+0x344>
 800307e:	bf00      	nop
 8003080:	2000a4f8 	.word	0x2000a4f8
 8003084:	2000a4fc 	.word	0x2000a4fc
 8003088:	080138b4 	.word	0x080138b4
 800308c:	08013154 	.word	0x08013154
 8003090:	2000a55c 	.word	0x2000a55c
 8003094:	080131b8 	.word	0x080131b8
 8003098:	2000a570 	.word	0x2000a570
 800309c:	080131fc 	.word	0x080131fc
 80030a0:	2000a566 	.word	0x2000a566
 80030a4:	08013248 	.word	0x08013248
 80030a8:	2000a57c 	.word	0x2000a57c
 80030ac:	08013294 	.word	0x08013294
 80030b0:	2000a590 	.word	0x2000a590
 80030b4:	080132d4 	.word	0x080132d4
 80030b8:	2000a586 	.word	0x2000a586
 80030bc:	0801331c 	.word	0x0801331c
 80030c0:	2000a558 	.word	0x2000a558
 80030c4:	2000a559 	.word	0x2000a559
 80030c8:	2000a55a 	.word	0x2000a55a
 80030cc:	2000a55b 	.word	0x2000a55b
 80030d0:	08013364 	.word	0x08013364
 80030d4:	4bb7      	ldr	r3, [pc, #732]	; (80033b4 <lcd_put_in_while+0x624>)
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80030dc:	2237      	movs	r2, #55	; 0x37
 80030de:	2114      	movs	r1, #20
 80030e0:	f00a f9b4 	bl	800d44c <hagl_put_text>
									 read_to_memory(4);
 80030e4:	2004      	movs	r0, #4
 80030e6:	f000 fa89 	bl	80035fc <read_to_memory>
									swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 80030ea:	4bb3      	ldr	r3, [pc, #716]	; (80033b8 <lcd_put_in_while+0x628>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	461c      	mov	r4, r3
 80030f0:	4bb2      	ldr	r3, [pc, #712]	; (80033bc <lcd_put_in_while+0x62c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80030f8:	4ab1      	ldr	r2, [pc, #708]	; (80033c0 <lcd_put_in_while+0x630>)
 80030fa:	7812      	ldrb	r2, [r2, #0]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4ab1      	ldr	r2, [pc, #708]	; (80033c4 <lcd_put_in_while+0x634>)
 8003100:	7812      	ldrb	r2, [r2, #0]
 8003102:	4638      	mov	r0, r7
 8003104:	9202      	str	r2, [sp, #8]
 8003106:	9101      	str	r1, [sp, #4]
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	4623      	mov	r3, r4
 800310c:	4aae      	ldr	r2, [pc, #696]	; (80033c8 <lcd_put_in_while+0x638>)
 800310e:	2114      	movs	r1, #20
 8003110:	f00c fbec 	bl	800f8ec <swprintf>
									hagl_put_text((result), 20, 65, YELLOW, font6x9);
 8003114:	4638      	mov	r0, r7
 8003116:	4ba7      	ldr	r3, [pc, #668]	; (80033b4 <lcd_put_in_while+0x624>)
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800311e:	2241      	movs	r2, #65	; 0x41
 8003120:	2114      	movs	r1, #20
 8003122:	f00a f993 	bl	800d44c <hagl_put_text>
									 read_to_memory(5);
 8003126:	2005      	movs	r0, #5
 8003128:	f000 fa68 	bl	80035fc <read_to_memory>
									swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 800312c:	4ba2      	ldr	r3, [pc, #648]	; (80033b8 <lcd_put_in_while+0x628>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461c      	mov	r4, r3
 8003132:	4ba2      	ldr	r3, [pc, #648]	; (80033bc <lcd_put_in_while+0x62c>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800313a:	4aa1      	ldr	r2, [pc, #644]	; (80033c0 <lcd_put_in_while+0x630>)
 800313c:	7812      	ldrb	r2, [r2, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	4aa0      	ldr	r2, [pc, #640]	; (80033c4 <lcd_put_in_while+0x634>)
 8003142:	7812      	ldrb	r2, [r2, #0]
 8003144:	4638      	mov	r0, r7
 8003146:	9202      	str	r2, [sp, #8]
 8003148:	9101      	str	r1, [sp, #4]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	4623      	mov	r3, r4
 800314e:	4a9e      	ldr	r2, [pc, #632]	; (80033c8 <lcd_put_in_while+0x638>)
 8003150:	2114      	movs	r1, #20
 8003152:	f00c fbcb 	bl	800f8ec <swprintf>
									hagl_put_text((result), 20, 75, YELLOW, font6x9);
 8003156:	4638      	mov	r0, r7
 8003158:	4b96      	ldr	r3, [pc, #600]	; (80033b4 <lcd_put_in_while+0x624>)
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003160:	224b      	movs	r2, #75	; 0x4b
 8003162:	2114      	movs	r1, #20
 8003164:	f00a f972 	bl	800d44c <hagl_put_text>
									 read_to_memory(6);
 8003168:	2006      	movs	r0, #6
 800316a:	f000 fa47 	bl	80035fc <read_to_memory>
									swprintf(result, 20,L"temp:%d, %04d-%02d-%02d", result_memory,2000+result_memory2,result_memory3,result_memory4);
 800316e:	4b92      	ldr	r3, [pc, #584]	; (80033b8 <lcd_put_in_while+0x628>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461c      	mov	r4, r3
 8003174:	4b91      	ldr	r3, [pc, #580]	; (80033bc <lcd_put_in_while+0x62c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800317c:	4a90      	ldr	r2, [pc, #576]	; (80033c0 <lcd_put_in_while+0x630>)
 800317e:	7812      	ldrb	r2, [r2, #0]
 8003180:	4611      	mov	r1, r2
 8003182:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <lcd_put_in_while+0x634>)
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	4638      	mov	r0, r7
 8003188:	9202      	str	r2, [sp, #8]
 800318a:	9101      	str	r1, [sp, #4]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4623      	mov	r3, r4
 8003190:	4a8d      	ldr	r2, [pc, #564]	; (80033c8 <lcd_put_in_while+0x638>)
 8003192:	2114      	movs	r1, #20
 8003194:	f00c fbaa 	bl	800f8ec <swprintf>
								    hagl_put_text((result), 20, 85, YELLOW, font6x9);
 8003198:	4638      	mov	r0, r7
 800319a:	4b86      	ldr	r3, [pc, #536]	; (80033b4 <lcd_put_in_while+0x624>)
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80031a2:	2255      	movs	r2, #85	; 0x55
 80031a4:	2114      	movs	r1, #20
 80031a6:	f00a f951 	bl	800d44c <hagl_put_text>



			  lcd_copy();
 80031aa:	f7ff f925 	bl	80023f8 <lcd_copy>
			  czy_wyswietlono=1;
 80031ae:	4b87      	ldr	r3, [pc, #540]	; (80033cc <lcd_put_in_while+0x63c>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	601a      	str	r2, [r3, #0]





		 if(licznik_kanalu==0)
 80031b4:	4b86      	ldr	r3, [pc, #536]	; (80033d0 <lcd_put_in_while+0x640>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d152      	bne.n	8003262 <lcd_put_in_while+0x4d2>
		 {
			 if(czy_wyswietlono==0)
 80031bc:	4b83      	ldr	r3, [pc, #524]	; (80033cc <lcd_put_in_while+0x63c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d14e      	bne.n	8003262 <lcd_put_in_while+0x4d2>
			 {
	 	 	 	 	 	  hagl_put_text((L"                        "), 20, 25, YELLOW, font6x9);
 80031c4:	4b7b      	ldr	r3, [pc, #492]	; (80033b4 <lcd_put_in_while+0x624>)
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80031cc:	2219      	movs	r2, #25
 80031ce:	2114      	movs	r1, #20
 80031d0:	4880      	ldr	r0, [pc, #512]	; (80033d4 <lcd_put_in_while+0x644>)
 80031d2:	f00a f93b 	bl	800d44c <hagl_put_text>
				  hagl_put_text((L"                        "), 20, 35, YELLOW, font6x9);
 80031d6:	4b77      	ldr	r3, [pc, #476]	; (80033b4 <lcd_put_in_while+0x624>)
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80031de:	2223      	movs	r2, #35	; 0x23
 80031e0:	2114      	movs	r1, #20
 80031e2:	487c      	ldr	r0, [pc, #496]	; (80033d4 <lcd_put_in_while+0x644>)
 80031e4:	f00a f932 	bl	800d44c <hagl_put_text>
				  hagl_put_text((L"                        "), 20, 45, YELLOW, font6x9);
 80031e8:	4b72      	ldr	r3, [pc, #456]	; (80033b4 <lcd_put_in_while+0x624>)
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80031f0:	222d      	movs	r2, #45	; 0x2d
 80031f2:	2114      	movs	r1, #20
 80031f4:	4877      	ldr	r0, [pc, #476]	; (80033d4 <lcd_put_in_while+0x644>)
 80031f6:	f00a f929 	bl	800d44c <hagl_put_text>
				  hagl_put_text((L"                        "), 20, 55, YELLOW, font6x9);
 80031fa:	4b6e      	ldr	r3, [pc, #440]	; (80033b4 <lcd_put_in_while+0x624>)
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003202:	2237      	movs	r2, #55	; 0x37
 8003204:	2114      	movs	r1, #20
 8003206:	4873      	ldr	r0, [pc, #460]	; (80033d4 <lcd_put_in_while+0x644>)
 8003208:	f00a f920 	bl	800d44c <hagl_put_text>
				  hagl_put_text((L"                        "), 20, 65, YELLOW, font6x9);
 800320c:	4b69      	ldr	r3, [pc, #420]	; (80033b4 <lcd_put_in_while+0x624>)
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003214:	2241      	movs	r2, #65	; 0x41
 8003216:	2114      	movs	r1, #20
 8003218:	486e      	ldr	r0, [pc, #440]	; (80033d4 <lcd_put_in_while+0x644>)
 800321a:	f00a f917 	bl	800d44c <hagl_put_text>
				  hagl_put_text((L"                        "), 20, 75, YELLOW, font6x9);
 800321e:	4b65      	ldr	r3, [pc, #404]	; (80033b4 <lcd_put_in_while+0x624>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003226:	224b      	movs	r2, #75	; 0x4b
 8003228:	2114      	movs	r1, #20
 800322a:	486a      	ldr	r0, [pc, #424]	; (80033d4 <lcd_put_in_while+0x644>)
 800322c:	f00a f90e 	bl	800d44c <hagl_put_text>
				  hagl_put_text((L"                        "), 20, 85, YELLOW, font6x9);
 8003230:	4b60      	ldr	r3, [pc, #384]	; (80033b4 <lcd_put_in_while+0x624>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003238:	2255      	movs	r2, #85	; 0x55
 800323a:	2114      	movs	r1, #20
 800323c:	4865      	ldr	r0, [pc, #404]	; (80033d4 <lcd_put_in_while+0x644>)
 800323e:	f00a f905 	bl	800d44c <hagl_put_text>
								  lcd_copy();
 8003242:	f7ff f8d9 	bl	80023f8 <lcd_copy>
				  hagl_put_text((L"START"), 40, 55, YELLOW, font6x9);
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <lcd_put_in_while+0x624>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800324e:	2237      	movs	r2, #55	; 0x37
 8003250:	2128      	movs	r1, #40	; 0x28
 8003252:	4861      	ldr	r0, [pc, #388]	; (80033d8 <lcd_put_in_while+0x648>)
 8003254:	f00a f8fa 	bl	800d44c <hagl_put_text>
		  lcd_copy();
 8003258:	f7ff f8ce 	bl	80023f8 <lcd_copy>
		  czy_wyswietlono=1;
 800325c:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <lcd_put_in_while+0x63c>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
			 }



		 }
		 if(licznik_kanalu==1)
 8003262:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <lcd_put_in_while+0x640>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d158      	bne.n	800331c <lcd_put_in_while+0x58c>
			 {

			 if(HAL_GetTick()-start_Time7>=1000)
 800326a:	f001 fcd3 	bl	8004c14 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <lcd_put_in_while+0x64c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800327a:	d34f      	bcc.n	800331c <lcd_put_in_while+0x58c>
			 			  					  		{  hagl_put_text((L"                 "), 40, 55, YELLOW, font6x9);
 800327c:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <lcd_put_in_while+0x624>)
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003284:	2237      	movs	r2, #55	; 0x37
 8003286:	2128      	movs	r1, #40	; 0x28
 8003288:	4855      	ldr	r0, [pc, #340]	; (80033e0 <lcd_put_in_while+0x650>)
 800328a:	f00a f8df 	bl	800d44c <hagl_put_text>
						 hagl_put_text((L"                 "), 40, 45, YELLOW, font6x9);
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <lcd_put_in_while+0x624>)
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003296:	222d      	movs	r2, #45	; 0x2d
 8003298:	2128      	movs	r1, #40	; 0x28
 800329a:	4851      	ldr	r0, [pc, #324]	; (80033e0 <lcd_put_in_while+0x650>)
 800329c:	f00a f8d6 	bl	800d44c <hagl_put_text>
			  lcd_copy();
 80032a0:	f7ff f8aa 	bl	80023f8 <lcd_copy>


			  wchar_t *result [20];
							      swprintf(result, 20, L"%04d-%02d-%02d", 2000 + date.Year, date.Month, date.Date);
 80032a4:	4b4f      	ldr	r3, [pc, #316]	; (80033e4 <lcd_put_in_while+0x654>)
 80032a6:	78db      	ldrb	r3, [r3, #3]
 80032a8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80032ac:	4a4d      	ldr	r2, [pc, #308]	; (80033e4 <lcd_put_in_while+0x654>)
 80032ae:	7852      	ldrb	r2, [r2, #1]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4a4c      	ldr	r2, [pc, #304]	; (80033e4 <lcd_put_in_while+0x654>)
 80032b4:	7892      	ldrb	r2, [r2, #2]
 80032b6:	4638      	mov	r0, r7
 80032b8:	9201      	str	r2, [sp, #4]
 80032ba:	9100      	str	r1, [sp, #0]
 80032bc:	4a4a      	ldr	r2, [pc, #296]	; (80033e8 <lcd_put_in_while+0x658>)
 80032be:	2114      	movs	r1, #20
 80032c0:	f00c fb14 	bl	800f8ec <swprintf>
			  		   hagl_put_text((result), 40, 55, YELLOW, font6x9);
 80032c4:	4638      	mov	r0, r7
 80032c6:	4b3b      	ldr	r3, [pc, #236]	; (80033b4 <lcd_put_in_while+0x624>)
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80032ce:	2237      	movs	r2, #55	; 0x37
 80032d0:	2128      	movs	r1, #40	; 0x28
 80032d2:	f00a f8bb 	bl	800d44c <hagl_put_text>

			  		 swprintf(result, 20, L"%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80032d6:	4b45      	ldr	r3, [pc, #276]	; (80033ec <lcd_put_in_while+0x65c>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <lcd_put_in_while+0x65c>)
 80032de:	785b      	ldrb	r3, [r3, #1]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b42      	ldr	r3, [pc, #264]	; (80033ec <lcd_put_in_while+0x65c>)
 80032e4:	789b      	ldrb	r3, [r3, #2]
 80032e6:	4638      	mov	r0, r7
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	9200      	str	r2, [sp, #0]
 80032ec:	460b      	mov	r3, r1
 80032ee:	4a40      	ldr	r2, [pc, #256]	; (80033f0 <lcd_put_in_while+0x660>)
 80032f0:	2114      	movs	r1, #20
 80032f2:	f00c fafb 	bl	800f8ec <swprintf>
			  					  		   hagl_put_text((result), 40, 45, YELLOW, font6x9);
 80032f6:	4638      	mov	r0, r7
 80032f8:	4b2e      	ldr	r3, [pc, #184]	; (80033b4 <lcd_put_in_while+0x624>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003300:	222d      	movs	r2, #45	; 0x2d
 8003302:	2128      	movs	r1, #40	; 0x28
 8003304:	f00a f8a2 	bl	800d44c <hagl_put_text>





			  		  lcd_copy();
 8003308:	f7ff f876 	bl	80023f8 <lcd_copy>
			  		 czy_wyswietlono=1;
 800330c:	4b2f      	ldr	r3, [pc, #188]	; (80033cc <lcd_put_in_while+0x63c>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
			 			  start_Time7=HAL_GetTick();					  		}
 8003312:	f001 fc7f 	bl	8004c14 <HAL_GetTick>
 8003316:	4603      	mov	r3, r0
 8003318:	4a30      	ldr	r2, [pc, #192]	; (80033dc <lcd_put_in_while+0x64c>)
 800331a:	6013      	str	r3, [r2, #0]

			 }
		 if(licznik_kanalu==2)
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <lcd_put_in_while+0x640>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	f040 80a0 	bne.w	8003466 <lcd_put_in_while+0x6d6>
				 {

			 if(czy_wyswietlono==0 )
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <lcd_put_in_while+0x63c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 809b 	bne.w	8003466 <lcd_put_in_while+0x6d6>
						 {
				    hagl_put_text((L"                  "), 40, 55, YELLOW, font6x9);
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <lcd_put_in_while+0x624>)
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003338:	2237      	movs	r2, #55	; 0x37
 800333a:	2128      	movs	r1, #40	; 0x28
 800333c:	482d      	ldr	r0, [pc, #180]	; (80033f4 <lcd_put_in_while+0x664>)
 800333e:	f00a f885 	bl	800d44c <hagl_put_text>
					 hagl_put_text((L"                 "), 40, 45, YELLOW, font6x9);
 8003342:	4b1c      	ldr	r3, [pc, #112]	; (80033b4 <lcd_put_in_while+0x624>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800334a:	222d      	movs	r2, #45	; 0x2d
 800334c:	2128      	movs	r1, #40	; 0x28
 800334e:	4824      	ldr	r0, [pc, #144]	; (80033e0 <lcd_put_in_while+0x650>)
 8003350:	f00a f87c 	bl	800d44c <hagl_put_text>
				  lcd_copy();
 8003354:	f7ff f850 	bl	80023f8 <lcd_copy>

				  float temp = ds18b20_get_temp(NULL);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe fce9 	bl	8001d30 <ds18b20_get_temp>
 800335e:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c
				  int whole = temp;
 8003362:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336a:	ee17 3a90 	vmov	r3, s15
 800336e:	65bb      	str	r3, [r7, #88]	; 0x58
				  int remainder = (temp - whole) * 10;
 8003370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800337a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003382:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800338a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800338e:	ee17 3a90 	vmov	r3, s15
 8003392:	657b      	str	r3, [r7, #84]	; 0x54
				  wchar_t *result [20];
				      swprintf(result, 20, L"temp : %d.%d °C", whole,remainder);
 8003394:	4638      	mov	r0, r7
 8003396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <lcd_put_in_while+0x668>)
 800339e:	2114      	movs	r1, #20
 80033a0:	f00c faa4 	bl	800f8ec <swprintf>

				  		   hagl_put_text((result), 40, 55, YELLOW, font6x9);
 80033a4:	4638      	mov	r0, r7
 80033a6:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <lcd_put_in_while+0x624>)
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80033ae:	2237      	movs	r2, #55	; 0x37
 80033b0:	2128      	movs	r1, #40	; 0x28
 80033b2:	e023      	b.n	80033fc <lcd_put_in_while+0x66c>
 80033b4:	080138b4 	.word	0x080138b4
 80033b8:	2000a558 	.word	0x2000a558
 80033bc:	2000a559 	.word	0x2000a559
 80033c0:	2000a55a 	.word	0x2000a55a
 80033c4:	2000a55b 	.word	0x2000a55b
 80033c8:	08013364 	.word	0x08013364
 80033cc:	2000a4fc 	.word	0x2000a4fc
 80033d0:	2000a4f8 	.word	0x2000a4f8
 80033d4:	08013154 	.word	0x08013154
 80033d8:	080133c4 	.word	0x080133c4
 80033dc:	2000a540 	.word	0x2000a540
 80033e0:	080133dc 	.word	0x080133dc
 80033e4:	2000a520 	.word	0x2000a520
 80033e8:	08013424 	.word	0x08013424
 80033ec:	2000a50c 	.word	0x2000a50c
 80033f0:	08013460 	.word	0x08013460
 80033f4:	0801349c 	.word	0x0801349c
 80033f8:	080134e8 	.word	0x080134e8
 80033fc:	f00a f826 	bl	800d44c <hagl_put_text>



				  		   float cisnienie=lps25hb_read_pressure();
 8003400:	f7ff f8a0 	bl	8002544 <lps25hb_read_pressure>
 8003404:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
				  		   whole = cisnienie;
 8003408:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800340c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003410:	ee17 3a90 	vmov	r3, s15
 8003414:	65bb      	str	r3, [r7, #88]	; 0x58
				  		 remainder = (cisnienie - whole) * 10;
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003420:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003428:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800342c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003434:	ee17 3a90 	vmov	r3, s15
 8003438:	657b      	str	r3, [r7, #84]	; 0x54
				  		 swprintf(result, 20, L"cisn : %d.%d °C", whole,remainder);
 800343a:	4638      	mov	r0, r7
 800343c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <lcd_put_in_while+0x6e0>)
 8003444:	2114      	movs	r1, #20
 8003446:	f00c fa51 	bl	800f8ec <swprintf>
				  		 hagl_put_text((result), 40, 45, YELLOW, font6x9);
 800344a:	4638      	mov	r0, r7
 800344c:	4b09      	ldr	r3, [pc, #36]	; (8003474 <lcd_put_in_while+0x6e4>)
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8003454:	222d      	movs	r2, #45	; 0x2d
 8003456:	2128      	movs	r1, #40	; 0x28
 8003458:	f009 fff8 	bl	800d44c <hagl_put_text>



				  		  lcd_copy();
 800345c:	f7fe ffcc 	bl	80023f8 <lcd_copy>




				  		 czy_wyswietlono=1;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <lcd_put_in_while+0x6e8>)
 8003462:	2201      	movs	r2, #1
 8003464:	601a      	str	r2, [r3, #0]

				 }

		  //lcd koniec

}
 8003466:	bf00      	nop
 8003468:	3764      	adds	r7, #100	; 0x64
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	08013528 	.word	0x08013528
 8003474:	080138b4 	.word	0x080138b4
 8003478:	2000a4fc 	.word	0x2000a4fc

0800347c <write_to_memory>:
  * @brief
  * Zapis danych pogodowych do pamięci EEPROM
  * @retval None
  */
void write_to_memory()
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af04      	add	r7, sp, #16


			   // calculate_average_temperature(temperature);


			    if(HAL_GetTick()-start_Time6>=500000)
 8003482:	f001 fbc7 	bl	8004c14 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <write_to_memory+0x154>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	4a51      	ldr	r2, [pc, #324]	; (80035d4 <write_to_memory+0x158>)
 8003490:	4293      	cmp	r3, r2
 8003492:	f240 8098 	bls.w	80035c6 <write_to_memory+0x14a>
			    	{ licznik_write_to_memory++;
 8003496:	4b50      	ldr	r3, [pc, #320]	; (80035d8 <write_to_memory+0x15c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	4a4e      	ldr	r2, [pc, #312]	; (80035d8 <write_to_memory+0x15c>)
 800349e:	6013      	str	r3, [r2, #0]

			    	float temp = ds18b20_get_temp(NULL);
 80034a0:	2000      	movs	r0, #0
 80034a2:	f7fe fc45 	bl	8001d30 <ds18b20_get_temp>
 80034a6:	ed87 0a03 	vstr	s0, [r7, #12]
			    	temperature_calculated=temperature_calculated+temp;
 80034aa:	4b4c      	ldr	r3, [pc, #304]	; (80035dc <write_to_memory+0x160>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80034ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80034c6:	793b      	ldrb	r3, [r7, #4]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b44      	ldr	r3, [pc, #272]	; (80035dc <write_to_memory+0x160>)
 80034cc:	701a      	strb	r2, [r3, #0]
	  int8_t temperature=(temperature_calculated)/licznik_write_to_memory;
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <write_to_memory+0x160>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b40      	ldr	r3, [pc, #256]	; (80035d8 <write_to_memory+0x15c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	72fb      	strb	r3, [r7, #11]
			    	//printf("dziala co 20sek: nowy dzien: %d \n",nowy_dzien);


			    	//uint8_t dzien = 0;

if(last_day==date.Date)
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <write_to_memory+0x164>)
 80034e2:	789a      	ldrb	r2, [r3, #2]
 80034e4:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <write_to_memory+0x168>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d154      	bne.n	8003596 <write_to_memory+0x11a>
{	  						  HAL_I2C_Mem_Write(&hi2c3, 0xA0, (nowy_dzien*4)+0, 1, &temperature, sizeof(temperature), 1000);
 80034ec:	4b3e      	ldr	r3, [pc, #248]	; (80035e8 <write_to_memory+0x16c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fa:	9302      	str	r3, [sp, #8]
 80034fc:	2301      	movs	r3, #1
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	f107 030b 	add.w	r3, r7, #11
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2301      	movs	r3, #1
 8003508:	21a0      	movs	r1, #160	; 0xa0
 800350a:	4838      	ldr	r0, [pc, #224]	; (80035ec <write_to_memory+0x170>)
 800350c:	f003 fd60 	bl	8006fd0 <HAL_I2C_Mem_Write>
			    			  HAL_Delay(10);
 8003510:	200a      	movs	r0, #10
 8003512:	f001 fb8b 	bl	8004c2c <HAL_Delay>
			  		    	  HAL_I2C_Mem_Write(&hi2c3, 0xA0, (nowy_dzien*4)+3, 1, &date.Date, sizeof(date.Date), 1000);
 8003516:	4b34      	ldr	r3, [pc, #208]	; (80035e8 <write_to_memory+0x16c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	b29b      	uxth	r3, r3
 8003520:	3303      	adds	r3, #3
 8003522:	b29a      	uxth	r2, r3
 8003524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003528:	9302      	str	r3, [sp, #8]
 800352a:	2301      	movs	r3, #1
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	4b30      	ldr	r3, [pc, #192]	; (80035f0 <write_to_memory+0x174>)
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	2301      	movs	r3, #1
 8003534:	21a0      	movs	r1, #160	; 0xa0
 8003536:	482d      	ldr	r0, [pc, #180]	; (80035ec <write_to_memory+0x170>)
 8003538:	f003 fd4a 	bl	8006fd0 <HAL_I2C_Mem_Write>
			    			  HAL_Delay(10);
 800353c:	200a      	movs	r0, #10
 800353e:	f001 fb75 	bl	8004c2c <HAL_Delay>
			  		    	  HAL_I2C_Mem_Write(&hi2c3, 0xA0, (nowy_dzien*4)+2, 1, &date.Month, sizeof(date.Month), 1000);
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <write_to_memory+0x16c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	b29b      	uxth	r3, r3
 800354c:	3302      	adds	r3, #2
 800354e:	b29a      	uxth	r2, r3
 8003550:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003554:	9302      	str	r3, [sp, #8]
 8003556:	2301      	movs	r3, #1
 8003558:	9301      	str	r3, [sp, #4]
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <write_to_memory+0x178>)
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	2301      	movs	r3, #1
 8003560:	21a0      	movs	r1, #160	; 0xa0
 8003562:	4822      	ldr	r0, [pc, #136]	; (80035ec <write_to_memory+0x170>)
 8003564:	f003 fd34 	bl	8006fd0 <HAL_I2C_Mem_Write>
			    			  HAL_Delay(10);
 8003568:	200a      	movs	r0, #10
 800356a:	f001 fb5f 	bl	8004c2c <HAL_Delay>
			  		    	  HAL_I2C_Mem_Write(&hi2c3, 0xA0, (nowy_dzien*4)+1, 1,&date.Year, sizeof(date.Year), 1000);
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <write_to_memory+0x16c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	b29b      	uxth	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003580:	9302      	str	r3, [sp, #8]
 8003582:	2301      	movs	r3, #1
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <write_to_memory+0x17c>)
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2301      	movs	r3, #1
 800358c:	21a0      	movs	r1, #160	; 0xa0
 800358e:	4817      	ldr	r0, [pc, #92]	; (80035ec <write_to_memory+0x170>)
 8003590:	f003 fd1e 	bl	8006fd0 <HAL_I2C_Mem_Write>
 8003594:	e012      	b.n	80035bc <write_to_memory+0x140>

}
else{nowy_dzien++;
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <write_to_memory+0x16c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <write_to_memory+0x16c>)
 800359e:	6013      	str	r3, [r2, #0]
last_day=date.Date;
 80035a0:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <write_to_memory+0x164>)
 80035a2:	789a      	ldrb	r2, [r3, #2]
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <write_to_memory+0x168>)
 80035a6:	701a      	strb	r2, [r3, #0]
licznik_write_to_memory=0;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <write_to_memory+0x15c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

if(nowy_dzien>6)
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <write_to_memory+0x16c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	dd02      	ble.n	80035bc <write_to_memory+0x140>
{
	nowy_dzien=0;}
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <write_to_memory+0x16c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
			 	  //HAL_Delay(5);

			  	 // HAL_I2C_Mem_Read(&hi2c3, 0xA0, 0x00, 1, &result, sizeof(result), 1000);


			    		start_Time6=HAL_GetTick();
 80035bc:	f001 fb2a 	bl	8004c14 <HAL_GetTick>
 80035c0:	4603      	mov	r3, r0
 80035c2:	4a03      	ldr	r2, [pc, #12]	; (80035d0 <write_to_memory+0x154>)
 80035c4:	6013      	str	r3, [r2, #0]

			    }


}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	2000a53c 	.word	0x2000a53c
 80035d4:	0007a11f 	.word	0x0007a11f
 80035d8:	20000018 	.word	0x20000018
 80035dc:	2000a550 	.word	0x2000a550
 80035e0:	2000a520 	.word	0x2000a520
 80035e4:	2000a504 	.word	0x2000a504
 80035e8:	2000a500 	.word	0x2000a500
 80035ec:	20000494 	.word	0x20000494
 80035f0:	2000a522 	.word	0x2000a522
 80035f4:	2000a521 	.word	0x2000a521
 80035f8:	2000a523 	.word	0x2000a523

080035fc <read_to_memory>:
  * Odczyt danych z pamięci EEPROM
  * @retval None
  */

void read_to_memory(int value)
			    {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af04      	add	r7, sp, #16
 8003602:	6078      	str	r0, [r7, #4]
			    	 HAL_I2C_Mem_Read(&hi2c3, 0xA0, (value*4)+0, 1, &result_memory, sizeof(result_memory), 1000);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	b29b      	uxth	r3, r3
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	b29a      	uxth	r2, r3
 800360c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003610:	9302      	str	r3, [sp, #8]
 8003612:	2301      	movs	r3, #1
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	4b20      	ldr	r3, [pc, #128]	; (8003698 <read_to_memory+0x9c>)
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	2301      	movs	r3, #1
 800361c:	21a0      	movs	r1, #160	; 0xa0
 800361e:	481f      	ldr	r0, [pc, #124]	; (800369c <read_to_memory+0xa0>)
 8003620:	f003 fdea 	bl	80071f8 <HAL_I2C_Mem_Read>
			    	 HAL_I2C_Mem_Read(&hi2c3, 0xA0, (value*4)+1, 1, &result_memory2, sizeof(result_memory2), 1000);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	b29b      	uxth	r3, r3
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	b29b      	uxth	r3, r3
 800362c:	3301      	adds	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	2301      	movs	r3, #1
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	4b19      	ldr	r3, [pc, #100]	; (80036a0 <read_to_memory+0xa4>)
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2301      	movs	r3, #1
 8003640:	21a0      	movs	r1, #160	; 0xa0
 8003642:	4816      	ldr	r0, [pc, #88]	; (800369c <read_to_memory+0xa0>)
 8003644:	f003 fdd8 	bl	80071f8 <HAL_I2C_Mem_Read>
			    	 HAL_I2C_Mem_Read(&hi2c3, 0xA0, (value*4)+2, 1, &result_memory3, sizeof(result_memory3), 1000);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	b29b      	uxth	r3, r3
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	b29b      	uxth	r3, r3
 8003650:	3302      	adds	r3, #2
 8003652:	b29a      	uxth	r2, r3
 8003654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003658:	9302      	str	r3, [sp, #8]
 800365a:	2301      	movs	r3, #1
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <read_to_memory+0xa8>)
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	2301      	movs	r3, #1
 8003664:	21a0      	movs	r1, #160	; 0xa0
 8003666:	480d      	ldr	r0, [pc, #52]	; (800369c <read_to_memory+0xa0>)
 8003668:	f003 fdc6 	bl	80071f8 <HAL_I2C_Mem_Read>
			    	 HAL_I2C_Mem_Read(&hi2c3, 0xA0, (value*4)+3, 1, &result_memory4, sizeof(result_memory4), 1000);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	b29b      	uxth	r3, r3
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	b29b      	uxth	r3, r3
 8003674:	3303      	adds	r3, #3
 8003676:	b29a      	uxth	r2, r3
 8003678:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800367c:	9302      	str	r3, [sp, #8]
 800367e:	2301      	movs	r3, #1
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <read_to_memory+0xac>)
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	2301      	movs	r3, #1
 8003688:	21a0      	movs	r1, #160	; 0xa0
 800368a:	4804      	ldr	r0, [pc, #16]	; (800369c <read_to_memory+0xa0>)
 800368c:	f003 fdb4 	bl	80071f8 <HAL_I2C_Mem_Read>
			    }
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000a558 	.word	0x2000a558
 800369c:	20000494 	.word	0x20000494
 80036a0:	2000a559 	.word	0x2000a559
 80036a4:	2000a55a 	.word	0x2000a55a
 80036a8:	2000a55b 	.word	0x2000a55b

080036ac <ESP_loop>:
  * Wyswietlenie na ekranie TFT komunikatu o pobieraniu danych oraz o końcu pobierania
  *
  * @retval None
  */
void ESP_loop()
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af02      	add	r7, sp, #8

//
		if(pobierz_dane==1)
 80036b2:	4b2c      	ldr	r3, [pc, #176]	; (8003764 <ESP_loop+0xb8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d128      	bne.n	800370c <ESP_loop+0x60>
		{
			hagl_put_text(L"Pobieranie danych int", 40, 45, YELLOW, font6x9);
 80036ba:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <ESP_loop+0xbc>)
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80036c2:	222d      	movs	r2, #45	; 0x2d
 80036c4:	2128      	movs	r1, #40	; 0x28
 80036c6:	4829      	ldr	r0, [pc, #164]	; (800376c <ESP_loop+0xc0>)
 80036c8:	f009 fec0 	bl	800d44c <hagl_put_text>
							  		  lcd_copy();
 80036cc:	f7fe fe94 	bl	80023f8 <lcd_copy>
				  ESP_Init("Desktopx","CpWi6712");
 80036d0:	4927      	ldr	r1, [pc, #156]	; (8003770 <ESP_loop+0xc4>)
 80036d2:	4828      	ldr	r0, [pc, #160]	; (8003774 <ESP_loop+0xc8>)
 80036d4:	f7fd fcbe 	bl	8001054 <ESP_Init>
				  ESP_GetData("T6OMO6R5MO94K4DT",Warszawa_pogoda.temp);
 80036d8:	4927      	ldr	r1, [pc, #156]	; (8003778 <ESP_loop+0xcc>)
 80036da:	4828      	ldr	r0, [pc, #160]	; (800377c <ESP_loop+0xd0>)
 80036dc:	f7fd fd10 	bl	8001100 <ESP_GetData>
				  ESP_GetData("HK4BKPA2DEPEXD4C",Warszawa_pogoda.wiatr);
 80036e0:	4927      	ldr	r1, [pc, #156]	; (8003780 <ESP_loop+0xd4>)
 80036e2:	4828      	ldr	r0, [pc, #160]	; (8003784 <ESP_loop+0xd8>)
 80036e4:	f7fd fd0c 	bl	8001100 <ESP_GetData>
				  ESP_GetData("R26MG7BIUZLTGPY2",Warszawa_pogoda.cisn);
 80036e8:	4927      	ldr	r1, [pc, #156]	; (8003788 <ESP_loop+0xdc>)
 80036ea:	4828      	ldr	r0, [pc, #160]	; (800378c <ESP_loop+0xe0>)
 80036ec:	f7fd fd08 	bl	8001100 <ESP_GetData>
			//	  	ESP_GetData("G402BI4JAFWMNBLB",Gdansk_pogoda.cisn);
			//
			//	  	ESP_GetData("RQ61SUIA4I4O4GPQ",Krakow_pogoda.temp);
			//	  	  ESP_GetData("4XJCIGMRQZRS54WP",Krakow_pogoda.wiatr);
			//	  	ESP_GetData("IC5XORHNXMH36JDA",Krakow_pogoda.cisn);
				  hagl_put_text(L"Koniec pobierania danych", 40, 45, YELLOW, font6x9);
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <ESP_loop+0xbc>)
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 80036f8:	222d      	movs	r2, #45	; 0x2d
 80036fa:	2128      	movs	r1, #40	; 0x28
 80036fc:	4824      	ldr	r0, [pc, #144]	; (8003790 <ESP_loop+0xe4>)
 80036fe:	f009 fea5 	bl	800d44c <hagl_put_text>
				  							  		  lcd_copy();
 8003702:	f7fe fe79 	bl	80023f8 <lcd_copy>
			pobierz_dane=0;
 8003706:	4b17      	ldr	r3, [pc, #92]	; (8003764 <ESP_loop+0xb8>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
		}
		if(pobierz_dane==2)
 800370c:	4b15      	ldr	r3, [pc, #84]	; (8003764 <ESP_loop+0xb8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d124      	bne.n	800375e <ESP_loop+0xb2>
				{
					hagl_put_text(L"Pobieranie danych int", 40, 45, YELLOW, font6x9);
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <ESP_loop+0xbc>)
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800371c:	222d      	movs	r2, #45	; 0x2d
 800371e:	2128      	movs	r1, #40	; 0x28
 8003720:	4812      	ldr	r0, [pc, #72]	; (800376c <ESP_loop+0xc0>)
 8003722:	f009 fe93 	bl	800d44c <hagl_put_text>
									  		  lcd_copy();
 8003726:	f7fe fe67 	bl	80023f8 <lcd_copy>

						  		ESP_GetData("7TUK80COZTUK4FVW",Gdansk_pogoda.temp);
 800372a:	491a      	ldr	r1, [pc, #104]	; (8003794 <ESP_loop+0xe8>)
 800372c:	481a      	ldr	r0, [pc, #104]	; (8003798 <ESP_loop+0xec>)
 800372e:	f7fd fce7 	bl	8001100 <ESP_GetData>
						  		  ESP_GetData("JT5942AMN2X01J9L",Gdansk_pogoda.wiatr);
 8003732:	491a      	ldr	r1, [pc, #104]	; (800379c <ESP_loop+0xf0>)
 8003734:	481a      	ldr	r0, [pc, #104]	; (80037a0 <ESP_loop+0xf4>)
 8003736:	f7fd fce3 	bl	8001100 <ESP_GetData>
						  	ESP_GetData("G402BI4JAFWMNBLB",Gdansk_pogoda.cisn);
 800373a:	491a      	ldr	r1, [pc, #104]	; (80037a4 <ESP_loop+0xf8>)
 800373c:	481a      	ldr	r0, [pc, #104]	; (80037a8 <ESP_loop+0xfc>)
 800373e:	f7fd fcdf 	bl	8001100 <ESP_GetData>
					//
					//	  	ESP_GetData("RQ61SUIA4I4O4GPQ",Krakow_pogoda.temp);
					//	  	  ESP_GetData("4XJCIGMRQZRS54WP",Krakow_pogoda.wiatr);
					//	  	ESP_GetData("IC5XORHNXMH36JDA",Krakow_pogoda.cisn);
						  hagl_put_text(L"Koniec pobierania danych", 40, 45, YELLOW, font6x9);
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <ESP_loop+0xbc>)
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800374a:	222d      	movs	r2, #45	; 0x2d
 800374c:	2128      	movs	r1, #40	; 0x28
 800374e:	4810      	ldr	r0, [pc, #64]	; (8003790 <ESP_loop+0xe4>)
 8003750:	f009 fe7c 	bl	800d44c <hagl_put_text>
						  							  		  lcd_copy();
 8003754:	f7fe fe50 	bl	80023f8 <lcd_copy>
					pobierz_dane=0;
 8003758:	4b02      	ldr	r3, [pc, #8]	; (8003764 <ESP_loop+0xb8>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]





	}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	2000a4f0 	.word	0x2000a4f0
 8003768:	080138b4 	.word	0x080138b4
 800376c:	08013568 	.word	0x08013568
 8003770:	080135c0 	.word	0x080135c0
 8003774:	080135cc 	.word	0x080135cc
 8003778:	2000a55c 	.word	0x2000a55c
 800377c:	080135d8 	.word	0x080135d8
 8003780:	2000a570 	.word	0x2000a570
 8003784:	080135ec 	.word	0x080135ec
 8003788:	2000a566 	.word	0x2000a566
 800378c:	08013600 	.word	0x08013600
 8003790:	08013614 	.word	0x08013614
 8003794:	2000a57c 	.word	0x2000a57c
 8003798:	08013678 	.word	0x08013678
 800379c:	2000a590 	.word	0x2000a590
 80037a0:	0801368c 	.word	0x0801368c
 80037a4:	2000a586 	.word	0x2000a586
 80037a8:	080136a0 	.word	0x080136a0

080037ac <ADC_measure>:
  * Sparwdzenia warunkow, na ktory fotorezystor swiatlo swieci jak mocno
  * Obrot panelu fotowoltaicznego w dwoch osiach zgodnie z wczesniejszymi pomiarami
  * @retval None
  */
void ADC_measure()
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0




	    	 	    	   if(HAL_GetTick()-start_Time12>=200)
 80037b2:	f001 fa2f 	bl	8004c14 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	4b6c      	ldr	r3, [pc, #432]	; (800396c <ADC_measure+0x1c0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2bc7      	cmp	r3, #199	; 0xc7
 80037c0:	f240 80cf 	bls.w	8003962 <ADC_measure+0x1b6>
	    	 	    	   					    	{
	    	 	    		  if(ustaw_panel==1)
 80037c4:	4b6a      	ldr	r3, [pc, #424]	; (8003970 <ADC_measure+0x1c4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 80ca 	bne.w	8003962 <ADC_measure+0x1b6>
	    	 	    		  		  {
	    	 	    		  	  uint32_t value_adc[4];

	    	 	    		  	    HAL_ADC_Start(&hadc1);
 80037ce:	4869      	ldr	r0, [pc, #420]	; (8003974 <ADC_measure+0x1c8>)
 80037d0:	f001 fdc2 	bl	8005358 <HAL_ADC_Start>
	    	 	    		  	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295
 80037d8:	4866      	ldr	r0, [pc, #408]	; (8003974 <ADC_measure+0x1c8>)
 80037da:	f001 fe77 	bl	80054cc <HAL_ADC_PollForConversion>
	    	 	    		  	    value_adc[0] = HAL_ADC_GetValue(&hadc1);
 80037de:	4865      	ldr	r0, [pc, #404]	; (8003974 <ADC_measure+0x1c8>)
 80037e0:	f001 ff4c 	bl	800567c <HAL_ADC_GetValue>
 80037e4:	4603      	mov	r3, r0
 80037e6:	603b      	str	r3, [r7, #0]

	    	 	    		  	    HAL_ADC_Start(&hadc1);
 80037e8:	4862      	ldr	r0, [pc, #392]	; (8003974 <ADC_measure+0x1c8>)
 80037ea:	f001 fdb5 	bl	8005358 <HAL_ADC_Start>
	    	 	    		  	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80037ee:	f04f 31ff 	mov.w	r1, #4294967295
 80037f2:	4860      	ldr	r0, [pc, #384]	; (8003974 <ADC_measure+0x1c8>)
 80037f4:	f001 fe6a 	bl	80054cc <HAL_ADC_PollForConversion>
	    	 	    		  	    value_adc[1] = HAL_ADC_GetValue(&hadc1);
 80037f8:	485e      	ldr	r0, [pc, #376]	; (8003974 <ADC_measure+0x1c8>)
 80037fa:	f001 ff3f 	bl	800567c <HAL_ADC_GetValue>
 80037fe:	4603      	mov	r3, r0
 8003800:	607b      	str	r3, [r7, #4]

	    	 	    		  	    HAL_ADC_Start(&hadc1);
 8003802:	485c      	ldr	r0, [pc, #368]	; (8003974 <ADC_measure+0x1c8>)
 8003804:	f001 fda8 	bl	8005358 <HAL_ADC_Start>
	    	 	    		  	    	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003808:	f04f 31ff 	mov.w	r1, #4294967295
 800380c:	4859      	ldr	r0, [pc, #356]	; (8003974 <ADC_measure+0x1c8>)
 800380e:	f001 fe5d 	bl	80054cc <HAL_ADC_PollForConversion>
	    	 	    		  	    	    value_adc[2] = HAL_ADC_GetValue(&hadc1);
 8003812:	4858      	ldr	r0, [pc, #352]	; (8003974 <ADC_measure+0x1c8>)
 8003814:	f001 ff32 	bl	800567c <HAL_ADC_GetValue>
 8003818:	4603      	mov	r3, r0
 800381a:	60bb      	str	r3, [r7, #8]

	    	 	    		  	    	    HAL_ADC_Start(&hadc1);
 800381c:	4855      	ldr	r0, [pc, #340]	; (8003974 <ADC_measure+0x1c8>)
 800381e:	f001 fd9b 	bl	8005358 <HAL_ADC_Start>
	    	 	    		  	    	 	    	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003822:	f04f 31ff 	mov.w	r1, #4294967295
 8003826:	4853      	ldr	r0, [pc, #332]	; (8003974 <ADC_measure+0x1c8>)
 8003828:	f001 fe50 	bl	80054cc <HAL_ADC_PollForConversion>
	    	 	    		  	    	 	    	   value_adc[3] = HAL_ADC_GetValue(&hadc1);
 800382c:	4851      	ldr	r0, [pc, #324]	; (8003974 <ADC_measure+0x1c8>)
 800382e:	f001 ff25 	bl	800567c <HAL_ADC_GetValue>
 8003832:	4603      	mov	r3, r0
 8003834:	60fb      	str	r3, [r7, #12]

	    	 	    	   printf("prawo gora=%lu, lewo gora=%lu\n", value_adc[2],value_adc[3]);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	4619      	mov	r1, r3
 800383c:	484e      	ldr	r0, [pc, #312]	; (8003978 <ADC_measure+0x1cc>)
 800383e:	f00b f84b 	bl	800e8d8 <iprintf>
	   printf("lewo dol=%lu, prawo dol=%lu", value_adc[1], value_adc[0]);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	484c      	ldr	r0, [pc, #304]	; (800397c <ADC_measure+0x1d0>)
 800384a:	f00b f845 	bl	800e8d8 <iprintf>





	    	 	    	  if ( value_adc[3] >  value_adc[2]) {//topleft> topright
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	d906      	bls.n	8003864 <ADC_measure+0xb8>
	    	 	    	  	    	htim1.Instance->CCR1=htim1.Instance->CCR1-10;//lewo
 8003856:	4b4a      	ldr	r3, [pc, #296]	; (8003980 <ADC_measure+0x1d4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800385c:	4b48      	ldr	r3, [pc, #288]	; (8003980 <ADC_measure+0x1d4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3a0a      	subs	r2, #10
 8003862:	635a      	str	r2, [r3, #52]	; 0x34
	    	 	    	  	     // delay(waittime);
	    	 	    	  	    }
	    	 	    	  	    if ( value_adc[1] >  value_adc[0]) {//downleft > downright
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d906      	bls.n	800387a <ADC_measure+0xce>
	    	 	    	  	    	htim1.Instance->CCR1=htim1.Instance->CCR1-10;
 800386c:	4b44      	ldr	r3, [pc, #272]	; (8003980 <ADC_measure+0x1d4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003872:	4b43      	ldr	r3, [pc, #268]	; (8003980 <ADC_measure+0x1d4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3a0a      	subs	r2, #10
 8003878:	635a      	str	r2, [r3, #52]	; 0x34
	    	 	    	  	     // delay(waittime);
	    	 	    	  	    }
	    	 	    	  	    if ( value_adc[3] <  value_adc[2]) {//topleft < topright
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d206      	bcs.n	8003890 <ADC_measure+0xe4>
	    	 	    	  	    	htim1.Instance->CCR1=htim1.Instance->CCR1+10;
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <ADC_measure+0x1d4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003888:	4b3d      	ldr	r3, [pc, #244]	; (8003980 <ADC_measure+0x1d4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	320a      	adds	r2, #10
 800388e:	635a      	str	r2, [r3, #52]	; 0x34
	    	 	    	  	    //  delay(waittime);
	    	 	    	  	    }
	    	 	    	  	    if ( value_adc[1] <  value_adc[0]) {//downleft < downright
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d206      	bcs.n	80038a6 <ADC_measure+0xfa>
	    	 	    	  	    	htim1.Instance->CCR1=htim1.Instance->CCR1+10;
 8003898:	4b39      	ldr	r3, [pc, #228]	; (8003980 <ADC_measure+0x1d4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800389e:	4b38      	ldr	r3, [pc, #224]	; (8003980 <ADC_measure+0x1d4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	320a      	adds	r2, #10
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34
	    	 	    	  	    //  delay(waittime);
	    	 	    	  	    }
	    	 	    	  	    if (htim1.Instance->CCR1> 1700) {
 80038a6:	4b36      	ldr	r3, [pc, #216]	; (8003980 <ADC_measure+0x1d4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ac:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d904      	bls.n	80038be <ADC_measure+0x112>
	    	 	    	  	    	htim1.Instance->CCR1= 1700;
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <ADC_measure+0x1d4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34
	    	 	    	  	    }
	    	 	    	  	    if (htim1.Instance->CCR1 < 900) {
 80038be:	4b30      	ldr	r3, [pc, #192]	; (8003980 <ADC_measure+0x1d4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80038c8:	d204      	bcs.n	80038d4 <ADC_measure+0x128>
	    	 	    	  	    	htim1.Instance->CCR1 = 900;
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <ADC_measure+0x1d4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 7261 	mov.w	r2, #900	; 0x384
 80038d2:	635a      	str	r2, [r3, #52]	; 0x34
	    	 	    	  	    }
	    	 	    	  //
	    	 	    	  //
	    	 	    	  	    if ( value_adc[3] >  value_adc[1]) {//topleft > downleft
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d906      	bls.n	80038ea <ADC_measure+0x13e>
	    	 	    	  	    	htim1.Instance->CCR2 = htim1.Instance->CCR2 + 10;
 80038dc:	4b28      	ldr	r3, [pc, #160]	; (8003980 <ADC_measure+0x1d4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <ADC_measure+0x1d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	320a      	adds	r2, #10
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
	    	 	    	  	       // delay(waittime);
	    	 	    	  	      }
	    	 	    	  	      if ( value_adc[2] >  value_adc[0]) {//topright > downright
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d906      	bls.n	8003900 <ADC_measure+0x154>
	    	 	    	  	    	  htim1.Instance->CCR2 = htim1.Instance->CCR2 + 10;
 80038f2:	4b23      	ldr	r3, [pc, #140]	; (8003980 <ADC_measure+0x1d4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <ADC_measure+0x1d4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	320a      	adds	r2, #10
 80038fe:	639a      	str	r2, [r3, #56]	; 0x38
	    	 	    	  	        //delay(waittime);
	    	 	    	  	      }
	    	 	    	  	      if ( value_adc[3] <  value_adc[1]) {//topleft < downleft
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d206      	bcs.n	8003916 <ADC_measure+0x16a>
	    	 	    	  	    	  htim1.Instance->CCR2 = htim1.Instance->CCR2 - 10;
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <ADC_measure+0x1d4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390e:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <ADC_measure+0x1d4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3a0a      	subs	r2, #10
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
	    	 	    	  	       // delay(waittime);
	    	 	    	  	      }
	    	 	    	  	      if ( value_adc[2] <  value_adc[0]) {//topright < downright
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d206      	bcs.n	800392c <ADC_measure+0x180>
	    	 	    	  	    	  htim1.Instance->CCR2 = htim1.Instance->CCR2 - 10;
 800391e:	4b18      	ldr	r3, [pc, #96]	; (8003980 <ADC_measure+0x1d4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <ADC_measure+0x1d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3a0a      	subs	r2, #10
 800392a:	639a      	str	r2, [r3, #56]	; 0x38
	    	 	    	  	       // delay(waittime);
	    	 	    	  	      }
	    	 	    	  	      if (htim1.Instance->CCR2 > 1400) {
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <ADC_measure+0x1d4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8003936:	d904      	bls.n	8003942 <ADC_measure+0x196>
	    	 	    	  	    	  htim1.Instance->CCR2 = 1400;
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <ADC_measure+0x1d4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
	    	 	    	  	      }
	    	 	    	  	      if (htim1.Instance->CCR2 < 1000) {
 8003942:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <ADC_measure+0x1d4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800394c:	d204      	bcs.n	8003958 <ADC_measure+0x1ac>
	    	 	    	  	    	  htim1.Instance->CCR2 = 1000;
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <ADC_measure+0x1d4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
	    	 	    	  	      }



	    	 	    	  	   start_Time12=HAL_GetTick();}
 8003958:	f001 f95c 	bl	8004c14 <HAL_GetTick>
 800395c:	4603      	mov	r3, r0
 800395e:	4a03      	ldr	r2, [pc, #12]	; (800396c <ADC_measure+0x1c0>)
 8003960:	6013      	str	r3, [r2, #0]
}
	    	 	    	  }
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000a54c 	.word	0x2000a54c
 8003970:	2000a4f4 	.word	0x2000a4f4
 8003974:	200003d8 	.word	0x200003d8
 8003978:	080136b4 	.word	0x080136b4
 800397c:	080136d4 	.word	0x080136d4
 8003980:	2000a628 	.word	0x2000a628

08003984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003988:	b672      	cpsid	i
}
 800398a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800398c:	e7fe      	b.n	800398c <Error_Handler+0x8>
	...

08003990 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <MX_RTC_Init+0x48>)
 8003996:	4a11      	ldr	r2, [pc, #68]	; (80039dc <MX_RTC_Init+0x4c>)
 8003998:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <MX_RTC_Init+0x48>)
 800399c:	2200      	movs	r2, #0
 800399e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <MX_RTC_Init+0x48>)
 80039a2:	227f      	movs	r2, #127	; 0x7f
 80039a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <MX_RTC_Init+0x48>)
 80039a8:	22ff      	movs	r2, #255	; 0xff
 80039aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <MX_RTC_Init+0x48>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80039b2:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <MX_RTC_Init+0x48>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80039b8:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <MX_RTC_Init+0x48>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <MX_RTC_Init+0x48>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80039c4:	4804      	ldr	r0, [pc, #16]	; (80039d8 <MX_RTC_Init+0x48>)
 80039c6:	f005 fbaf 	bl	8009128 <HAL_RTC_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80039d0:	f7ff ffd8 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	2000a59c 	.word	0x2000a59c
 80039dc:	40002800 	.word	0x40002800

080039e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b0a4      	sub	sp, #144	; 0x90
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	2288      	movs	r2, #136	; 0x88
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f00a f80f 	bl	800da14 <memset>
  if(rtcHandle->Instance==RTC)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <HAL_RTC_MspInit+0x5c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d118      	bne.n	8003a32 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 febc 	bl	8008790 <HAL_RCCEx_PeriphCLKConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003a1e:	f7ff ffb1 	bl	8003984 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <HAL_RTC_MspInit+0x60>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	4a05      	ldr	r2, [pc, #20]	; (8003a40 <HAL_RTC_MspInit+0x60>)
 8003a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a32:	bf00      	nop
 8003a34:	3790      	adds	r7, #144	; 0x90
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40002800 	.word	0x40002800
 8003a40:	40021000 	.word	0x40021000

08003a44 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <MX_SPI2_Init+0x78>)
 8003a4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003a62:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a7a:	2210      	movs	r2, #16
 8003a7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a92:	2207      	movs	r2, #7
 8003a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_SPI2_Init+0x74>)
 8003aa4:	f005 fe5a 	bl	800975c <HAL_SPI_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003aae:	f7ff ff69 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000a5c0 	.word	0x2000a5c0
 8003abc:	40003800 	.word	0x40003800

08003ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a25      	ldr	r2, [pc, #148]	; (8003b74 <HAL_SPI_MspInit+0xb4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d144      	bne.n	8003b6c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003ae2:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aec:	6593      	str	r3, [r2, #88]	; 0x58
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	4a18      	ldr	r2, [pc, #96]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003b18:	f043 0302 	orr.w	r3, r3, #2
 8003b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <HAL_SPI_MspInit+0xb8>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3e:	f107 0314 	add.w	r3, r7, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	480d      	ldr	r0, [pc, #52]	; (8003b7c <HAL_SPI_MspInit+0xbc>)
 8003b46:	f002 ffd9 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b5c:	2305      	movs	r3, #5
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4619      	mov	r1, r3
 8003b66:	4806      	ldr	r0, [pc, #24]	; (8003b80 <HAL_SPI_MspInit+0xc0>)
 8003b68:	f002 ffc8 	bl	8006afc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	; 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40003800 	.word	0x40003800
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	48000800 	.word	0x48000800
 8003b80:	48000400 	.word	0x48000400

08003b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_MspInit+0x44>)
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	4a0e      	ldr	r2, [pc, #56]	; (8003bc8 <HAL_MspInit+0x44>)
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	6613      	str	r3, [r2, #96]	; 0x60
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <HAL_MspInit+0x44>)
 8003b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_MspInit+0x44>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <HAL_MspInit+0x44>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6593      	str	r3, [r2, #88]	; 0x58
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_MspInit+0x44>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000

08003bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bd0:	e7fe      	b.n	8003bd0 <NMI_Handler+0x4>

08003bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd6:	e7fe      	b.n	8003bd6 <HardFault_Handler+0x4>

08003bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <MemManage_Handler+0x4>

08003bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003be2:	e7fe      	b.n	8003be2 <BusFault_Handler+0x4>

08003be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <UsageFault_Handler+0x4>

08003bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c0a:	bf00      	nop
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c18:	f000 ffe8 	bl	8004bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c1c:	bf00      	nop
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003c24:	4802      	ldr	r0, [pc, #8]	; (8003c30 <ADC1_2_IRQHandler+0x10>)
 8003c26:	f001 fd37 	bl	8005698 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	200003d8 	.word	0x200003d8

08003c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <TIM2_IRQHandler+0x10>)
 8003c3a:	f006 fcd9 	bl	800a5f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000a674 	.word	0x2000a674

08003c48 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	Uart_isr(&huart5);
 8003c4c:	4803      	ldr	r0, [pc, #12]	; (8003c5c <UART5_IRQHandler+0x14>)
 8003c4e:	f7fd fca3 	bl	8001598 <Uart_isr>
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003c52:	4802      	ldr	r0, [pc, #8]	; (8003c5c <UART5_IRQHandler+0x14>)
 8003c54:	f008 f9e0 	bl	800c018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c58:	bf00      	nop
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	2000a70c 	.word	0x2000a70c

08003c60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	return 1;
 8003c64:	2301      	movs	r3, #1
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_kill>:

int _kill(int pid, int sig)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c7a:	f009 fc73 	bl	800d564 <__errno>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2216      	movs	r2, #22
 8003c82:	601a      	str	r2, [r3, #0]
	return -1;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_exit>:

void _exit (int status)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ffe7 	bl	8003c70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ca2:	e7fe      	b.n	8003ca2 <_exit+0x12>

08003ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e00a      	b.n	8003ccc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cb6:	f3af 8000 	nop.w
 8003cba:	4601      	mov	r1, r0
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	60ba      	str	r2, [r7, #8]
 8003cc2:	b2ca      	uxtb	r2, r1
 8003cc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	dbf0      	blt.n	8003cb6 <_read+0x12>
	}

return len;
 8003cd4:	687b      	ldr	r3, [r7, #4]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e009      	b.n	8003d04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60ba      	str	r2, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fbdd 	bl	80044b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	dbf1      	blt.n	8003cf0 <_write+0x12>
	}
	return len;
 8003d0c:	687b      	ldr	r3, [r7, #4]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <_close>:

int _close(int file)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d3e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_isatty>:

int _isatty(int file)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return 1;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d88:	4a14      	ldr	r2, [pc, #80]	; (8003ddc <_sbrk+0x5c>)
 8003d8a:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <_sbrk+0x60>)
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d94:	4b13      	ldr	r3, [pc, #76]	; (8003de4 <_sbrk+0x64>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d102      	bne.n	8003da2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d9c:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <_sbrk+0x64>)
 8003d9e:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <_sbrk+0x68>)
 8003da0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <_sbrk+0x64>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d207      	bcs.n	8003dc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003db0:	f009 fbd8 	bl	800d564 <__errno>
 8003db4:	4603      	mov	r3, r0
 8003db6:	220c      	movs	r2, #12
 8003db8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	e009      	b.n	8003dd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <_sbrk+0x64>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dc6:	4b07      	ldr	r3, [pc, #28]	; (8003de4 <_sbrk+0x64>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	4a05      	ldr	r2, [pc, #20]	; (8003de4 <_sbrk+0x64>)
 8003dd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20018000 	.word	0x20018000
 8003de0:	00000400 	.word	0x00000400
 8003de4:	2000a624 	.word	0x2000a624
 8003de8:	2000a8b0 	.word	0x2000a8b0

08003dec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <SystemInit+0x20>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df6:	4a05      	ldr	r2, [pc, #20]	; (8003e0c <SystemInit+0x20>)
 8003df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b09a      	sub	sp, #104	; 0x68
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	605a      	str	r2, [r3, #4]
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	605a      	str	r2, [r3, #4]
 8003e2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
 8003e40:	615a      	str	r2, [r3, #20]
 8003e42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	222c      	movs	r2, #44	; 0x2c
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f009 fde2 	bl	800da14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e50:	4b49      	ldr	r3, [pc, #292]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e52:	4a4a      	ldr	r2, [pc, #296]	; (8003f7c <MX_TIM1_Init+0x16c>)
 8003e54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8003e56:	4b48      	ldr	r3, [pc, #288]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e58:	224f      	movs	r2, #79	; 0x4f
 8003e5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8003e62:	4b45      	ldr	r3, [pc, #276]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e64:	f644 6220 	movw	r2, #20000	; 0x4e20
 8003e68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e6a:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e70:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e76:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e7c:	483e      	ldr	r0, [pc, #248]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e7e:	f005 ffe3 	bl	8009e48 <HAL_TIM_Base_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e88:	f7ff fd7c 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e90:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e96:	4619      	mov	r1, r3
 8003e98:	4837      	ldr	r0, [pc, #220]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003e9a:	f006 fe79 	bl	800ab90 <HAL_TIM_ConfigClockSource>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003ea4:	f7ff fd6e 	bl	8003984 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ea8:	4833      	ldr	r0, [pc, #204]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003eaa:	f006 f88d 	bl	8009fc8 <HAL_TIM_PWM_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003eb4:	f7ff fd66 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ec4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ec8:	4619      	mov	r1, r3
 8003eca:	482b      	ldr	r0, [pc, #172]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003ecc:	f007 fdcc 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003ed6:	f7ff fd55 	bl	8003984 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eda:	2360      	movs	r3, #96	; 0x60
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eea:	2300      	movs	r3, #0
 8003eec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003efa:	2200      	movs	r2, #0
 8003efc:	4619      	mov	r1, r3
 8003efe:	481e      	ldr	r0, [pc, #120]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003f00:	f006 fd32 	bl	800a968 <HAL_TIM_PWM_ConfigChannel>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003f0a:	f7ff fd3b 	bl	8003984 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f12:	2204      	movs	r2, #4
 8003f14:	4619      	mov	r1, r3
 8003f16:	4818      	ldr	r0, [pc, #96]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003f18:	f006 fd26 	bl	800a968 <HAL_TIM_PWM_ConfigChannel>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003f22:	f7ff fd2f 	bl	8003984 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4807      	ldr	r0, [pc, #28]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003f5c:	f007 fe0c 	bl	800bb78 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8003f66:	f7ff fd0d 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f6a:	4803      	ldr	r0, [pc, #12]	; (8003f78 <MX_TIM1_Init+0x168>)
 8003f6c:	f000 f93a 	bl	80041e4 <HAL_TIM_MspPostInit>

}
 8003f70:	bf00      	nop
 8003f72:	3768      	adds	r7, #104	; 0x68
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	2000a628 	.word	0x2000a628
 8003f7c:	40012c00 	.word	0x40012c00

08003f80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b090      	sub	sp, #64	; 0x40
 8003f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	609a      	str	r2, [r3, #8]
 8003f92:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003f94:	f107 031c 	add.w	r3, r7, #28
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	605a      	str	r2, [r3, #4]
 8003f9e:	609a      	str	r2, [r3, #8]
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8003fc4:	4b33      	ldr	r3, [pc, #204]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fc6:	224f      	movs	r2, #79	; 0x4f
 8003fc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b32      	ldr	r3, [pc, #200]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd8:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fde:	4b2d      	ldr	r3, [pc, #180]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fe4:	482b      	ldr	r0, [pc, #172]	; (8004094 <MX_TIM2_Init+0x114>)
 8003fe6:	f005 ff2f 	bl	8009e48 <HAL_TIM_Base_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003ff0:	f7ff fcc8 	bl	8003984 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ffe:	4619      	mov	r1, r3
 8004000:	4824      	ldr	r0, [pc, #144]	; (8004094 <MX_TIM2_Init+0x114>)
 8004002:	f006 fdc5 	bl	800ab90 <HAL_TIM_ConfigClockSource>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800400c:	f7ff fcba 	bl	8003984 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004010:	4820      	ldr	r0, [pc, #128]	; (8004094 <MX_TIM2_Init+0x114>)
 8004012:	f006 f941 	bl	800a298 <HAL_TIM_IC_Init>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800401c:	f7ff fcb2 	bl	8003984 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004020:	2304      	movs	r3, #4
 8004022:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8004024:	2340      	movs	r3, #64	; 0x40
 8004026:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004028:	2300      	movs	r3, #0
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8004030:	f107 031c 	add.w	r3, r7, #28
 8004034:	4619      	mov	r1, r3
 8004036:	4817      	ldr	r0, [pc, #92]	; (8004094 <MX_TIM2_Init+0x114>)
 8004038:	f006 fe73 	bl	800ad22 <HAL_TIM_SlaveConfigSynchro>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8004042:	f7ff fc9f 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404a:	2300      	movs	r3, #0
 800404c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800404e:	f107 0310 	add.w	r3, r7, #16
 8004052:	4619      	mov	r1, r3
 8004054:	480f      	ldr	r0, [pc, #60]	; (8004094 <MX_TIM2_Init+0x114>)
 8004056:	f007 fd07 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8004060:	f7ff fc90 	bl	8003984 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8004064:	2302      	movs	r3, #2
 8004066:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004068:	2301      	movs	r3, #1
 800406a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800406c:	2300      	movs	r3, #0
 800406e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004074:	463b      	mov	r3, r7
 8004076:	2200      	movs	r2, #0
 8004078:	4619      	mov	r1, r3
 800407a:	4806      	ldr	r0, [pc, #24]	; (8004094 <MX_TIM2_Init+0x114>)
 800407c:	f006 fbd7 	bl	800a82e <HAL_TIM_IC_ConfigChannel>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8004086:	f7ff fc7d 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	3740      	adds	r7, #64	; 0x40
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	2000a674 	.word	0x2000a674

08004098 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <MX_TIM6_Init+0x64>)
 80040aa:	4a15      	ldr	r2, [pc, #84]	; (8004100 <MX_TIM6_Init+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 79;
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <MX_TIM6_Init+0x64>)
 80040b0:	224f      	movs	r2, #79	; 0x4f
 80040b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <MX_TIM6_Init+0x64>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <MX_TIM6_Init+0x64>)
 80040bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040c2:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <MX_TIM6_Init+0x64>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040c8:	480c      	ldr	r0, [pc, #48]	; (80040fc <MX_TIM6_Init+0x64>)
 80040ca:	f005 febd 	bl	8009e48 <HAL_TIM_Base_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80040d4:	f7ff fc56 	bl	8003984 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	4619      	mov	r1, r3
 80040e4:	4805      	ldr	r0, [pc, #20]	; (80040fc <MX_TIM6_Init+0x64>)
 80040e6:	f007 fcbf 	bl	800ba68 <HAL_TIMEx_MasterConfigSynchronization>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80040f0:	f7ff fc48 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	2000a6c0 	.word	0x2000a6c0
 8004100:	40001000 	.word	0x40001000

08004104 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b08c      	sub	sp, #48	; 0x30
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410c:	f107 031c 	add.w	r3, r7, #28
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2d      	ldr	r2, [pc, #180]	; (80041d8 <HAL_TIM_Base_MspInit+0xd4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d10c      	bne.n	8004140 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004126:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412a:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 800412c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004130:	6613      	str	r3, [r2, #96]	; 0x60
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800413e:	e047      	b.n	80041d0 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d131      	bne.n	80041ae <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800414a:	4b24      	ldr	r3, [pc, #144]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	4a23      	ldr	r2, [pc, #140]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004150:	f043 0301 	orr.w	r3, r3, #1
 8004154:	6593      	str	r3, [r2, #88]	; 0x58
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004162:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4a1d      	ldr	r2, [pc, #116]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800416e:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	2302      	movs	r3, #2
 8004180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004186:	2300      	movs	r3, #0
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800418a:	2301      	movs	r3, #1
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418e:	f107 031c 	add.w	r3, r7, #28
 8004192:	4619      	mov	r1, r3
 8004194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004198:	f002 fcb0 	bl	8006afc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800419c:	2200      	movs	r2, #0
 800419e:	2100      	movs	r1, #0
 80041a0:	201c      	movs	r0, #28
 80041a2:	f002 fbf6 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041a6:	201c      	movs	r0, #28
 80041a8:	f002 fc0f 	bl	80069ca <HAL_NVIC_EnableIRQ>
}
 80041ac:	e010      	b.n	80041d0 <HAL_TIM_Base_MspInit+0xcc>
  else if(tim_baseHandle->Instance==TIM6)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <HAL_TIM_Base_MspInit+0xdc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d10b      	bne.n	80041d0 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80041b8:	4b08      	ldr	r3, [pc, #32]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	4a07      	ldr	r2, [pc, #28]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 80041be:	f043 0310 	orr.w	r3, r3, #16
 80041c2:	6593      	str	r3, [r2, #88]	; 0x58
 80041c4:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_TIM_Base_MspInit+0xd8>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3730      	adds	r7, #48	; 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40012c00 	.word	0x40012c00
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40001000 	.word	0x40001000

080041e4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b088      	sub	sp, #32
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a12      	ldr	r2, [pc, #72]	; (800424c <HAL_TIM_MspPostInit+0x68>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d11d      	bne.n	8004242 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_TIM_MspPostInit+0x6c>)
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <HAL_TIM_MspPostInit+0x6c>)
 800420c:	f043 0301 	orr.w	r3, r3, #1
 8004210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <HAL_TIM_MspPostInit+0x6c>)
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800421e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004222:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	2302      	movs	r3, #2
 8004226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422c:	2300      	movs	r3, #0
 800422e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004230:	2301      	movs	r3, #1
 8004232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004234:	f107 030c 	add.w	r3, r7, #12
 8004238:	4619      	mov	r1, r3
 800423a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800423e:	f002 fc5d 	bl	8006afc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004242:	bf00      	nop
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40021000 	.word	0x40021000

08004254 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004258:	4b14      	ldr	r3, [pc, #80]	; (80042ac <MX_UART5_Init+0x58>)
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <MX_UART5_Init+0x5c>)
 800425c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <MX_UART5_Init+0x58>)
 8004260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004264:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <MX_UART5_Init+0x58>)
 8004268:	2200      	movs	r2, #0
 800426a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <MX_UART5_Init+0x58>)
 800426e:	2200      	movs	r2, #0
 8004270:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004272:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <MX_UART5_Init+0x58>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <MX_UART5_Init+0x58>)
 800427a:	220c      	movs	r2, #12
 800427c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <MX_UART5_Init+0x58>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <MX_UART5_Init+0x58>)
 8004286:	2200      	movs	r2, #0
 8004288:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800428a:	4b08      	ldr	r3, [pc, #32]	; (80042ac <MX_UART5_Init+0x58>)
 800428c:	2200      	movs	r2, #0
 800428e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <MX_UART5_Init+0x58>)
 8004292:	2200      	movs	r2, #0
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004296:	4805      	ldr	r0, [pc, #20]	; (80042ac <MX_UART5_Init+0x58>)
 8004298:	f007 fd0a 	bl	800bcb0 <HAL_UART_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80042a2:	f7ff fb6f 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2000a70c 	.word	0x2000a70c
 80042b0:	40005000 	.word	0x40005000

080042b4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042b8:	4b16      	ldr	r3, [pc, #88]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <MX_USART2_UART_Init+0x64>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b11      	ldr	r3, [pc, #68]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b10      	ldr	r3, [pc, #64]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042f2:	2210      	movs	r2, #16
 80042f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <MX_USART2_UART_Init+0x60>)
 80042f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <MX_USART2_UART_Init+0x60>)
 8004300:	f007 fcd6 	bl	800bcb0 <HAL_UART_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800430a:	f7ff fb3b 	bl	8003984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800430e:	bf00      	nop
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	2000a790 	.word	0x2000a790
 8004318:	40004400 	.word	0x40004400

0800431c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b0ae      	sub	sp, #184	; 0xb8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]
 8004332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004334:	f107 031c 	add.w	r3, r7, #28
 8004338:	2288      	movs	r2, #136	; 0x88
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f009 fb69 	bl	800da14 <memset>
  if(uartHandle->Instance==UART5)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a57      	ldr	r2, [pc, #348]	; (80044a4 <HAL_UART_MspInit+0x188>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d165      	bne.n	8004418 <HAL_UART_MspInit+0xfc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800434c:	2310      	movs	r3, #16
 800434e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004350:	2300      	movs	r3, #0
 8004352:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004354:	f107 031c 	add.w	r3, r7, #28
 8004358:	4618      	mov	r0, r3
 800435a:	f004 fa19 	bl	8008790 <HAL_RCCEx_PeriphCLKConfig>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004364:	f7ff fb0e 	bl	8003984 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004368:	4b4f      	ldr	r3, [pc, #316]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436c:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004372:	6593      	str	r3, [r2, #88]	; 0x58
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004380:	4b49      	ldr	r3, [pc, #292]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	4a48      	ldr	r2, [pc, #288]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800438c:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800439a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439c:	4a42      	ldr	r2, [pc, #264]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800439e:	f043 0308 	orr.w	r3, r3, #8
 80043a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043a4:	4b40      	ldr	r3, [pc, #256]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	613b      	str	r3, [r7, #16]
 80043ae:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80043ca:	2308      	movs	r3, #8
 80043cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043d4:	4619      	mov	r1, r3
 80043d6:	4835      	ldr	r0, [pc, #212]	; (80044ac <HAL_UART_MspInit+0x190>)
 80043d8:	f002 fb90 	bl	8006afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043dc:	2304      	movs	r3, #4
 80043de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e2:	2302      	movs	r3, #2
 80043e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ee:	2303      	movs	r3, #3
 80043f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80043f4:	2308      	movs	r3, #8
 80043f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043fe:	4619      	mov	r1, r3
 8004400:	482b      	ldr	r0, [pc, #172]	; (80044b0 <HAL_UART_MspInit+0x194>)
 8004402:	f002 fb7b 	bl	8006afc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2100      	movs	r1, #0
 800440a:	2035      	movs	r0, #53	; 0x35
 800440c:	f002 fac1 	bl	8006992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004410:	2035      	movs	r0, #53	; 0x35
 8004412:	f002 fada 	bl	80069ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004416:	e040      	b.n	800449a <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a25      	ldr	r2, [pc, #148]	; (80044b4 <HAL_UART_MspInit+0x198>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d13b      	bne.n	800449a <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004422:	2302      	movs	r3, #2
 8004424:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004426:	2300      	movs	r3, #0
 8004428:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800442a:	f107 031c 	add.w	r3, r7, #28
 800442e:	4618      	mov	r0, r3
 8004430:	f004 f9ae 	bl	8008790 <HAL_RCCEx_PeriphCLKConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <HAL_UART_MspInit+0x122>
      Error_Handler();
 800443a:	f7ff faa3 	bl	8003984 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004448:	6593      	str	r3, [r2, #88]	; 0x58
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	4a13      	ldr	r2, [pc, #76]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_UART_MspInit+0x18c>)
 8004464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	60bb      	str	r3, [r7, #8]
 800446c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800446e:	230c      	movs	r3, #12
 8004470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004474:	2302      	movs	r3, #2
 8004476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004480:	2303      	movs	r3, #3
 8004482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004486:	2307      	movs	r3, #7
 8004488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004490:	4619      	mov	r1, r3
 8004492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004496:	f002 fb31 	bl	8006afc <HAL_GPIO_Init>
}
 800449a:	bf00      	nop
 800449c:	37b8      	adds	r7, #184	; 0xb8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40005000 	.word	0x40005000
 80044a8:	40021000 	.word	0x40021000
 80044ac:	48000800 	.word	0x48000800
 80044b0:	48000c00 	.word	0x48000c00
 80044b4:	40004400 	.word	0x40004400

080044b8 <__io_putchar>:

extern int onlywrite;

//nadpisanie io_putchar tak aby mozna bylo za pomoca USART uzywac funkcji "printf"
int __io_putchar(int ch)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b0a      	cmp	r3, #10
 80044c4:	d109      	bne.n	80044da <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80044c6:	230d      	movs	r3, #13
 80044c8:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 80044ca:	f107 010f 	add.w	r1, r7, #15
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295
 80044d2:	2201      	movs	r2, #1
 80044d4:	4807      	ldr	r0, [pc, #28]	; (80044f4 <__io_putchar+0x3c>)
 80044d6:	f007 fc39 	bl	800bd4c <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80044da:	1d39      	adds	r1, r7, #4
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
 80044e0:	2201      	movs	r2, #1
 80044e2:	4804      	ldr	r0, [pc, #16]	; (80044f4 <__io_putchar+0x3c>)
 80044e4:	f007 fc32 	bl	800bd4c <HAL_UART_Transmit>
    return 1;
 80044e8:	2301      	movs	r3, #1
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	2000a790 	.word	0x2000a790

080044f8 <line_append>:

static char line_buffer[LINE_MAX_LENGTH + 1];
static uint32_t line_length;

void line_append(uint8_t value)
{
 80044f8:	b5b0      	push	{r4, r5, r7, lr}
 80044fa:	b090      	sub	sp, #64	; 0x40
 80044fc:	af08      	add	r7, sp, #32
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n') {
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b0d      	cmp	r3, #13
 8004506:	d003      	beq.n	8004510 <line_append+0x18>
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	2b0a      	cmp	r3, #10
 800450c:	f040 81a3 	bne.w	8004856 <line_append+0x35e>
		// odebraliśmy znak końca linii
		if (line_length > 0) {
 8004510:	4b98      	ldr	r3, [pc, #608]	; (8004774 <line_append+0x27c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 81ae 	beq.w	8004876 <line_append+0x37e>
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 800451a:	4b96      	ldr	r3, [pc, #600]	; (8004774 <line_append+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a96      	ldr	r2, [pc, #600]	; (8004778 <line_append+0x280>)
 8004520:	2100      	movs	r1, #0
 8004522:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane


					if(strcmp(line_buffer,"just write")==0)
 8004524:	4995      	ldr	r1, [pc, #596]	; (800477c <line_append+0x284>)
 8004526:	4894      	ldr	r0, [pc, #592]	; (8004778 <line_append+0x280>)
 8004528:	f7fb fe52 	bl	80001d0 <strcmp>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <line_append+0x46>
	{
			onlywrite=1;
 8004532:	4b93      	ldr	r3, [pc, #588]	; (8004780 <line_append+0x288>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
		printf("teraz bez odczytu \n");
 8004538:	4892      	ldr	r0, [pc, #584]	; (8004784 <line_append+0x28c>)
 800453a:	f00a fa69 	bl	800ea10 <puts>
	}

					if(strcmp(line_buffer,"also reading")==0)
 800453e:	4992      	ldr	r1, [pc, #584]	; (8004788 <line_append+0x290>)
 8004540:	488d      	ldr	r0, [pc, #564]	; (8004778 <line_append+0x280>)
 8004542:	f7fb fe45 	bl	80001d0 <strcmp>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <line_append+0x60>
		{
				onlywrite=0;
 800454c:	4b8c      	ldr	r3, [pc, #560]	; (8004780 <line_append+0x288>)
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
			printf("teraz odczyt i pisanie \n");
 8004552:	488e      	ldr	r0, [pc, #568]	; (800478c <line_append+0x294>)
 8004554:	f00a fa5c 	bl	800ea10 <puts>
		}



					if(strcmp(line_buffer,"rok")==0)
 8004558:	498d      	ldr	r1, [pc, #564]	; (8004790 <line_append+0x298>)
 800455a:	4887      	ldr	r0, [pc, #540]	; (8004778 <line_append+0x280>)
 800455c:	f7fb fe38 	bl	80001d0 <strcmp>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d102      	bne.n	800456c <line_append+0x74>
							{
									wybor_daty=1;
 8004566:	4b8b      	ldr	r3, [pc, #556]	; (8004794 <line_append+0x29c>)
 8004568:	2201      	movs	r2, #1
 800456a:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"nierok")==0)
 800456c:	498a      	ldr	r1, [pc, #552]	; (8004798 <line_append+0x2a0>)
 800456e:	4882      	ldr	r0, [pc, #520]	; (8004778 <line_append+0x280>)
 8004570:	f7fb fe2e 	bl	80001d0 <strcmp>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <line_append+0x88>
							{
									wybor_daty=0;
 800457a:	4b86      	ldr	r3, [pc, #536]	; (8004794 <line_append+0x29c>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"miesiac")==0)
 8004580:	4986      	ldr	r1, [pc, #536]	; (800479c <line_append+0x2a4>)
 8004582:	487d      	ldr	r0, [pc, #500]	; (8004778 <line_append+0x280>)
 8004584:	f7fb fe24 	bl	80001d0 <strcmp>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <line_append+0x9c>
							{
									wybor_miesiaca=1;
 800458e:	4b84      	ldr	r3, [pc, #528]	; (80047a0 <line_append+0x2a8>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"niemiesiac")==0)
 8004594:	4983      	ldr	r1, [pc, #524]	; (80047a4 <line_append+0x2ac>)
 8004596:	4878      	ldr	r0, [pc, #480]	; (8004778 <line_append+0x280>)
 8004598:	f7fb fe1a 	bl	80001d0 <strcmp>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <line_append+0xb0>
							{
									wybor_miesiaca=0;
 80045a2:	4b7f      	ldr	r3, [pc, #508]	; (80047a0 <line_append+0x2a8>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
							}

					if(strcmp(line_buffer,"dzien")==0)
 80045a8:	497f      	ldr	r1, [pc, #508]	; (80047a8 <line_append+0x2b0>)
 80045aa:	4873      	ldr	r0, [pc, #460]	; (8004778 <line_append+0x280>)
 80045ac:	f7fb fe10 	bl	80001d0 <strcmp>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <line_append+0xc4>
							{
									wybor_dnia=1;
 80045b6:	4b7d      	ldr	r3, [pc, #500]	; (80047ac <line_append+0x2b4>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"niedzien")==0)
 80045bc:	497c      	ldr	r1, [pc, #496]	; (80047b0 <line_append+0x2b8>)
 80045be:	486e      	ldr	r0, [pc, #440]	; (8004778 <line_append+0x280>)
 80045c0:	f7fb fe06 	bl	80001d0 <strcmp>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <line_append+0xd8>
							{
									wybor_dnia=0;
 80045ca:	4b78      	ldr	r3, [pc, #480]	; (80047ac <line_append+0x2b4>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
							}

					if(strcmp(line_buffer,"godzina")==0)
 80045d0:	4978      	ldr	r1, [pc, #480]	; (80047b4 <line_append+0x2bc>)
 80045d2:	4869      	ldr	r0, [pc, #420]	; (8004778 <line_append+0x280>)
 80045d4:	f7fb fdfc 	bl	80001d0 <strcmp>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d102      	bne.n	80045e4 <line_append+0xec>
							{
									wybor_godziny=1;
 80045de:	4b76      	ldr	r3, [pc, #472]	; (80047b8 <line_append+0x2c0>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"niegodzina")==0)
 80045e4:	4975      	ldr	r1, [pc, #468]	; (80047bc <line_append+0x2c4>)
 80045e6:	4864      	ldr	r0, [pc, #400]	; (8004778 <line_append+0x280>)
 80045e8:	f7fb fdf2 	bl	80001d0 <strcmp>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <line_append+0x100>
							{
									wybor_godziny=0;
 80045f2:	4b71      	ldr	r3, [pc, #452]	; (80047b8 <line_append+0x2c0>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"minuta")==0)
 80045f8:	4971      	ldr	r1, [pc, #452]	; (80047c0 <line_append+0x2c8>)
 80045fa:	485f      	ldr	r0, [pc, #380]	; (8004778 <line_append+0x280>)
 80045fc:	f7fb fde8 	bl	80001d0 <strcmp>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d102      	bne.n	800460c <line_append+0x114>
							{
									wybor_minuty=1;
 8004606:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <line_append+0x2cc>)
 8004608:	2201      	movs	r2, #1
 800460a:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"nieminuta")==0)
 800460c:	496e      	ldr	r1, [pc, #440]	; (80047c8 <line_append+0x2d0>)
 800460e:	485a      	ldr	r0, [pc, #360]	; (8004778 <line_append+0x280>)
 8004610:	f7fb fdde 	bl	80001d0 <strcmp>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <line_append+0x128>
							{
									wybor_minuty=0;
 800461a:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <line_append+0x2cc>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"sekunda")==0)
 8004620:	496a      	ldr	r1, [pc, #424]	; (80047cc <line_append+0x2d4>)
 8004622:	4855      	ldr	r0, [pc, #340]	; (8004778 <line_append+0x280>)
 8004624:	f7fb fdd4 	bl	80001d0 <strcmp>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <line_append+0x13c>
							{
									wybor_sekundy=1;
 800462e:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <line_append+0x2d8>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]
							}
					if(strcmp(line_buffer,"niesekunda")==0)
 8004634:	4967      	ldr	r1, [pc, #412]	; (80047d4 <line_append+0x2dc>)
 8004636:	4850      	ldr	r0, [pc, #320]	; (8004778 <line_append+0x280>)
 8004638:	f7fb fdca 	bl	80001d0 <strcmp>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d102      	bne.n	8004648 <line_append+0x150>
							{
									wybor_sekundy=0;
 8004642:	4b63      	ldr	r3, [pc, #396]	; (80047d0 <line_append+0x2d8>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]





		if(wybor_daty==1){
 8004648:	4b52      	ldr	r3, [pc, #328]	; (8004794 <line_append+0x29c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10d      	bne.n	800466c <line_append+0x174>


			rok=atoi(line_buffer);
 8004650:	4849      	ldr	r0, [pc, #292]	; (8004778 <line_append+0x280>)
 8004652:	f008 ff83 	bl	800d55c <atoi>
 8004656:	4603      	mov	r3, r0
 8004658:	461a      	mov	r2, r3
 800465a:	4b5f      	ldr	r3, [pc, #380]	; (80047d8 <line_append+0x2e0>)
 800465c:	601a      	str	r2, [r3, #0]
			if(rok>=0 && rok<=99){
 800465e:	4b5e      	ldr	r3, [pc, #376]	; (80047d8 <line_append+0x2e0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b63      	cmp	r3, #99	; 0x63
 8004664:	d902      	bls.n	800466c <line_append+0x174>

			}   //dziala
			else{rok=22;}
 8004666:	4b5c      	ldr	r3, [pc, #368]	; (80047d8 <line_append+0x2e0>)
 8004668:	2216      	movs	r2, #22
 800466a:	601a      	str	r2, [r3, #0]
		}

		if(wybor_miesiaca==1)
 800466c:	4b4c      	ldr	r3, [pc, #304]	; (80047a0 <line_append+0x2a8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d111      	bne.n	8004698 <line_append+0x1a0>
		{

			miesiac=atoi(line_buffer);
 8004674:	4840      	ldr	r0, [pc, #256]	; (8004778 <line_append+0x280>)
 8004676:	f008 ff71 	bl	800d55c <atoi>
 800467a:	4603      	mov	r3, r0
 800467c:	461a      	mov	r2, r3
 800467e:	4b57      	ldr	r3, [pc, #348]	; (80047dc <line_append+0x2e4>)
 8004680:	601a      	str	r2, [r3, #0]
			if(miesiac>=1 && miesiac<=12){
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <line_append+0x2e4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <line_append+0x19a>
 800468a:	4b54      	ldr	r3, [pc, #336]	; (80047dc <line_append+0x2e4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d902      	bls.n	8004698 <line_append+0x1a0>

			}   //dziala
			else{miesiac=6;}
 8004692:	4b52      	ldr	r3, [pc, #328]	; (80047dc <line_append+0x2e4>)
 8004694:	2206      	movs	r2, #6
 8004696:	601a      	str	r2, [r3, #0]

			}
		if(wybor_dnia==1)
 8004698:	4b44      	ldr	r3, [pc, #272]	; (80047ac <line_append+0x2b4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d111      	bne.n	80046c4 <line_append+0x1cc>
		{
			dzien=atoi(line_buffer);
 80046a0:	4835      	ldr	r0, [pc, #212]	; (8004778 <line_append+0x280>)
 80046a2:	f008 ff5b 	bl	800d55c <atoi>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b4d      	ldr	r3, [pc, #308]	; (80047e0 <line_append+0x2e8>)
 80046ac:	601a      	str	r2, [r3, #0]
			if(dzien>=1 && dzien<=31){
 80046ae:	4b4c      	ldr	r3, [pc, #304]	; (80047e0 <line_append+0x2e8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d003      	beq.n	80046be <line_append+0x1c6>
 80046b6:	4b4a      	ldr	r3, [pc, #296]	; (80047e0 <line_append+0x2e8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b1f      	cmp	r3, #31
 80046bc:	d902      	bls.n	80046c4 <line_append+0x1cc>

			}   //dziala
			else{dzien=15;}
 80046be:	4b48      	ldr	r3, [pc, #288]	; (80047e0 <line_append+0x2e8>)
 80046c0:	220f      	movs	r2, #15
 80046c2:	601a      	str	r2, [r3, #0]
			}


		if(wybor_godziny==1)
 80046c4:	4b3c      	ldr	r3, [pc, #240]	; (80047b8 <line_append+0x2c0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d10d      	bne.n	80046e8 <line_append+0x1f0>
				{
					godzina=atoi(line_buffer);
 80046cc:	482a      	ldr	r0, [pc, #168]	; (8004778 <line_append+0x280>)
 80046ce:	f008 ff45 	bl	800d55c <atoi>
 80046d2:	4603      	mov	r3, r0
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <line_append+0x2ec>)
 80046d8:	601a      	str	r2, [r3, #0]
					if(godzina>=0 && godzina<=24){
 80046da:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <line_append+0x2ec>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b18      	cmp	r3, #24
 80046e0:	d902      	bls.n	80046e8 <line_append+0x1f0>

					}   //dziala
					else{godzina=15;}
 80046e2:	4b40      	ldr	r3, [pc, #256]	; (80047e4 <line_append+0x2ec>)
 80046e4:	220f      	movs	r2, #15
 80046e6:	601a      	str	r2, [r3, #0]
					}

		if(wybor_minuty==1)
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <line_append+0x2cc>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d10d      	bne.n	800470c <line_append+0x214>
						{
							minuta=atoi(line_buffer);
 80046f0:	4821      	ldr	r0, [pc, #132]	; (8004778 <line_append+0x280>)
 80046f2:	f008 ff33 	bl	800d55c <atoi>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b3b      	ldr	r3, [pc, #236]	; (80047e8 <line_append+0x2f0>)
 80046fc:	601a      	str	r2, [r3, #0]
							if(minuta>=0 && godzina<=59){
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <line_append+0x2ec>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b3b      	cmp	r3, #59	; 0x3b
 8004704:	d902      	bls.n	800470c <line_append+0x214>

							}   //dziala
							else{minuta=15;}
 8004706:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <line_append+0x2f0>)
 8004708:	220f      	movs	r2, #15
 800470a:	601a      	str	r2, [r3, #0]
							}

		if(wybor_sekundy==1)
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <line_append+0x2d8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d10d      	bne.n	8004730 <line_append+0x238>
								{
									sekunda=atoi(line_buffer);
 8004714:	4818      	ldr	r0, [pc, #96]	; (8004778 <line_append+0x280>)
 8004716:	f008 ff21 	bl	800d55c <atoi>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	4b33      	ldr	r3, [pc, #204]	; (80047ec <line_append+0x2f4>)
 8004720:	601a      	str	r2, [r3, #0]
									if(sekunda>=0 && sekunda<=59){
 8004722:	4b32      	ldr	r3, [pc, #200]	; (80047ec <line_append+0x2f4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b3b      	cmp	r3, #59	; 0x3b
 8004728:	d902      	bls.n	8004730 <line_append+0x238>

									}   //dziala
									else{sekunda=15;}
 800472a:	4b30      	ldr	r3, [pc, #192]	; (80047ec <line_append+0x2f4>)
 800472c:	220f      	movs	r2, #15
 800472e:	601a      	str	r2, [r3, #0]





		printf("aktualna data:rok: %d, miesiac: %d, dzien: %d, godzina: %d, minuta: %d, sekunda: %d,\n", rok,miesiac,dzien,godzina,minuta,sekunda);
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <line_append+0x2e0>)
 8004732:	6818      	ldr	r0, [r3, #0]
 8004734:	4b29      	ldr	r3, [pc, #164]	; (80047dc <line_append+0x2e4>)
 8004736:	681c      	ldr	r4, [r3, #0]
 8004738:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <line_append+0x2e8>)
 800473a:	681d      	ldr	r5, [r3, #0]
 800473c:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <line_append+0x2ec>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a29      	ldr	r2, [pc, #164]	; (80047e8 <line_append+0x2f0>)
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	4929      	ldr	r1, [pc, #164]	; (80047ec <line_append+0x2f4>)
 8004746:	6809      	ldr	r1, [r1, #0]
 8004748:	9102      	str	r1, [sp, #8]
 800474a:	9201      	str	r2, [sp, #4]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	462b      	mov	r3, r5
 8004750:	4622      	mov	r2, r4
 8004752:	4601      	mov	r1, r0
 8004754:	4826      	ldr	r0, [pc, #152]	; (80047f0 <line_append+0x2f8>)
 8004756:	f00a f8bf 	bl	800e8d8 <iprintf>




			printf("Otrzymano: %s\n", line_buffer);
 800475a:	4907      	ldr	r1, [pc, #28]	; (8004778 <line_append+0x280>)
 800475c:	4825      	ldr	r0, [pc, #148]	; (80047f4 <line_append+0x2fc>)
 800475e:	f00a f8bb 	bl	800e8d8 <iprintf>


			if(strcmp(line_buffer,"set_date")==0)
 8004762:	4925      	ldr	r1, [pc, #148]	; (80047f8 <line_append+0x300>)
 8004764:	4804      	ldr	r0, [pc, #16]	; (8004778 <line_append+0x280>)
 8004766:	f7fb fd33 	bl	80001d0 <strcmp>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d16e      	bne.n	800484e <line_append+0x356>
 8004770:	e044      	b.n	80047fc <line_append+0x304>
 8004772:	bf00      	nop
 8004774:	2000a898 	.word	0x2000a898
 8004778:	2000a844 	.word	0x2000a844
 800477c:	080136f0 	.word	0x080136f0
 8004780:	2000a554 	.word	0x2000a554
 8004784:	080136fc 	.word	0x080136fc
 8004788:	08013710 	.word	0x08013710
 800478c:	08013720 	.word	0x08013720
 8004790:	08013738 	.word	0x08013738
 8004794:	2000a82c 	.word	0x2000a82c
 8004798:	0801373c 	.word	0x0801373c
 800479c:	08013744 	.word	0x08013744
 80047a0:	2000a830 	.word	0x2000a830
 80047a4:	0801374c 	.word	0x0801374c
 80047a8:	08013758 	.word	0x08013758
 80047ac:	2000a834 	.word	0x2000a834
 80047b0:	08013760 	.word	0x08013760
 80047b4:	0801376c 	.word	0x0801376c
 80047b8:	2000a840 	.word	0x2000a840
 80047bc:	08013774 	.word	0x08013774
 80047c0:	08013780 	.word	0x08013780
 80047c4:	2000a83c 	.word	0x2000a83c
 80047c8:	08013788 	.word	0x08013788
 80047cc:	08013794 	.word	0x08013794
 80047d0:	2000a838 	.word	0x2000a838
 80047d4:	0801379c 	.word	0x0801379c
 80047d8:	2000a814 	.word	0x2000a814
 80047dc:	2000a818 	.word	0x2000a818
 80047e0:	2000a81c 	.word	0x2000a81c
 80047e4:	2000a820 	.word	0x2000a820
 80047e8:	2000a824 	.word	0x2000a824
 80047ec:	2000a828 	.word	0x2000a828
 80047f0:	080137a8 	.word	0x080137a8
 80047f4:	08013800 	.word	0x08013800
 80047f8:	08013810 	.word	0x08013810
												{
			 	RTC_TimeTypeDef new_time = {0};
 80047fc:	f107 030c 	add.w	r3, r7, #12
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
						  	RTC_DateTypeDef new_date={0};
 800480c:	2300      	movs	r3, #0
 800480e:	60bb      	str	r3, [r7, #8]
			  	 set_new_date_and_time(new_date,new_time,rok,miesiac,dzien,godzina,minuta,sekunda);
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <line_append+0x388>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <line_append+0x38c>)
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	491b      	ldr	r1, [pc, #108]	; (8004888 <line_append+0x390>)
 800481a:	6809      	ldr	r1, [r1, #0]
 800481c:	481b      	ldr	r0, [pc, #108]	; (800488c <line_append+0x394>)
 800481e:	6800      	ldr	r0, [r0, #0]
 8004820:	4c1b      	ldr	r4, [pc, #108]	; (8004890 <line_append+0x398>)
 8004822:	6824      	ldr	r4, [r4, #0]
 8004824:	4d1b      	ldr	r5, [pc, #108]	; (8004894 <line_append+0x39c>)
 8004826:	682d      	ldr	r5, [r5, #0]
 8004828:	9507      	str	r5, [sp, #28]
 800482a:	9406      	str	r4, [sp, #24]
 800482c:	9005      	str	r0, [sp, #20]
 800482e:	9104      	str	r1, [sp, #16]
 8004830:	9203      	str	r2, [sp, #12]
 8004832:	9302      	str	r3, [sp, #8]
 8004834:	466a      	mov	r2, sp
 8004836:	f107 0318 	add.w	r3, r7, #24
 800483a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800483e:	e882 0003 	stmia.w	r2, {r0, r1}
 8004842:	f107 030c 	add.w	r3, r7, #12
 8004846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004848:	68b8      	ldr	r0, [r7, #8]
 800484a:	f7fe f85b 	bl	8002904 <set_new_date_and_time>




		// zaczynamy zbieranie danych od nowa
			line_length = 0;
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <line_append+0x3a0>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
		if (line_length > 0) {
 8004854:	e00f      	b.n	8004876 <line_append+0x37e>
		}
	}
	else {
		if (line_length >= LINE_MAX_LENGTH) {
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <line_append+0x3a0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b4f      	cmp	r3, #79	; 0x4f
 800485c:	d902      	bls.n	8004864 <line_append+0x36c>
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <line_append+0x3a0>)
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 8004864:	4b0c      	ldr	r3, [pc, #48]	; (8004898 <line_append+0x3a0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	490b      	ldr	r1, [pc, #44]	; (8004898 <line_append+0x3a0>)
 800486c:	600a      	str	r2, [r1, #0]
 800486e:	490b      	ldr	r1, [pc, #44]	; (800489c <line_append+0x3a4>)
 8004870:	79fa      	ldrb	r2, [r7, #7]
 8004872:	54ca      	strb	r2, [r1, r3]


	}

}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bdb0      	pop	{r4, r5, r7, pc}
 800487e:	bf00      	nop
 8004880:	2000a814 	.word	0x2000a814
 8004884:	2000a818 	.word	0x2000a818
 8004888:	2000a81c 	.word	0x2000a81c
 800488c:	2000a820 	.word	0x2000a820
 8004890:	2000a824 	.word	0x2000a824
 8004894:	2000a828 	.word	0x2000a828
 8004898:	2000a898 	.word	0x2000a898
 800489c:	2000a844 	.word	0x2000a844

080048a0 <wire_init>:
#include "wire.h"
#include "gpio.h"
#include "tim.h"

HAL_StatusTypeDef wire_init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  return HAL_TIM_Base_Start(&htim6);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <wire_init+0x10>)
 80048a6:	f005 fb27 	bl	8009ef8 <HAL_TIM_Base_Start>
 80048aa:	4603      	mov	r3, r0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	2000a6c0 	.word	0x2000a6c0

080048b4 <delay_us>:

static void delay_us(uint32_t us)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim6, 0);
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <delay_us+0x2c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 80048c4:	bf00      	nop
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <delay_us+0x2c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d8f9      	bhi.n	80048c6 <delay_us+0x12>
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	2000a6c0 	.word	0x2000a6c0

080048e4 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80048ea:	2200      	movs	r2, #0
 80048ec:	2110      	movs	r1, #16
 80048ee:	4811      	ldr	r0, [pc, #68]	; (8004934 <wire_reset+0x50>)
 80048f0:	f002 fac6 	bl	8006e80 <HAL_GPIO_WritePin>
  delay_us(480);
 80048f4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80048f8:	f7ff ffdc 	bl	80048b4 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80048fc:	2201      	movs	r2, #1
 80048fe:	2110      	movs	r1, #16
 8004900:	480c      	ldr	r0, [pc, #48]	; (8004934 <wire_reset+0x50>)
 8004902:	f002 fabd 	bl	8006e80 <HAL_GPIO_WritePin>
  delay_us(70);
 8004906:	2046      	movs	r0, #70	; 0x46
 8004908:	f7ff ffd4 	bl	80048b4 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 800490c:	2110      	movs	r1, #16
 800490e:	4809      	ldr	r0, [pc, #36]	; (8004934 <wire_reset+0x50>)
 8004910:	f002 fa9e 	bl	8006e50 <HAL_GPIO_ReadPin>
 8004914:	4603      	mov	r3, r0
 8004916:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8004918:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 800491c:	f7ff ffca 	bl	80048b4 <delay_us>

  if (rc == 0)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <wire_reset+0x46>
    return HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	e000      	b.n	800492c <wire_reset+0x48>
  else
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	48000800 	.word	0x48000800

08004938 <read_bit>:

static int read_bit(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 800493e:	2200      	movs	r2, #0
 8004940:	2110      	movs	r1, #16
 8004942:	480e      	ldr	r0, [pc, #56]	; (800497c <read_bit+0x44>)
 8004944:	f002 fa9c 	bl	8006e80 <HAL_GPIO_WritePin>
  delay_us(6);
 8004948:	2006      	movs	r0, #6
 800494a:	f7ff ffb3 	bl	80048b4 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 800494e:	2201      	movs	r2, #1
 8004950:	2110      	movs	r1, #16
 8004952:	480a      	ldr	r0, [pc, #40]	; (800497c <read_bit+0x44>)
 8004954:	f002 fa94 	bl	8006e80 <HAL_GPIO_WritePin>
  delay_us(9);
 8004958:	2009      	movs	r0, #9
 800495a:	f7ff ffab 	bl	80048b4 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 800495e:	2110      	movs	r1, #16
 8004960:	4806      	ldr	r0, [pc, #24]	; (800497c <read_bit+0x44>)
 8004962:	f002 fa75 	bl	8006e50 <HAL_GPIO_ReadPin>
 8004966:	4603      	mov	r3, r0
 8004968:	607b      	str	r3, [r7, #4]
  delay_us(55);
 800496a:	2037      	movs	r0, #55	; 0x37
 800496c:	f7ff ffa2 	bl	80048b4 <delay_us>
  return rc;
 8004970:	687b      	ldr	r3, [r7, #4]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	48000800 	.word	0x48000800

08004980 <wire_read>:

uint8_t wire_read(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 800498a:	2300      	movs	r3, #0
 800498c:	603b      	str	r3, [r7, #0]
 800498e:	e00e      	b.n	80049ae <wire_read+0x2e>
    value >>= 1;
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8004996:	f7ff ffcf 	bl	8004938 <read_bit>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <wire_read+0x28>
      value |= 0x80;
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a6:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	3301      	adds	r3, #1
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b07      	cmp	r3, #7
 80049b2:	dded      	ble.n	8004990 <wire_read+0x10>
  }
  return value;
 80049b4:	79fb      	ldrb	r3, [r7, #7]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <write_bit>:

static void write_bit(int value)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  if (value) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d010      	beq.n	80049f0 <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2110      	movs	r1, #16
 80049d2:	4811      	ldr	r0, [pc, #68]	; (8004a18 <write_bit+0x58>)
 80049d4:	f002 fa54 	bl	8006e80 <HAL_GPIO_WritePin>
    delay_us(6);
 80049d8:	2006      	movs	r0, #6
 80049da:	f7ff ff6b 	bl	80048b4 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 80049de:	2201      	movs	r2, #1
 80049e0:	2110      	movs	r1, #16
 80049e2:	480d      	ldr	r0, [pc, #52]	; (8004a18 <write_bit+0x58>)
 80049e4:	f002 fa4c 	bl	8006e80 <HAL_GPIO_WritePin>
    delay_us(64);
 80049e8:	2040      	movs	r0, #64	; 0x40
 80049ea:	f7ff ff63 	bl	80048b4 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 80049ee:	e00f      	b.n	8004a10 <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 80049f0:	2200      	movs	r2, #0
 80049f2:	2110      	movs	r1, #16
 80049f4:	4808      	ldr	r0, [pc, #32]	; (8004a18 <write_bit+0x58>)
 80049f6:	f002 fa43 	bl	8006e80 <HAL_GPIO_WritePin>
    delay_us(60);
 80049fa:	203c      	movs	r0, #60	; 0x3c
 80049fc:	f7ff ff5a 	bl	80048b4 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8004a00:	2201      	movs	r2, #1
 8004a02:	2110      	movs	r1, #16
 8004a04:	4804      	ldr	r0, [pc, #16]	; (8004a18 <write_bit+0x58>)
 8004a06:	f002 fa3b 	bl	8006e80 <HAL_GPIO_WritePin>
    delay_us(10);
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	f7ff ff52 	bl	80048b4 <delay_us>
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	48000800 	.word	0x48000800

08004a1c <wire_write>:

void wire_write(uint8_t byte)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e00b      	b.n	8004a44 <wire_write+0x28>
    write_bit(byte & 0x01);
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff ffc4 	bl	80049c0 <write_bit>
    byte >>= 1;
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	085b      	lsrs	r3, r3, #1
 8004a3c:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3301      	adds	r3, #1
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b07      	cmp	r3, #7
 8004a48:	ddf0      	ble.n	8004a2c <wire_write+0x10>
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	460a      	mov	r2, r1
 8004a5e:	71fb      	strb	r3, [r7, #7]
 8004a60:	4613      	mov	r3, r2
 8004a62:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	e016      	b.n	8004a98 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8004a6a:	79fa      	ldrb	r2, [r7, #7]
 8004a6c:	79bb      	ldrb	r3, [r7, #6]
 8004a6e:	4053      	eors	r3, r2
 8004a70:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	085b      	lsrs	r3, r3, #1
 8004a76:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d004      	beq.n	8004a8c <byte_crc+0x38>
      crc ^= 0x8c;
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8004a8c:	79bb      	ldrb	r3, [r7, #6]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3301      	adds	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b07      	cmp	r3, #7
 8004a9c:	dde5      	ble.n	8004a6a <byte_crc+0x16>
  }
  return crc;
 8004a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e00d      	b.n	8004adc <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	781a      	ldrb	r2, [r3, #0]
 8004ac8:	7afb      	ldrb	r3, [r7, #11]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff ffc1 	bl	8004a54 <byte_crc>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	dbed      	blt.n	8004ac0 <wire_crc+0x14>

    return crc;
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004af0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004af4:	f7ff f97a 	bl	8003dec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004af8:	480c      	ldr	r0, [pc, #48]	; (8004b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8004afa:	490d      	ldr	r1, [pc, #52]	; (8004b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004afc:	4a0d      	ldr	r2, [pc, #52]	; (8004b34 <LoopForever+0xe>)
  movs r3, #0
 8004afe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b00:	e002      	b.n	8004b08 <LoopCopyDataInit>

08004b02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b06:	3304      	adds	r3, #4

08004b08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b0c:	d3f9      	bcc.n	8004b02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b0e:	4a0a      	ldr	r2, [pc, #40]	; (8004b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b10:	4c0a      	ldr	r4, [pc, #40]	; (8004b3c <LoopForever+0x16>)
  movs r3, #0
 8004b12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b14:	e001      	b.n	8004b1a <LoopFillZerobss>

08004b16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b18:	3204      	adds	r2, #4

08004b1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b1c:	d3fb      	bcc.n	8004b16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b1e:	f008 fedf 	bl	800d8e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b22:	f7fd fd65 	bl	80025f0 <main>

08004b26 <LoopForever>:

LoopForever:
    b LoopForever
 8004b26:	e7fe      	b.n	8004b26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004b28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b30:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8004b34:	08016f18 	.word	0x08016f18
  ldr r2, =_sbss
 8004b38:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8004b3c:	2000a8b0 	.word	0x2000a8b0

08004b40 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b40:	e7fe      	b.n	8004b40 <ADC3_IRQHandler>

08004b42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b4c:	2003      	movs	r0, #3
 8004b4e:	f001 ff15 	bl	800697c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b52:	200f      	movs	r0, #15
 8004b54:	f000 f80e 	bl	8004b74 <HAL_InitTick>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	71fb      	strb	r3, [r7, #7]
 8004b62:	e001      	b.n	8004b68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b64:	f7ff f80e 	bl	8003b84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b68:	79fb      	ldrb	r3, [r7, #7]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004b80:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <HAL_InitTick+0x6c>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d023      	beq.n	8004bd0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004b88:	4b16      	ldr	r3, [pc, #88]	; (8004be4 <HAL_InitTick+0x70>)
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_InitTick+0x6c>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	4619      	mov	r1, r3
 8004b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f001 ff21 	bl	80069e6 <HAL_SYSTICK_Config>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d809      	bhi.n	8004bc4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f001 feeb 	bl	8006992 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004bbc:	4a0a      	ldr	r2, [pc, #40]	; (8004be8 <HAL_InitTick+0x74>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e007      	b.n	8004bd4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
 8004bc8:	e004      	b.n	8004bd4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	e001      	b.n	8004bd4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000144 	.word	0x20000144
 8004be4:	2000013c 	.word	0x2000013c
 8004be8:	20000140 	.word	0x20000140

08004bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <HAL_IncTick+0x20>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_IncTick+0x24>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <HAL_IncTick+0x24>)
 8004bfe:	6013      	str	r3, [r2, #0]
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000144 	.word	0x20000144
 8004c10:	2000a89c 	.word	0x2000a89c

08004c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return uwTick;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_GetTick+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000a89c 	.word	0x2000a89c

08004c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c34:	f7ff ffee 	bl	8004c14 <HAL_GetTick>
 8004c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c44:	d005      	beq.n	8004c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <HAL_Delay+0x44>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c52:	bf00      	nop
 8004c54:	f7ff ffde 	bl	8004c14 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d8f7      	bhi.n	8004c54 <HAL_Delay+0x28>
  {
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000144 	.word	0x20000144

08004c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3360      	adds	r3, #96	; 0x60
 8004cee:	461a      	mov	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <LL_ADC_SetOffset+0x44>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	03fff000 	.word	0x03fff000

08004d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	461a      	mov	r2, r3
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3360      	adds	r3, #96	; 0x60
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3330      	adds	r3, #48	; 0x30
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	4413      	add	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	211f      	movs	r1, #31
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	401a      	ands	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	0e9b      	lsrs	r3, r3, #26
 8004de4:	f003 011f 	and.w	r1, r3, #31
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 031f 	and.w	r3, r3, #31
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	431a      	orrs	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	0e5b      	lsrs	r3, r3, #25
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	4413      	add	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	0d1b      	lsrs	r3, r3, #20
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2107      	movs	r1, #7
 8004e58:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	401a      	ands	r2, r3
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	0d1b      	lsrs	r3, r3, #20
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0318 	and.w	r3, r3, #24
 8004ea2:	4908      	ldr	r1, [pc, #32]	; (8004ec4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004ea4:	40d9      	lsrs	r1, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	0007ffff 	.word	0x0007ffff

08004ec8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004f10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6093      	str	r3, [r2, #8]
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f38:	d101      	bne.n	8004f3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f88:	d101      	bne.n	8004f8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004fd8:	f043 0202 	orr.w	r2, r3, #2
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <LL_ADC_IsEnabled+0x18>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <LL_ADC_IsEnabled+0x1a>
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b02      	cmp	r3, #2
 8005024:	d101      	bne.n	800502a <LL_ADC_IsDisableOngoing+0x18>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <LL_ADC_IsDisableOngoing+0x1a>
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005048:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800504c:	f043 0204 	orr.w	r2, r3, #4
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b04      	cmp	r3, #4
 8005072:	d101      	bne.n	8005078 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005086:	b480      	push	{r7}
 8005088:	b083      	sub	sp, #12
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b08      	cmp	r3, #8
 8005098:	d101      	bne.n	800509e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800509a:	2301      	movs	r3, #1
 800509c:	e000      	b.n	80050a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80050ac:	b590      	push	{r4, r7, lr}
 80050ae:	b089      	sub	sp, #36	; 0x24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e136      	b.n	8005334 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7fc fb61 	bl	800179c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff19 	bl	8004f24 <LL_ADC_IsDeepPowerDownEnabled>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d004      	beq.n	8005102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff feff 	bl	8004f00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff ff34 	bl	8004f74 <LL_ADC_IsInternalRegulatorEnabled>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d115      	bne.n	800513e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff ff18 	bl	8004f4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800511c:	4b87      	ldr	r3, [pc, #540]	; (800533c <HAL_ADC_Init+0x290>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	4a87      	ldr	r2, [pc, #540]	; (8005340 <HAL_ADC_Init+0x294>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	099b      	lsrs	r3, r3, #6
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005130:	e002      	b.n	8005138 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	3b01      	subs	r3, #1
 8005136:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f9      	bne.n	8005132 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff ff16 	bl	8004f74 <LL_ADC_IsInternalRegulatorEnabled>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10d      	bne.n	800516a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f043 0210 	orr.w	r2, r3, #16
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515e:	f043 0201 	orr.w	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ff76 	bl	8005060 <LL_ADC_REG_IsConversionOngoing>
 8005174:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 80cf 	bne.w	8005322 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f040 80cb 	bne.w	8005322 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005194:	f043 0202 	orr.w	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff ff23 	bl	8004fec <LL_ADC_IsEnabled>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d115      	bne.n	80051d8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051ac:	4865      	ldr	r0, [pc, #404]	; (8005344 <HAL_ADC_Init+0x298>)
 80051ae:	f7ff ff1d 	bl	8004fec <LL_ADC_IsEnabled>
 80051b2:	4604      	mov	r4, r0
 80051b4:	4864      	ldr	r0, [pc, #400]	; (8005348 <HAL_ADC_Init+0x29c>)
 80051b6:	f7ff ff19 	bl	8004fec <LL_ADC_IsEnabled>
 80051ba:	4603      	mov	r3, r0
 80051bc:	431c      	orrs	r4, r3
 80051be:	4863      	ldr	r0, [pc, #396]	; (800534c <HAL_ADC_Init+0x2a0>)
 80051c0:	f7ff ff14 	bl	8004fec <LL_ADC_IsEnabled>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4323      	orrs	r3, r4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4619      	mov	r1, r3
 80051d2:	485f      	ldr	r0, [pc, #380]	; (8005350 <HAL_ADC_Init+0x2a4>)
 80051d4:	f7ff fd4e 	bl	8004c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	7e5b      	ldrb	r3, [r3, #25]
 80051dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80051e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80051e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80051ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d106      	bne.n	8005214 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	3b01      	subs	r3, #1
 800520c:	045b      	lsls	r3, r3, #17
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4313      	orrs	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4313      	orrs	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	4b47      	ldr	r3, [pc, #284]	; (8005354 <HAL_ADC_Init+0x2a8>)
 8005238:	4013      	ands	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	69b9      	ldr	r1, [r7, #24]
 8005240:	430b      	orrs	r3, r1
 8005242:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff09 	bl	8005060 <LL_ADC_REG_IsConversionOngoing>
 800524e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff ff16 	bl	8005086 <LL_ADC_INJ_IsConversionOngoing>
 800525a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13d      	bne.n	80052de <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13a      	bne.n	80052de <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800526c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005274:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005284:	f023 0302 	bic.w	r3, r3, #2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	430b      	orrs	r3, r1
 8005290:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005298:	2b01      	cmp	r3, #1
 800529a:	d118      	bne.n	80052ce <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80052a6:	f023 0304 	bic.w	r3, r3, #4
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052b2:	4311      	orrs	r1, r2
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80052b8:	4311      	orrs	r1, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80052be:	430a      	orrs	r2, r1
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	611a      	str	r2, [r3, #16]
 80052cc:	e007      	b.n	80052de <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10c      	bne.n	8005300 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f023 010f 	bic.w	r1, r3, #15
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
 80052fe:	e007      	b.n	8005310 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 020f 	bic.w	r2, r2, #15
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	f043 0201 	orr.w	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	655a      	str	r2, [r3, #84]	; 0x54
 8005320:	e007      	b.n	8005332 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f043 0210 	orr.w	r2, r3, #16
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005332:	7ffb      	ldrb	r3, [r7, #31]
}
 8005334:	4618      	mov	r0, r3
 8005336:	3724      	adds	r7, #36	; 0x24
 8005338:	46bd      	mov	sp, r7
 800533a:	bd90      	pop	{r4, r7, pc}
 800533c:	2000013c 	.word	0x2000013c
 8005340:	053e2d63 	.word	0x053e2d63
 8005344:	50040000 	.word	0x50040000
 8005348:	50040100 	.word	0x50040100
 800534c:	50040200 	.word	0x50040200
 8005350:	50040300 	.word	0x50040300
 8005354:	fff0c007 	.word	0xfff0c007

08005358 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005360:	4857      	ldr	r0, [pc, #348]	; (80054c0 <HAL_ADC_Start+0x168>)
 8005362:	f7ff fdb1 	bl	8004ec8 <LL_ADC_GetMultimode>
 8005366:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fe77 	bl	8005060 <LL_ADC_REG_IsConversionOngoing>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	f040 809c 	bne.w	80054b2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_ADC_Start+0x30>
 8005384:	2302      	movs	r3, #2
 8005386:	e097      	b.n	80054b8 <HAL_ADC_Start+0x160>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 ffa9 	bl	80062e8 <ADC_Enable>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8083 	bne.w	80054a8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053aa:	f023 0301 	bic.w	r3, r3, #1
 80053ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a42      	ldr	r2, [pc, #264]	; (80054c4 <HAL_ADC_Start+0x16c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d002      	beq.n	80053c6 <HAL_ADC_Start+0x6e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	e000      	b.n	80053c8 <HAL_ADC_Start+0x70>
 80053c6:	4b40      	ldr	r3, [pc, #256]	; (80054c8 <HAL_ADC_Start+0x170>)
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6812      	ldr	r2, [r2, #0]
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d002      	beq.n	80053d6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d105      	bne.n	80053e2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ee:	d106      	bne.n	80053fe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f4:	f023 0206 	bic.w	r2, r3, #6
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	659a      	str	r2, [r3, #88]	; 0x58
 80053fc:	e002      	b.n	8005404 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	221c      	movs	r2, #28
 800540a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <HAL_ADC_Start+0x16c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d002      	beq.n	8005424 <HAL_ADC_Start+0xcc>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	e000      	b.n	8005426 <HAL_ADC_Start+0xce>
 8005424:	4b28      	ldr	r3, [pc, #160]	; (80054c8 <HAL_ADC_Start+0x170>)
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	4293      	cmp	r3, r2
 800542c:	d008      	beq.n	8005440 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b05      	cmp	r3, #5
 8005438:	d002      	beq.n	8005440 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b09      	cmp	r3, #9
 800543e:	d114      	bne.n	800546a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005456:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fde8 	bl	8005038 <LL_ADC_REG_StartConversion>
 8005468:	e025      	b.n	80054b6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <HAL_ADC_Start+0x16c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d002      	beq.n	8005486 <HAL_ADC_Start+0x12e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	e000      	b.n	8005488 <HAL_ADC_Start+0x130>
 8005486:	4b10      	ldr	r3, [pc, #64]	; (80054c8 <HAL_ADC_Start+0x170>)
 8005488:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00f      	beq.n	80054b6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800549e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
 80054a6:	e006      	b.n	80054b6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80054b0:	e001      	b.n	80054b6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80054b2:	2302      	movs	r3, #2
 80054b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	50040300 	.word	0x50040300
 80054c4:	50040100 	.word	0x50040100
 80054c8:	50040000 	.word	0x50040000

080054cc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054d6:	4866      	ldr	r0, [pc, #408]	; (8005670 <HAL_ADC_PollForConversion+0x1a4>)
 80054d8:	f7ff fcf6 	bl	8004ec8 <LL_ADC_GetMultimode>
 80054dc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d102      	bne.n	80054ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80054e6:	2308      	movs	r3, #8
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e02a      	b.n	8005542 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b05      	cmp	r3, #5
 80054f6:	d002      	beq.n	80054fe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b09      	cmp	r3, #9
 80054fc:	d111      	bne.n	8005522 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	d007      	beq.n	800551c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005510:	f043 0220 	orr.w	r2, r3, #32
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0a4      	b.n	8005666 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800551c:	2304      	movs	r3, #4
 800551e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005520:	e00f      	b.n	8005542 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005522:	4853      	ldr	r0, [pc, #332]	; (8005670 <HAL_ADC_PollForConversion+0x1a4>)
 8005524:	f7ff fcde 	bl	8004ee4 <LL_ADC_GetMultiDMATransfer>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	f043 0220 	orr.w	r2, r3, #32
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e093      	b.n	8005666 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800553e:	2304      	movs	r3, #4
 8005540:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005542:	f7ff fb67 	bl	8004c14 <HAL_GetTick>
 8005546:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005548:	e021      	b.n	800558e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d01d      	beq.n	800558e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005552:	f7ff fb5f 	bl	8004c14 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <HAL_ADC_PollForConversion+0x9c>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d112      	bne.n	800558e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4013      	ands	r3, r2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f043 0204 	orr.w	r2, r3, #4
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e06b      	b.n	8005666 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0d6      	beq.n	800554a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff fbea 	bl	8004d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01c      	beq.n	80055f2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	7e5b      	ldrb	r3, [r3, #25]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d118      	bne.n	80055f2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0308 	and.w	r3, r3, #8
 80055ca:	2b08      	cmp	r3, #8
 80055cc:	d111      	bne.n	80055f2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	f043 0201 	orr.w	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1f      	ldr	r2, [pc, #124]	; (8005674 <HAL_ADC_PollForConversion+0x1a8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d002      	beq.n	8005602 <HAL_ADC_PollForConversion+0x136>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	e000      	b.n	8005604 <HAL_ADC_PollForConversion+0x138>
 8005602:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_ADC_PollForConversion+0x1ac>)
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	4293      	cmp	r3, r2
 800560a:	d008      	beq.n	800561e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b05      	cmp	r3, #5
 8005616:	d002      	beq.n	800561e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2b09      	cmp	r3, #9
 800561c:	d104      	bne.n	8005628 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	e00c      	b.n	8005642 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a11      	ldr	r2, [pc, #68]	; (8005674 <HAL_ADC_PollForConversion+0x1a8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d002      	beq.n	8005638 <HAL_ADC_PollForConversion+0x16c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	e000      	b.n	800563a <HAL_ADC_PollForConversion+0x16e>
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <HAL_ADC_PollForConversion+0x1ac>)
 800563a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d104      	bne.n	8005652 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2208      	movs	r2, #8
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e008      	b.n	8005664 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	220c      	movs	r2, #12
 8005662:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	50040300 	.word	0x50040300
 8005674:	50040100 	.word	0x50040100
 8005678:	50040000 	.word	0x50040000

0800567c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80056a0:	2300      	movs	r3, #0
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056b4:	4882      	ldr	r0, [pc, #520]	; (80058c0 <HAL_ADC_IRQHandler+0x228>)
 80056b6:	f7ff fc07 	bl	8004ec8 <LL_ADC_GetMultimode>
 80056ba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <HAL_ADC_IRQHandler+0x5e>
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d012      	beq.n	80056f6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 ffbd 	bl	8006668 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2202      	movs	r2, #2
 80056f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <HAL_ADC_IRQHandler+0x72>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8083 	beq.w	800581c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d07d      	beq.n	800581c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005724:	f003 0310 	and.w	r3, r3, #16
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005730:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fb22 	bl	8004d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d062      	beq.n	800580e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a5d      	ldr	r2, [pc, #372]	; (80058c4 <HAL_ADC_IRQHandler+0x22c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d002      	beq.n	8005758 <HAL_ADC_IRQHandler+0xc0>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	e000      	b.n	800575a <HAL_ADC_IRQHandler+0xc2>
 8005758:	4b5b      	ldr	r3, [pc, #364]	; (80058c8 <HAL_ADC_IRQHandler+0x230>)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	4293      	cmp	r3, r2
 8005760:	d008      	beq.n	8005774 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b05      	cmp	r3, #5
 800576c:	d002      	beq.n	8005774 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b09      	cmp	r3, #9
 8005772:	d104      	bne.n	800577e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	623b      	str	r3, [r7, #32]
 800577c:	e00c      	b.n	8005798 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a50      	ldr	r2, [pc, #320]	; (80058c4 <HAL_ADC_IRQHandler+0x22c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d002      	beq.n	800578e <HAL_ADC_IRQHandler+0xf6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	e000      	b.n	8005790 <HAL_ADC_IRQHandler+0xf8>
 800578e:	4b4e      	ldr	r3, [pc, #312]	; (80058c8 <HAL_ADC_IRQHandler+0x230>)
 8005790:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d135      	bne.n	800580e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d12e      	bne.n	800580e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fc53 	bl	8005060 <LL_ADC_REG_IsConversionOngoing>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11a      	bne.n	80057f6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 020c 	bic.w	r2, r2, #12
 80057ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d112      	bne.n	800580e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ec:	f043 0201 	orr.w	r2, r3, #1
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
 80057f4:	e00b      	b.n	800580e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	f043 0210 	orr.w	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	f043 0201 	orr.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f95c 	bl	8005acc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	220c      	movs	r2, #12
 800581a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b00      	cmp	r3, #0
 8005824:	d004      	beq.n	8005830 <HAL_ADC_IRQHandler+0x198>
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 809f 	beq.w	800597a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 8099 	beq.w	800597a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff facd 	bl	8004e04 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800586a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff fa88 	bl	8004d86 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005876:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <HAL_ADC_IRQHandler+0x22c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d002      	beq.n	8005888 <HAL_ADC_IRQHandler+0x1f0>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	e000      	b.n	800588a <HAL_ADC_IRQHandler+0x1f2>
 8005888:	4b0f      	ldr	r3, [pc, #60]	; (80058c8 <HAL_ADC_IRQHandler+0x230>)
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	4293      	cmp	r3, r2
 8005890:	d008      	beq.n	80058a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2b06      	cmp	r3, #6
 800589c:	d002      	beq.n	80058a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b07      	cmp	r3, #7
 80058a2:	d104      	bne.n	80058ae <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	623b      	str	r3, [r7, #32]
 80058ac:	e013      	b.n	80058d6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <HAL_ADC_IRQHandler+0x22c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d009      	beq.n	80058cc <HAL_ADC_IRQHandler+0x234>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	e007      	b.n	80058ce <HAL_ADC_IRQHandler+0x236>
 80058be:	bf00      	nop
 80058c0:	50040300 	.word	0x50040300
 80058c4:	50040100 	.word	0x50040100
 80058c8:	50040000 	.word	0x50040000
 80058cc:	4b7d      	ldr	r3, [pc, #500]	; (8005ac4 <HAL_ADC_IRQHandler+0x42c>)
 80058ce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d047      	beq.n	800596c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_ADC_IRQHandler+0x25e>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d03f      	beq.n	800596c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d13a      	bne.n	800596c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d133      	bne.n	800596c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12e      	bne.n	800596c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fbb7 	bl	8005086 <LL_ADC_INJ_IsConversionOngoing>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d11a      	bne.n	8005954 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800592c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d112      	bne.n	800596c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	f043 0201 	orr.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	655a      	str	r2, [r3, #84]	; 0x54
 8005952:	e00b      	b.n	800596c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005958:	f043 0210 	orr.w	r2, r3, #16
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	f043 0201 	orr.w	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fe53 	bl	8006618 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2260      	movs	r2, #96	; 0x60
 8005978:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_ADC_IRQHandler+0x310>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f8a0 	bl	8005ae0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d012      	beq.n	80059d8 <HAL_ADC_IRQHandler+0x340>
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fe39 	bl	8006640 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059d6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d012      	beq.n	8005a08 <HAL_ADC_IRQHandler+0x370>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00d      	beq.n	8005a08 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fe2b 	bl	8006654 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d036      	beq.n	8005a80 <HAL_ADC_IRQHandler+0x3e8>
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d031      	beq.n	8005a80 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d102      	bne.n	8005a2a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8005a24:	2301      	movs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	e014      	b.n	8005a54 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005a30:	4825      	ldr	r0, [pc, #148]	; (8005ac8 <HAL_ADC_IRQHandler+0x430>)
 8005a32:	f7ff fa57 	bl	8004ee4 <LL_ADC_GetMultiDMATransfer>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00b      	beq.n	8005a54 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a40:	e008      	b.n	8005a54 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8005a50:	2301      	movs	r3, #1
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10e      	bne.n	8005a78 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6a:	f043 0202 	orr.w	r2, r3, #2
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f83e 	bl	8005af4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <HAL_ADC_IRQHandler+0x424>
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d013      	beq.n	8005abc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a98:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	f043 0208 	orr.w	r2, r3, #8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ab4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fdb8 	bl	800662c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005abc:	bf00      	nop
 8005abe:	3728      	adds	r7, #40	; 0x28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	50040000 	.word	0x50040000
 8005ac8:	50040300 	.word	0x50040300

08005acc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b0b6      	sub	sp, #216	; 0xd8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_ADC_ConfigChannel+0x22>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e3c7      	b.n	80062ba <HAL_ADC_ConfigChannel+0x7b2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff fa92 	bl	8005060 <LL_ADC_REG_IsConversionOngoing>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 83a8 	bne.w	8006294 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2b05      	cmp	r3, #5
 8005b4a:	d824      	bhi.n	8005b96 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	3b02      	subs	r3, #2
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d81b      	bhi.n	8005b8e <HAL_ADC_ConfigChannel+0x86>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <HAL_ADC_ConfigChannel+0x54>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b75 	.word	0x08005b75
 8005b64:	08005b7d 	.word	0x08005b7d
 8005b68:	08005b85 	.word	0x08005b85
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	220c      	movs	r2, #12
 8005b70:	605a      	str	r2, [r3, #4]
          break;
 8005b72:	e011      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2212      	movs	r2, #18
 8005b78:	605a      	str	r2, [r3, #4]
          break;
 8005b7a:	e00d      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2218      	movs	r2, #24
 8005b80:	605a      	str	r2, [r3, #4]
          break;
 8005b82:	e009      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b8a:	605a      	str	r2, [r3, #4]
          break;
 8005b8c:	e004      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2206      	movs	r2, #6
 8005b92:	605a      	str	r2, [r3, #4]
          break;
 8005b94:	e000      	b.n	8005b98 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005b96:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6859      	ldr	r1, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f7ff f901 	bl	8004dac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fa56 	bl	8005060 <LL_ADC_REG_IsConversionOngoing>
 8005bb4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fa62 	bl	8005086 <LL_ADC_INJ_IsConversionOngoing>
 8005bc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f040 81a6 	bne.w	8005f1c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 81a1 	bne.w	8005f1c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7ff f91f 	bl	8004e2a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	08db      	lsrs	r3, r3, #3
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005c02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d00a      	beq.n	8005c24 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6818      	ldr	r0, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	6919      	ldr	r1, [r3, #16]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c1e:	f7ff f85d 	bl	8004cdc <LL_ADC_SetOffset>
 8005c22:	e17b      	b.n	8005f1c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff f87a 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <HAL_ADC_ConfigChannel+0x148>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2100      	movs	r1, #0
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff f86f 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005c46:	4603      	mov	r3, r0
 8005c48:	0e9b      	lsrs	r3, r3, #26
 8005c4a:	f003 021f 	and.w	r2, r3, #31
 8005c4e:	e01e      	b.n	8005c8e <HAL_ADC_ConfigChannel+0x186>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff f864 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c66:	fa93 f3a3 	rbit	r3, r3
 8005c6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005c7e:	2320      	movs	r3, #32
 8005c80:	e004      	b.n	8005c8c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c86:	fab3 f383 	clz	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d105      	bne.n	8005ca6 <HAL_ADC_ConfigChannel+0x19e>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	0e9b      	lsrs	r3, r3, #26
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	e018      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x1d0>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cb2:	fa93 f3a3 	rbit	r3, r3
 8005cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005cca:	2320      	movs	r3, #32
 8005ccc:	e004      	b.n	8005cd8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cd2:	fab3 f383 	clz	r3, r3
 8005cd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d106      	bne.n	8005cea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f7ff f833 	bl	8004d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2101      	movs	r1, #1
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff f817 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x20e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2101      	movs	r1, #1
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7ff f80c 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	0e9b      	lsrs	r3, r3, #26
 8005d10:	f003 021f 	and.w	r2, r3, #31
 8005d14:	e01e      	b.n	8005d54 <HAL_ADC_ConfigChannel+0x24c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff f801 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005d22:	4603      	mov	r3, r0
 8005d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d2c:	fa93 f3a3 	rbit	r3, r3
 8005d30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005d34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005d3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005d44:	2320      	movs	r3, #32
 8005d46:	e004      	b.n	8005d52 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d4c:	fab3 f383 	clz	r3, r3
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d105      	bne.n	8005d6c <HAL_ADC_ConfigChannel+0x264>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	0e9b      	lsrs	r3, r3, #26
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	e018      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x296>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d78:	fa93 f3a3 	rbit	r3, r3
 8005d7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005d90:	2320      	movs	r3, #32
 8005d92:	e004      	b.n	8005d9e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d98:	fab3 f383 	clz	r3, r3
 8005d9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d106      	bne.n	8005db0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2200      	movs	r2, #0
 8005da8:	2101      	movs	r1, #1
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fe ffd0 	bl	8004d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2102      	movs	r1, #2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe ffb4 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10a      	bne.n	8005ddc <HAL_ADC_ConfigChannel+0x2d4>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2102      	movs	r1, #2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fe ffa9 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	0e9b      	lsrs	r3, r3, #26
 8005dd6:	f003 021f 	and.w	r2, r3, #31
 8005dda:	e01e      	b.n	8005e1a <HAL_ADC_ConfigChannel+0x312>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2102      	movs	r1, #2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe ff9e 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005df2:	fa93 f3a3 	rbit	r3, r3
 8005df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005e02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	e004      	b.n	8005e18 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e12:	fab3 f383 	clz	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <HAL_ADC_ConfigChannel+0x32a>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	0e9b      	lsrs	r3, r3, #26
 8005e2c:	f003 031f 	and.w	r3, r3, #31
 8005e30:	e016      	b.n	8005e60 <HAL_ADC_ConfigChannel+0x358>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e3e:	fa93 f3a3 	rbit	r3, r3
 8005e42:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005e44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d101      	bne.n	8005e56 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005e52:	2320      	movs	r3, #32
 8005e54:	e004      	b.n	8005e60 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e5a:	fab3 f383 	clz	r3, r3
 8005e5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d106      	bne.n	8005e72 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2102      	movs	r1, #2
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fe ff6f 	bl	8004d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2103      	movs	r1, #3
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe ff53 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <HAL_ADC_ConfigChannel+0x396>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2103      	movs	r1, #3
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe ff48 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005e94:	4603      	mov	r3, r0
 8005e96:	0e9b      	lsrs	r3, r3, #26
 8005e98:	f003 021f 	and.w	r2, r3, #31
 8005e9c:	e017      	b.n	8005ece <HAL_ADC_ConfigChannel+0x3c6>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2103      	movs	r1, #3
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fe ff3d 	bl	8004d24 <LL_ADC_GetOffsetChannel>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb0:	fa93 f3a3 	rbit	r3, r3
 8005eb4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	e003      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005ec4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec6:	fab3 f383 	clz	r3, r3
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <HAL_ADC_ConfigChannel+0x3de>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	0e9b      	lsrs	r3, r3, #26
 8005ee0:	f003 031f 	and.w	r3, r3, #31
 8005ee4:	e011      	b.n	8005f0a <HAL_ADC_ConfigChannel+0x402>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eee:	fa93 f3a3 	rbit	r3, r3
 8005ef2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8005efe:	2320      	movs	r3, #32
 8005f00:	e003      	b.n	8005f0a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f04:	fab3 f383 	clz	r3, r3
 8005f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d106      	bne.n	8005f1c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2200      	movs	r2, #0
 8005f14:	2103      	movs	r1, #3
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe ff1a 	bl	8004d50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff f863 	bl	8004fec <LL_ADC_IsEnabled>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 813f 	bne.w	80061ac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6819      	ldr	r1, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f7fe ffa0 	bl	8004e80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a8e      	ldr	r2, [pc, #568]	; (8006180 <HAL_ADC_ConfigChannel+0x678>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	f040 8130 	bne.w	80061ac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10b      	bne.n	8005f74 <HAL_ADC_ConfigChannel+0x46c>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	0e9b      	lsrs	r3, r3, #26
 8005f62:	3301      	adds	r3, #1
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2b09      	cmp	r3, #9
 8005f6a:	bf94      	ite	ls
 8005f6c:	2301      	movls	r3, #1
 8005f6e:	2300      	movhi	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	e019      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x4a0>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7c:	fa93 f3a3 	rbit	r3, r3
 8005f80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	e003      	b.n	8005f98 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f92:	fab3 f383 	clz	r3, r3
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	3301      	adds	r3, #1
 8005f9a:	f003 031f 	and.w	r3, r3, #31
 8005f9e:	2b09      	cmp	r3, #9
 8005fa0:	bf94      	ite	ls
 8005fa2:	2301      	movls	r3, #1
 8005fa4:	2300      	movhi	r3, #0
 8005fa6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d079      	beq.n	80060a0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d107      	bne.n	8005fc8 <HAL_ADC_ConfigChannel+0x4c0>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	0e9b      	lsrs	r3, r3, #26
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	069b      	lsls	r3, r3, #26
 8005fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fc6:	e015      	b.n	8005ff4 <HAL_ADC_ConfigChannel+0x4ec>
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd0:	fa93 f3a3 	rbit	r3, r3
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	e003      	b.n	8005fec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe6:	fab3 f383 	clz	r3, r3
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	3301      	adds	r3, #1
 8005fee:	069b      	lsls	r3, r3, #26
 8005ff0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d109      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x50c>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	0e9b      	lsrs	r3, r3, #26
 8006006:	3301      	adds	r3, #1
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	e017      	b.n	8006044 <HAL_ADC_ConfigChannel+0x53c>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800601c:	fa93 f3a3 	rbit	r3, r3
 8006020:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006024:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800602c:	2320      	movs	r3, #32
 800602e:	e003      	b.n	8006038 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006032:	fab3 f383 	clz	r3, r3
 8006036:	b2db      	uxtb	r3, r3
 8006038:	3301      	adds	r3, #1
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2101      	movs	r1, #1
 8006040:	fa01 f303 	lsl.w	r3, r1, r3
 8006044:	ea42 0103 	orr.w	r1, r2, r3
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <HAL_ADC_ConfigChannel+0x562>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	0e9b      	lsrs	r3, r3, #26
 800605a:	3301      	adds	r3, #1
 800605c:	f003 021f 	and.w	r2, r3, #31
 8006060:	4613      	mov	r3, r2
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	4413      	add	r3, r2
 8006066:	051b      	lsls	r3, r3, #20
 8006068:	e018      	b.n	800609c <HAL_ADC_ConfigChannel+0x594>
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800607c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607e:	2b00      	cmp	r3, #0
 8006080:	d101      	bne.n	8006086 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006082:	2320      	movs	r3, #32
 8006084:	e003      	b.n	800608e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006088:	fab3 f383 	clz	r3, r3
 800608c:	b2db      	uxtb	r3, r3
 800608e:	3301      	adds	r3, #1
 8006090:	f003 021f 	and.w	r2, r3, #31
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800609c:	430b      	orrs	r3, r1
 800609e:	e080      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d107      	bne.n	80060bc <HAL_ADC_ConfigChannel+0x5b4>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0e9b      	lsrs	r3, r3, #26
 80060b2:	3301      	adds	r3, #1
 80060b4:	069b      	lsls	r3, r3, #26
 80060b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060ba:	e015      	b.n	80060e8 <HAL_ADC_ConfigChannel+0x5e0>
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	fa93 f3a3 	rbit	r3, r3
 80060c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80060ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80060d4:	2320      	movs	r3, #32
 80060d6:	e003      	b.n	80060e0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	fab3 f383 	clz	r3, r3
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	3301      	adds	r3, #1
 80060e2:	069b      	lsls	r3, r3, #26
 80060e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d109      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x600>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	0e9b      	lsrs	r3, r3, #26
 80060fa:	3301      	adds	r3, #1
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	2101      	movs	r1, #1
 8006102:	fa01 f303 	lsl.w	r3, r1, r3
 8006106:	e017      	b.n	8006138 <HAL_ADC_ConfigChannel+0x630>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	fa93 f3a3 	rbit	r3, r3
 8006114:	61fb      	str	r3, [r7, #28]
  return result;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006120:	2320      	movs	r3, #32
 8006122:	e003      	b.n	800612c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	fab3 f383 	clz	r3, r3
 800612a:	b2db      	uxtb	r3, r3
 800612c:	3301      	adds	r3, #1
 800612e:	f003 031f 	and.w	r3, r3, #31
 8006132:	2101      	movs	r1, #1
 8006134:	fa01 f303 	lsl.w	r3, r1, r3
 8006138:	ea42 0103 	orr.w	r1, r2, r3
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10d      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x65c>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	0e9b      	lsrs	r3, r3, #26
 800614e:	3301      	adds	r3, #1
 8006150:	f003 021f 	and.w	r2, r3, #31
 8006154:	4613      	mov	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	4413      	add	r3, r2
 800615a:	3b1e      	subs	r3, #30
 800615c:	051b      	lsls	r3, r3, #20
 800615e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006162:	e01d      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x698>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	fa93 f3a3 	rbit	r3, r3
 8006170:	613b      	str	r3, [r7, #16]
  return result;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800617c:	2320      	movs	r3, #32
 800617e:	e005      	b.n	800618c <HAL_ADC_ConfigChannel+0x684>
 8006180:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	fab3 f383 	clz	r3, r3
 800618a:	b2db      	uxtb	r3, r3
 800618c:	3301      	adds	r3, #1
 800618e:	f003 021f 	and.w	r2, r3, #31
 8006192:	4613      	mov	r3, r2
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4413      	add	r3, r2
 8006198:	3b1e      	subs	r3, #30
 800619a:	051b      	lsls	r3, r3, #20
 800619c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061a0:	430b      	orrs	r3, r1
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	6892      	ldr	r2, [r2, #8]
 80061a6:	4619      	mov	r1, r3
 80061a8:	f7fe fe3f 	bl	8004e2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4b44      	ldr	r3, [pc, #272]	; (80062c4 <HAL_ADC_ConfigChannel+0x7bc>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d07a      	beq.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061b8:	4843      	ldr	r0, [pc, #268]	; (80062c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80061ba:	f7fe fd81 	bl	8004cc0 <LL_ADC_GetCommonPathInternalCh>
 80061be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a41      	ldr	r2, [pc, #260]	; (80062cc <HAL_ADC_ConfigChannel+0x7c4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d12c      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d126      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a3c      	ldr	r2, [pc, #240]	; (80062d0 <HAL_ADC_ConfigChannel+0x7c8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d004      	beq.n	80061ec <HAL_ADC_ConfigChannel+0x6e4>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a3b      	ldr	r2, [pc, #236]	; (80062d4 <HAL_ADC_ConfigChannel+0x7cc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d15d      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061f4:	4619      	mov	r1, r3
 80061f6:	4834      	ldr	r0, [pc, #208]	; (80062c8 <HAL_ADC_ConfigChannel+0x7c0>)
 80061f8:	f7fe fd4f 	bl	8004c9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061fc:	4b36      	ldr	r3, [pc, #216]	; (80062d8 <HAL_ADC_ConfigChannel+0x7d0>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	099b      	lsrs	r3, r3, #6
 8006202:	4a36      	ldr	r2, [pc, #216]	; (80062dc <HAL_ADC_ConfigChannel+0x7d4>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	099b      	lsrs	r3, r3, #6
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006216:	e002      	b.n	800621e <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3b01      	subs	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f9      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006224:	e040      	b.n	80062a8 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2d      	ldr	r2, [pc, #180]	; (80062e0 <HAL_ADC_ConfigChannel+0x7d8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d118      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x75a>
 8006230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d112      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <HAL_ADC_ConfigChannel+0x7c8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_ADC_ConfigChannel+0x748>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <HAL_ADC_ConfigChannel+0x7cc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d12d      	bne.n	80062ac <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006250:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006254:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006258:	4619      	mov	r1, r3
 800625a:	481b      	ldr	r0, [pc, #108]	; (80062c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800625c:	f7fe fd1d 	bl	8004c9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006260:	e024      	b.n	80062ac <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d120      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800626c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11a      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <HAL_ADC_ConfigChannel+0x7c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d115      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800628a:	4619      	mov	r1, r3
 800628c:	480e      	ldr	r0, [pc, #56]	; (80062c8 <HAL_ADC_ConfigChannel+0x7c0>)
 800628e:	f7fe fd04 	bl	8004c9a <LL_ADC_SetCommonPathInternalCh>
 8006292:	e00c      	b.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	f043 0220 	orr.w	r2, r3, #32
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80062a6:	e002      	b.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062a8:	bf00      	nop
 80062aa:	e000      	b.n	80062ae <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80062ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80062b6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	37d8      	adds	r7, #216	; 0xd8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	80080000 	.word	0x80080000
 80062c8:	50040300 	.word	0x50040300
 80062cc:	c7520000 	.word	0xc7520000
 80062d0:	50040000 	.word	0x50040000
 80062d4:	50040200 	.word	0x50040200
 80062d8:	2000013c 	.word	0x2000013c
 80062dc:	053e2d63 	.word	0x053e2d63
 80062e0:	cb840000 	.word	0xcb840000
 80062e4:	80000001 	.word	0x80000001

080062e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80062f0:	2300      	movs	r3, #0
 80062f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fe fe77 	bl	8004fec <LL_ADC_IsEnabled>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d169      	bne.n	80063d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <ADC_Enable+0xfc>)
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006316:	f043 0210 	orr.w	r2, r3, #16
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006322:	f043 0201 	orr.w	r2, r3, #1
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e055      	b.n	80063da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fe32 	bl	8004f9c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006338:	482b      	ldr	r0, [pc, #172]	; (80063e8 <ADC_Enable+0x100>)
 800633a:	f7fe fcc1 	bl	8004cc0 <LL_ADC_GetCommonPathInternalCh>
 800633e:	4603      	mov	r3, r0
 8006340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d013      	beq.n	8006370 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <ADC_Enable+0x104>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	099b      	lsrs	r3, r3, #6
 800634e:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <ADC_Enable+0x108>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	099b      	lsrs	r3, r3, #6
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006362:	e002      	b.n	800636a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	3b01      	subs	r3, #1
 8006368:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f9      	bne.n	8006364 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006370:	f7fe fc50 	bl	8004c14 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006376:	e028      	b.n	80063ca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe fe35 	bl	8004fec <LL_ADC_IsEnabled>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d104      	bne.n	8006392 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fe05 	bl	8004f9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006392:	f7fe fc3f 	bl	8004c14 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d914      	bls.n	80063ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d00d      	beq.n	80063ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b2:	f043 0210 	orr.w	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e007      	b.n	80063da <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d1cf      	bne.n	8006378 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	8000003f 	.word	0x8000003f
 80063e8:	50040300 	.word	0x50040300
 80063ec:	2000013c 	.word	0x2000013c
 80063f0:	053e2d63 	.word	0x053e2d63

080063f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7fe fe06 	bl	8005012 <LL_ADC_IsDisableOngoing>
 8006406:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe fded 	bl	8004fec <LL_ADC_IsEnabled>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d047      	beq.n	80064a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d144      	bne.n	80064a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f003 030d 	and.w	r3, r3, #13
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10c      	bne.n	8006446 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe fdc7 	bl	8004fc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2203      	movs	r2, #3
 800643c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800643e:	f7fe fbe9 	bl	8004c14 <HAL_GetTick>
 8006442:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006444:	e029      	b.n	800649a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644a:	f043 0210 	orr.w	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e023      	b.n	80064aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006462:	f7fe fbd7 	bl	8004c14 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d914      	bls.n	800649a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	f043 0210 	orr.w	r2, r3, #16
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648e:	f043 0201 	orr.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e007      	b.n	80064aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1dc      	bne.n	8006462 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <LL_ADC_IsEnabled>:
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <LL_ADC_IsEnabled+0x18>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <LL_ADC_IsEnabled+0x1a>
 80064ca:	2300      	movs	r3, #0
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <LL_ADC_StartCalibration>:
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80064ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80064ee:	683a      	ldr	r2, [r7, #0]
 80064f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80064f4:	4313      	orrs	r3, r2
 80064f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	609a      	str	r2, [r3, #8]
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_ADC_IsCalibrationOnGoing>:
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800651a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800651e:	d101      	bne.n	8006524 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006520:	2301      	movs	r3, #1
 8006522:	e000      	b.n	8006526 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <LL_ADC_REG_IsConversionOngoing>:
{
 8006532:	b480      	push	{r7}
 8006534:	b083      	sub	sp, #12
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b04      	cmp	r3, #4
 8006544:	d101      	bne.n	800654a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006562:	2300      	movs	r3, #0
 8006564:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_ADCEx_Calibration_Start+0x1c>
 8006570:	2302      	movs	r3, #2
 8006572:	e04d      	b.n	8006610 <HAL_ADCEx_Calibration_Start+0xb8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff ff39 	bl	80063f4 <ADC_Disable>
 8006582:	4603      	mov	r3, r0
 8006584:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d136      	bne.n	80065fa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006590:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006594:	f023 0302 	bic.w	r3, r3, #2
 8006598:	f043 0202 	orr.w	r2, r3, #2
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff ff96 	bl	80064d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80065ac:	e014      	b.n	80065d8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80065ba:	d30d      	bcc.n	80065d8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c0:	f023 0312 	bic.w	r3, r3, #18
 80065c4:	f043 0210 	orr.w	r2, r3, #16
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e01b      	b.n	8006610 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff ff94 	bl	800650a <LL_ADC_IsCalibrationOnGoing>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e2      	bne.n	80065ae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ec:	f023 0303 	bic.w	r3, r3, #3
 80065f0:	f043 0201 	orr.w	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	655a      	str	r2, [r3, #84]	; 0x54
 80065f8:	e005      	b.n	8006606 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	f043 0210 	orr.w	r2, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b09f      	sub	sp, #124	; 0x7c
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006696:	2302      	movs	r3, #2
 8006698:	e093      	b.n	80067c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80066a2:	2300      	movs	r3, #0
 80066a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80066a6:	2300      	movs	r3, #0
 80066a8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a47      	ldr	r2, [pc, #284]	; (80067cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d102      	bne.n	80066ba <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066b4:	4b46      	ldr	r3, [pc, #280]	; (80067d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80066b6:	60bb      	str	r3, [r7, #8]
 80066b8:	e001      	b.n	80066be <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c8:	f043 0220 	orr.w	r2, r3, #32
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e072      	b.n	80067c2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff ff27 	bl	8006532 <LL_ADC_REG_IsConversionOngoing>
 80066e4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff ff21 	bl	8006532 <LL_ADC_REG_IsConversionOngoing>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d154      	bne.n	80067a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80066f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d151      	bne.n	80067a0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80066fc:	4b35      	ldr	r3, [pc, #212]	; (80067d4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80066fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d02c      	beq.n	8006762 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6859      	ldr	r1, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800671a:	035b      	lsls	r3, r3, #13
 800671c:	430b      	orrs	r3, r1
 800671e:	431a      	orrs	r2, r3
 8006720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006722:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006724:	4829      	ldr	r0, [pc, #164]	; (80067cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006726:	f7ff fec4 	bl	80064b2 <LL_ADC_IsEnabled>
 800672a:	4604      	mov	r4, r0
 800672c:	4828      	ldr	r0, [pc, #160]	; (80067d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800672e:	f7ff fec0 	bl	80064b2 <LL_ADC_IsEnabled>
 8006732:	4603      	mov	r3, r0
 8006734:	431c      	orrs	r4, r3
 8006736:	4828      	ldr	r0, [pc, #160]	; (80067d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006738:	f7ff febb 	bl	80064b2 <LL_ADC_IsEnabled>
 800673c:	4603      	mov	r3, r0
 800673e:	4323      	orrs	r3, r4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d137      	bne.n	80067b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800674c:	f023 030f 	bic.w	r3, r3, #15
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	6811      	ldr	r1, [r2, #0]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	6892      	ldr	r2, [r2, #8]
 8006758:	430a      	orrs	r2, r1
 800675a:	431a      	orrs	r2, r3
 800675c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006760:	e028      	b.n	80067b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800676a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800676c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800676e:	4817      	ldr	r0, [pc, #92]	; (80067cc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006770:	f7ff fe9f 	bl	80064b2 <LL_ADC_IsEnabled>
 8006774:	4604      	mov	r4, r0
 8006776:	4816      	ldr	r0, [pc, #88]	; (80067d0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006778:	f7ff fe9b 	bl	80064b2 <LL_ADC_IsEnabled>
 800677c:	4603      	mov	r3, r0
 800677e:	431c      	orrs	r4, r3
 8006780:	4815      	ldr	r0, [pc, #84]	; (80067d8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006782:	f7ff fe96 	bl	80064b2 <LL_ADC_IsEnabled>
 8006786:	4603      	mov	r3, r0
 8006788:	4323      	orrs	r3, r4
 800678a:	2b00      	cmp	r3, #0
 800678c:	d112      	bne.n	80067b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800678e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006796:	f023 030f 	bic.w	r3, r3, #15
 800679a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800679c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800679e:	e009      	b.n	80067b4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	f043 0220 	orr.w	r2, r3, #32
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80067b2:	e000      	b.n	80067b6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	377c      	adds	r7, #124	; 0x7c
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}
 80067ca:	bf00      	nop
 80067cc:	50040000 	.word	0x50040000
 80067d0:	50040100 	.word	0x50040100
 80067d4:	50040300 	.word	0x50040300
 80067d8:	50040200 	.word	0x50040200

080067dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067ec:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067f8:	4013      	ands	r3, r2
 80067fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800680c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800680e:	4a04      	ldr	r2, [pc, #16]	; (8006820 <__NVIC_SetPriorityGrouping+0x44>)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	60d3      	str	r3, [r2, #12]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	e000ed00 	.word	0xe000ed00

08006824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006824:	b480      	push	{r7}
 8006826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006828:	4b04      	ldr	r3, [pc, #16]	; (800683c <__NVIC_GetPriorityGrouping+0x18>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	f003 0307 	and.w	r3, r3, #7
}
 8006832:	4618      	mov	r0, r3
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000ed00 	.word	0xe000ed00

08006840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800684a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684e:	2b00      	cmp	r3, #0
 8006850:	db0b      	blt.n	800686a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	f003 021f 	and.w	r2, r3, #31
 8006858:	4907      	ldr	r1, [pc, #28]	; (8006878 <__NVIC_EnableIRQ+0x38>)
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	2001      	movs	r0, #1
 8006862:	fa00 f202 	lsl.w	r2, r0, r2
 8006866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	e000e100 	.word	0xe000e100

0800687c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	4603      	mov	r3, r0
 8006884:	6039      	str	r1, [r7, #0]
 8006886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800688c:	2b00      	cmp	r3, #0
 800688e:	db0a      	blt.n	80068a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	b2da      	uxtb	r2, r3
 8006894:	490c      	ldr	r1, [pc, #48]	; (80068c8 <__NVIC_SetPriority+0x4c>)
 8006896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689a:	0112      	lsls	r2, r2, #4
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	440b      	add	r3, r1
 80068a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068a4:	e00a      	b.n	80068bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4908      	ldr	r1, [pc, #32]	; (80068cc <__NVIC_SetPriority+0x50>)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	3b04      	subs	r3, #4
 80068b4:	0112      	lsls	r2, r2, #4
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	440b      	add	r3, r1
 80068ba:	761a      	strb	r2, [r3, #24]
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000e100 	.word	0xe000e100
 80068cc:	e000ed00 	.word	0xe000ed00

080068d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b089      	sub	sp, #36	; 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f1c3 0307 	rsb	r3, r3, #7
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	bf28      	it	cs
 80068ee:	2304      	movcs	r3, #4
 80068f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2b06      	cmp	r3, #6
 80068f8:	d902      	bls.n	8006900 <NVIC_EncodePriority+0x30>
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3b03      	subs	r3, #3
 80068fe:	e000      	b.n	8006902 <NVIC_EncodePriority+0x32>
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006904:	f04f 32ff 	mov.w	r2, #4294967295
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43da      	mvns	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	401a      	ands	r2, r3
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006918:	f04f 31ff 	mov.w	r1, #4294967295
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	43d9      	mvns	r1, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006928:	4313      	orrs	r3, r2
         );
}
 800692a:	4618      	mov	r0, r3
 800692c:	3724      	adds	r7, #36	; 0x24
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
	...

08006938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3b01      	subs	r3, #1
 8006944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006948:	d301      	bcc.n	800694e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800694a:	2301      	movs	r3, #1
 800694c:	e00f      	b.n	800696e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800694e:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <SysTick_Config+0x40>)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b01      	subs	r3, #1
 8006954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006956:	210f      	movs	r1, #15
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	f7ff ff8e 	bl	800687c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <SysTick_Config+0x40>)
 8006962:	2200      	movs	r2, #0
 8006964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006966:	4b04      	ldr	r3, [pc, #16]	; (8006978 <SysTick_Config+0x40>)
 8006968:	2207      	movs	r2, #7
 800696a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	e000e010 	.word	0xe000e010

0800697c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff ff29 	bl	80067dc <__NVIC_SetPriorityGrouping>
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	4603      	mov	r3, r0
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	607a      	str	r2, [r7, #4]
 800699e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069a4:	f7ff ff3e 	bl	8006824 <__NVIC_GetPriorityGrouping>
 80069a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	6978      	ldr	r0, [r7, #20]
 80069b0:	f7ff ff8e 	bl	80068d0 <NVIC_EncodePriority>
 80069b4:	4602      	mov	r2, r0
 80069b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ff5d 	bl	800687c <__NVIC_SetPriority>
}
 80069c2:	bf00      	nop
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b082      	sub	sp, #8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	4603      	mov	r3, r0
 80069d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff ff31 	bl	8006840 <__NVIC_EnableIRQ>
}
 80069de:	bf00      	nop
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}

080069e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b082      	sub	sp, #8
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff ffa2 	bl	8006938 <SysTick_Config>
 80069f4:	4603      	mov	r3, r0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d008      	beq.n	8006a28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e022      	b.n	8006a6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 020e 	bic.w	r2, r2, #14
 8006a36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 0201 	bic.w	r2, r2, #1
 8006a46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4c:	f003 021c 	and.w	r2, r3, #28
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a54:	2101      	movs	r1, #1
 8006a56:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d005      	beq.n	8006a9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2204      	movs	r2, #4
 8006a96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	73fb      	strb	r3, [r7, #15]
 8006a9c:	e029      	b.n	8006af2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 020e 	bic.w	r2, r2, #14
 8006aac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0201 	bic.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	f003 021c 	and.w	r2, r3, #28
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2101      	movs	r1, #1
 8006acc:	fa01 f202 	lsl.w	r2, r1, r2
 8006ad0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	4798      	blx	r3
    }
  }
  return status;
 8006af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b0a:	e17f      	b.n	8006e0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	2101      	movs	r1, #1
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	fa01 f303 	lsl.w	r3, r1, r3
 8006b18:	4013      	ands	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8171 	beq.w	8006e06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f003 0303 	and.w	r3, r3, #3
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d005      	beq.n	8006b3c <HAL_GPIO_Init+0x40>
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f003 0303 	and.w	r3, r3, #3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d130      	bne.n	8006b9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	2203      	movs	r2, #3
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68da      	ldr	r2, [r3, #12]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b72:	2201      	movs	r2, #1
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	fa02 f303 	lsl.w	r3, r2, r3
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4013      	ands	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	f003 0201 	and.w	r2, r3, #1
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d118      	bne.n	8006bdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f003 0201 	and.w	r2, r3, #1
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d017      	beq.n	8006c18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d123      	bne.n	8006c6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	08da      	lsrs	r2, r3, #3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3208      	adds	r2, #8
 8006c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	220f      	movs	r2, #15
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	43db      	mvns	r3, r3
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4013      	ands	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	fa02 f303 	lsl.w	r3, r2, r3
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	08da      	lsrs	r2, r3, #3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	3208      	adds	r2, #8
 8006c66:	6939      	ldr	r1, [r7, #16]
 8006c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	005b      	lsls	r3, r3, #1
 8006c76:	2203      	movs	r2, #3
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	43db      	mvns	r3, r3
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	4013      	ands	r3, r2
 8006c82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 0203 	and.w	r2, r3, #3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	005b      	lsls	r3, r3, #1
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80ac 	beq.w	8006e06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cae:	4b5f      	ldr	r3, [pc, #380]	; (8006e2c <HAL_GPIO_Init+0x330>)
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb2:	4a5e      	ldr	r2, [pc, #376]	; (8006e2c <HAL_GPIO_Init+0x330>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8006cba:	4b5c      	ldr	r3, [pc, #368]	; (8006e2c <HAL_GPIO_Init+0x330>)
 8006cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006cc6:	4a5a      	ldr	r2, [pc, #360]	; (8006e30 <HAL_GPIO_Init+0x334>)
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	089b      	lsrs	r3, r3, #2
 8006ccc:	3302      	adds	r3, #2
 8006cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	220f      	movs	r2, #15
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43db      	mvns	r3, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006cf0:	d025      	beq.n	8006d3e <HAL_GPIO_Init+0x242>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a4f      	ldr	r2, [pc, #316]	; (8006e34 <HAL_GPIO_Init+0x338>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d01f      	beq.n	8006d3a <HAL_GPIO_Init+0x23e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a4e      	ldr	r2, [pc, #312]	; (8006e38 <HAL_GPIO_Init+0x33c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d019      	beq.n	8006d36 <HAL_GPIO_Init+0x23a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a4d      	ldr	r2, [pc, #308]	; (8006e3c <HAL_GPIO_Init+0x340>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_GPIO_Init+0x236>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a4c      	ldr	r2, [pc, #304]	; (8006e40 <HAL_GPIO_Init+0x344>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00d      	beq.n	8006d2e <HAL_GPIO_Init+0x232>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a4b      	ldr	r2, [pc, #300]	; (8006e44 <HAL_GPIO_Init+0x348>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <HAL_GPIO_Init+0x22e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a4a      	ldr	r2, [pc, #296]	; (8006e48 <HAL_GPIO_Init+0x34c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d101      	bne.n	8006d26 <HAL_GPIO_Init+0x22a>
 8006d22:	2306      	movs	r3, #6
 8006d24:	e00c      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d26:	2307      	movs	r3, #7
 8006d28:	e00a      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d2a:	2305      	movs	r3, #5
 8006d2c:	e008      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d2e:	2304      	movs	r3, #4
 8006d30:	e006      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d32:	2303      	movs	r3, #3
 8006d34:	e004      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d36:	2302      	movs	r3, #2
 8006d38:	e002      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <HAL_GPIO_Init+0x244>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	f002 0203 	and.w	r2, r2, #3
 8006d46:	0092      	lsls	r2, r2, #2
 8006d48:	4093      	lsls	r3, r2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d50:	4937      	ldr	r1, [pc, #220]	; (8006e30 <HAL_GPIO_Init+0x334>)
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	089b      	lsrs	r3, r3, #2
 8006d56:	3302      	adds	r3, #2
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d5e:	4b3b      	ldr	r3, [pc, #236]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	43db      	mvns	r3, r3
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d82:	4a32      	ldr	r2, [pc, #200]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d88:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	43db      	mvns	r3, r3
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4013      	ands	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006dac:	4a27      	ldr	r2, [pc, #156]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006db2:	4b26      	ldr	r3, [pc, #152]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006dd6:	4a1d      	ldr	r2, [pc, #116]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006ddc:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	43db      	mvns	r3, r3
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4013      	ands	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e00:	4a12      	ldr	r2, [pc, #72]	; (8006e4c <HAL_GPIO_Init+0x350>)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	fa22 f303 	lsr.w	r3, r2, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f47f ae78 	bne.w	8006b0c <HAL_GPIO_Init+0x10>
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40021000 	.word	0x40021000
 8006e30:	40010000 	.word	0x40010000
 8006e34:	48000400 	.word	0x48000400
 8006e38:	48000800 	.word	0x48000800
 8006e3c:	48000c00 	.word	0x48000c00
 8006e40:	48001000 	.word	0x48001000
 8006e44:	48001400 	.word	0x48001400
 8006e48:	48001800 	.word	0x48001800
 8006e4c:	40010400 	.word	0x40010400

08006e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	887b      	ldrh	r3, [r7, #2]
 8006e62:	4013      	ands	r3, r2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
 8006e6c:	e001      	b.n	8006e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	807b      	strh	r3, [r7, #2]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e90:	787b      	ldrb	r3, [r7, #1]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006e96:	887a      	ldrh	r2, [r7, #2]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e9c:	e002      	b.n	8006ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e9e:	887a      	ldrh	r2, [r7, #2]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e081      	b.n	8006fc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d106      	bne.n	8006edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fb f850 	bl	8001f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2224      	movs	r2, #36	; 0x24
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 0201 	bic.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d107      	bne.n	8006f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	e006      	b.n	8006f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d104      	bne.n	8006f4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	69d9      	ldr	r1, [r3, #28]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1a      	ldr	r2, [r3, #32]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f042 0201 	orr.w	r2, r2, #1
 8006fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af02      	add	r7, sp, #8
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	4608      	mov	r0, r1
 8006fda:	4611      	mov	r1, r2
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	817b      	strh	r3, [r7, #10]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	813b      	strh	r3, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	f040 80f9 	bne.w	80071ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_I2C_Mem_Write+0x34>
 8006ffe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007000:	2b00      	cmp	r3, #0
 8007002:	d105      	bne.n	8007010 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0ed      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <HAL_I2C_Mem_Write+0x4e>
 800701a:	2302      	movs	r3, #2
 800701c:	e0e6      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007026:	f7fd fdf5 	bl	8004c14 <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	2319      	movs	r3, #25
 8007032:	2201      	movs	r2, #1
 8007034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fac3 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0d1      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2221      	movs	r2, #33	; 0x21
 800704c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2240      	movs	r2, #64	; 0x40
 8007054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a3a      	ldr	r2, [r7, #32]
 8007062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007068:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007070:	88f8      	ldrh	r0, [r7, #6]
 8007072:	893a      	ldrh	r2, [r7, #8]
 8007074:	8979      	ldrh	r1, [r7, #10]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4603      	mov	r3, r0
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f9d3 	bl	800742c <I2C_RequestMemoryWrite>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0a9      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29b      	uxth	r3, r3
 800709e:	2bff      	cmp	r3, #255	; 0xff
 80070a0:	d90e      	bls.n	80070c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	22ff      	movs	r2, #255	; 0xff
 80070a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	8979      	ldrh	r1, [r7, #10]
 80070b0:	2300      	movs	r3, #0
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 fc2b 	bl	8007914 <I2C_TransferConfig>
 80070be:	e00f      	b.n	80070e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	8979      	ldrh	r1, [r7, #10]
 80070d2:	2300      	movs	r3, #0
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 fc1a 	bl	8007914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 faad 	bl	8007644 <I2C_WaitOnTXISFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e07b      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d034      	beq.n	8007198 <HAL_I2C_Mem_Write+0x1c8>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007132:	2b00      	cmp	r3, #0
 8007134:	d130      	bne.n	8007198 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	2200      	movs	r2, #0
 800713e:	2180      	movs	r1, #128	; 0x80
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f000 fa3f 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e04d      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	2bff      	cmp	r3, #255	; 0xff
 8007158:	d90e      	bls.n	8007178 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007164:	b2da      	uxtb	r2, r3
 8007166:	8979      	ldrh	r1, [r7, #10]
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f000 fbcf 	bl	8007914 <I2C_TransferConfig>
 8007176:	e00f      	b.n	8007198 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007186:	b2da      	uxtb	r2, r3
 8007188:	8979      	ldrh	r1, [r7, #10]
 800718a:	2300      	movs	r3, #0
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f000 fbbe 	bl	8007914 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d19e      	bne.n	80070e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fa8c 	bl	80076c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d001      	beq.n	80071b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e01a      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2220      	movs	r2, #32
 80071bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6859      	ldr	r1, [r3, #4]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <HAL_I2C_Mem_Write+0x224>)
 80071ca:	400b      	ands	r3, r1
 80071cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	fe00e800 	.word	0xfe00e800

080071f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4603      	mov	r3, r0
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	460b      	mov	r3, r1
 800720c:	813b      	strh	r3, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b20      	cmp	r3, #32
 800721c:	f040 80fd 	bne.w	800741a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_I2C_Mem_Read+0x34>
 8007226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007232:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e0f1      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_I2C_Mem_Read+0x4e>
 8007242:	2302      	movs	r3, #2
 8007244:	e0ea      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800724e:	f7fd fce1 	bl	8004c14 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	2319      	movs	r3, #25
 800725a:	2201      	movs	r2, #1
 800725c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f9af 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0d5      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2222      	movs	r2, #34	; 0x22
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2240      	movs	r2, #64	; 0x40
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007290:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007298:	88f8      	ldrh	r0, [r7, #6]
 800729a:	893a      	ldrh	r2, [r7, #8]
 800729c:	8979      	ldrh	r1, [r7, #10]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4603      	mov	r3, r0
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f913 	bl	80074d4 <I2C_RequestMemoryRead>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e0ad      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2bff      	cmp	r3, #255	; 0xff
 80072c8:	d90e      	bls.n	80072e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	22ff      	movs	r2, #255	; 0xff
 80072ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	8979      	ldrh	r1, [r7, #10]
 80072d8:	4b52      	ldr	r3, [pc, #328]	; (8007424 <HAL_I2C_Mem_Read+0x22c>)
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fb17 	bl	8007914 <I2C_TransferConfig>
 80072e6:	e00f      	b.n	8007308 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	8979      	ldrh	r1, [r7, #10]
 80072fa:	4b4a      	ldr	r3, [pc, #296]	; (8007424 <HAL_I2C_Mem_Read+0x22c>)
 80072fc:	9300      	str	r3, [sp, #0]
 80072fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fb06 	bl	8007914 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	2200      	movs	r2, #0
 8007310:	2104      	movs	r1, #4
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f956 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e07c      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	b2d2      	uxtb	r2, r2
 800732e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007358:	b29b      	uxth	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d034      	beq.n	80073c8 <HAL_I2C_Mem_Read+0x1d0>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007362:	2b00      	cmp	r3, #0
 8007364:	d130      	bne.n	80073c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736c:	2200      	movs	r2, #0
 800736e:	2180      	movs	r1, #128	; 0x80
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f927 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e04d      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d90e      	bls.n	80073a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	22ff      	movs	r2, #255	; 0xff
 800738e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007394:	b2da      	uxtb	r2, r3
 8007396:	8979      	ldrh	r1, [r7, #10]
 8007398:	2300      	movs	r3, #0
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f000 fab7 	bl	8007914 <I2C_TransferConfig>
 80073a6:	e00f      	b.n	80073c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ac:	b29a      	uxth	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	8979      	ldrh	r1, [r7, #10]
 80073ba:	2300      	movs	r3, #0
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 faa6 	bl	8007914 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d19a      	bne.n	8007308 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 f974 	bl	80076c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e01a      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2220      	movs	r2, #32
 80073ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6859      	ldr	r1, [r3, #4]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <HAL_I2C_Mem_Read+0x230>)
 80073fa:	400b      	ands	r3, r1
 80073fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2220      	movs	r2, #32
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	e000      	b.n	800741c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800741a:	2302      	movs	r3, #2
  }
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	80002400 	.word	0x80002400
 8007428:	fe00e800 	.word	0xfe00e800

0800742c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	4608      	mov	r0, r1
 8007436:	4611      	mov	r1, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4603      	mov	r3, r0
 800743c:	817b      	strh	r3, [r7, #10]
 800743e:	460b      	mov	r3, r1
 8007440:	813b      	strh	r3, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	b2da      	uxtb	r2, r3
 800744a:	8979      	ldrh	r1, [r7, #10]
 800744c:	4b20      	ldr	r3, [pc, #128]	; (80074d0 <I2C_RequestMemoryWrite+0xa4>)
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fa5d 	bl	8007914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	69b9      	ldr	r1, [r7, #24]
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 f8f0 	bl	8007644 <I2C_WaitOnTXISFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e02c      	b.n	80074c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800746e:	88fb      	ldrh	r3, [r7, #6]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d105      	bne.n	8007480 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007474:	893b      	ldrh	r3, [r7, #8]
 8007476:	b2da      	uxtb	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
 800747e:	e015      	b.n	80074ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007480:	893b      	ldrh	r3, [r7, #8]
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	b29b      	uxth	r3, r3
 8007486:	b2da      	uxtb	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	69b9      	ldr	r1, [r7, #24]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f8d6 	bl	8007644 <I2C_WaitOnTXISFlagUntilTimeout>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e012      	b.n	80074c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80074a2:	893b      	ldrh	r3, [r7, #8]
 80074a4:	b2da      	uxtb	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	2200      	movs	r2, #0
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f884 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e000      	b.n	80074c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	80002000 	.word	0x80002000

080074d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	817b      	strh	r3, [r7, #10]
 80074e6:	460b      	mov	r3, r1
 80074e8:	813b      	strh	r3, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	8979      	ldrh	r1, [r7, #10]
 80074f4:	4b20      	ldr	r3, [pc, #128]	; (8007578 <I2C_RequestMemoryRead+0xa4>)
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	2300      	movs	r3, #0
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fa0a 	bl	8007914 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	69b9      	ldr	r1, [r7, #24]
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 f89d 	bl	8007644 <I2C_WaitOnTXISFlagUntilTimeout>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e02c      	b.n	800756e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d105      	bne.n	8007526 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800751a:	893b      	ldrh	r3, [r7, #8]
 800751c:	b2da      	uxtb	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	629a      	str	r2, [r3, #40]	; 0x28
 8007524:	e015      	b.n	8007552 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007526:	893b      	ldrh	r3, [r7, #8]
 8007528:	0a1b      	lsrs	r3, r3, #8
 800752a:	b29b      	uxth	r3, r3
 800752c:	b2da      	uxtb	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	69b9      	ldr	r1, [r7, #24]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f883 	bl	8007644 <I2C_WaitOnTXISFlagUntilTimeout>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e012      	b.n	800756e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007548:	893b      	ldrh	r3, [r7, #8]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2200      	movs	r2, #0
 800755a:	2140      	movs	r1, #64	; 0x40
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f831 	bl	80075c4 <I2C_WaitOnFlagUntilTimeout>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e000      	b.n	800756e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	80002000 	.word	0x80002000

0800757c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b02      	cmp	r3, #2
 8007590:	d103      	bne.n	800759a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2200      	movs	r2, #0
 8007598:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d007      	beq.n	80075b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	619a      	str	r2, [r3, #24]
  }
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	4613      	mov	r3, r2
 80075d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075d4:	e022      	b.n	800761c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075dc:	d01e      	beq.n	800761c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075de:	f7fd fb19 	bl	8004c14 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d302      	bcc.n	80075f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d113      	bne.n	800761c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	f043 0220 	orr.w	r2, r3, #32
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e00f      	b.n	800763c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699a      	ldr	r2, [r3, #24]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4013      	ands	r3, r2
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	429a      	cmp	r2, r3
 800762a:	bf0c      	ite	eq
 800762c:	2301      	moveq	r3, #1
 800762e:	2300      	movne	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	461a      	mov	r2, r3
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	429a      	cmp	r2, r3
 8007638:	d0cd      	beq.n	80075d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007650:	e02c      	b.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 f870 	bl	800773c <I2C_IsErrorOccurred>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e02a      	b.n	80076bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d01e      	beq.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800766e:	f7fd fad1 	bl	8004c14 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	429a      	cmp	r2, r3
 800767c:	d302      	bcc.n	8007684 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d113      	bne.n	80076ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e007      	b.n	80076bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d1cb      	bne.n	8007652 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076d0:	e028      	b.n	8007724 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 f830 	bl	800773c <I2C_IsErrorOccurred>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e026      	b.n	8007734 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e6:	f7fd fa95 	bl	8004c14 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d302      	bcc.n	80076fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d113      	bne.n	8007724 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007700:	f043 0220 	orr.w	r2, r3, #32
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e007      	b.n	8007734 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b20      	cmp	r3, #32
 8007730:	d1cf      	bne.n	80076d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	699b      	ldr	r3, [r3, #24]
 8007754:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d075      	beq.n	8007854 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2210      	movs	r2, #16
 800776e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007770:	e056      	b.n	8007820 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007778:	d052      	beq.n	8007820 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800777a:	f7fd fa4b 	bl	8004c14 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	429a      	cmp	r2, r3
 8007788:	d302      	bcc.n	8007790 <I2C_IsErrorOccurred+0x54>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d147      	bne.n	8007820 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800779a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b2:	d12e      	bne.n	8007812 <I2C_IsErrorOccurred+0xd6>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ba:	d02a      	beq.n	8007812 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80077bc:	7cfb      	ldrb	r3, [r7, #19]
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d027      	beq.n	8007812 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077d2:	f7fd fa1f 	bl	8004c14 <HAL_GetTick>
 80077d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077d8:	e01b      	b.n	8007812 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077da:	f7fd fa1b 	bl	8004c14 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b19      	cmp	r3, #25
 80077e6:	d914      	bls.n	8007812 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	f003 0320 	and.w	r3, r3, #32
 800781c:	2b20      	cmp	r3, #32
 800781e:	d1dc      	bne.n	80077da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b20      	cmp	r3, #32
 800782c:	d003      	beq.n	8007836 <I2C_IsErrorOccurred+0xfa>
 800782e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007832:	2b00      	cmp	r3, #0
 8007834:	d09d      	beq.n	8007772 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800783a:	2b00      	cmp	r3, #0
 800783c:	d103      	bne.n	8007846 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2220      	movs	r2, #32
 8007844:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	f043 0304 	orr.w	r3, r3, #4
 800784c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007876:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	f043 0308 	orr.w	r3, r3, #8
 800788e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	f043 0302 	orr.w	r3, r3, #2
 80078b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80078c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01c      	beq.n	8007904 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff fe56 	bl	800757c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6859      	ldr	r1, [r3, #4]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <I2C_IsErrorOccurred+0x1d4>)
 80078dc:	400b      	ands	r3, r1
 80078de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007908:	4618      	mov	r0, r3
 800790a:	3728      	adds	r7, #40	; 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	fe00e800 	.word	0xfe00e800

08007914 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	817b      	strh	r3, [r7, #10]
 8007922:	4613      	mov	r3, r2
 8007924:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007926:	897b      	ldrh	r3, [r7, #10]
 8007928:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800792c:	7a7b      	ldrb	r3, [r7, #9]
 800792e:	041b      	lsls	r3, r3, #16
 8007930:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007934:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	4313      	orrs	r3, r2
 800793e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007942:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	0d5b      	lsrs	r3, r3, #21
 800794e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007952:	4b08      	ldr	r3, [pc, #32]	; (8007974 <I2C_TransferConfig+0x60>)
 8007954:	430b      	orrs	r3, r1
 8007956:	43db      	mvns	r3, r3
 8007958:	ea02 0103 	and.w	r1, r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	03ff63ff 	.word	0x03ff63ff

08007978 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b20      	cmp	r3, #32
 800798c:	d138      	bne.n	8007a00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007998:	2302      	movs	r3, #2
 800799a:	e032      	b.n	8007a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2224      	movs	r2, #36	; 0x24
 80079a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0201 	bic.w	r2, r2, #1
 80079ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2220      	movs	r2, #32
 80079f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	e000      	b.n	8007a02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a00:	2302      	movs	r3, #2
  }
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b20      	cmp	r3, #32
 8007a22:	d139      	bne.n	8007a98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e033      	b.n	8007a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2224      	movs	r2, #36	; 0x24
 8007a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0201 	bic.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e000      	b.n	8007a9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a98:	2302      	movs	r3, #2
  }
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
	...

08007aa8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a04      	ldr	r2, [pc, #16]	; (8007ac4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab6:	6013      	str	r3, [r2, #0]
}
 8007ab8:	bf00      	nop
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40007000 	.word	0x40007000

08007ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007acc:	4b04      	ldr	r3, [pc, #16]	; (8007ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40007000 	.word	0x40007000

08007ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af2:	d130      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007af4:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b00:	d038      	beq.n	8007b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b02:	4b20      	ldr	r3, [pc, #128]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2232      	movs	r2, #50	; 0x32
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
 8007b1c:	4a1b      	ldr	r2, [pc, #108]	; (8007b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	0c9b      	lsrs	r3, r3, #18
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b28:	e002      	b.n	8007b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b30:	4b14      	ldr	r3, [pc, #80]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3c:	d102      	bne.n	8007b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f2      	bne.n	8007b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b50:	d110      	bne.n	8007b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e00f      	b.n	8007b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b62:	d007      	beq.n	8007b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b64:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b6c:	4a05      	ldr	r2, [pc, #20]	; (8007b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	40007000 	.word	0x40007000
 8007b88:	2000013c 	.word	0x2000013c
 8007b8c:	431bde83 	.word	0x431bde83

08007b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e3ca      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba2:	4b97      	ldr	r3, [pc, #604]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f003 030c 	and.w	r3, r3, #12
 8007baa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bac:	4b94      	ldr	r3, [pc, #592]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0310 	and.w	r3, r3, #16
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 80e4 	beq.w	8007d8c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <HAL_RCC_OscConfig+0x4a>
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	2b0c      	cmp	r3, #12
 8007bce:	f040 808b 	bne.w	8007ce8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	f040 8087 	bne.w	8007ce8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007bda:	4b89      	ldr	r3, [pc, #548]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x62>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e3a2      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1a      	ldr	r2, [r3, #32]
 8007bf6:	4b82      	ldr	r3, [pc, #520]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <HAL_RCC_OscConfig+0x7c>
 8007c02:	4b7f      	ldr	r3, [pc, #508]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c0a:	e005      	b.n	8007c18 <HAL_RCC_OscConfig+0x88>
 8007c0c:	4b7c      	ldr	r3, [pc, #496]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c12:	091b      	lsrs	r3, r3, #4
 8007c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d223      	bcs.n	8007c64 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fd55 	bl	80086d0 <RCC_SetFlashLatencyFromMSIRange>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e383      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c30:	4b73      	ldr	r3, [pc, #460]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a72      	ldr	r2, [pc, #456]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c36:	f043 0308 	orr.w	r3, r3, #8
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	4b70      	ldr	r3, [pc, #448]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	496d      	ldr	r1, [pc, #436]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c4e:	4b6c      	ldr	r3, [pc, #432]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	4968      	ldr	r1, [pc, #416]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	604b      	str	r3, [r1, #4]
 8007c62:	e025      	b.n	8007cb0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c64:	4b66      	ldr	r3, [pc, #408]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a65      	ldr	r2, [pc, #404]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c6a:	f043 0308 	orr.w	r3, r3, #8
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	4b63      	ldr	r3, [pc, #396]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	4960      	ldr	r1, [pc, #384]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c82:	4b5f      	ldr	r3, [pc, #380]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	495b      	ldr	r1, [pc, #364]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d109      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fd15 	bl	80086d0 <RCC_SetFlashLatencyFromMSIRange>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e343      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cb0:	f000 fc4a 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	4b52      	ldr	r3, [pc, #328]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	091b      	lsrs	r3, r3, #4
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	4950      	ldr	r1, [pc, #320]	; (8007e04 <HAL_RCC_OscConfig+0x274>)
 8007cc2:	5ccb      	ldrb	r3, [r1, r3]
 8007cc4:	f003 031f 	and.w	r3, r3, #31
 8007cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ccc:	4a4e      	ldr	r2, [pc, #312]	; (8007e08 <HAL_RCC_OscConfig+0x278>)
 8007cce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007cd0:	4b4e      	ldr	r3, [pc, #312]	; (8007e0c <HAL_RCC_OscConfig+0x27c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fc ff4d 	bl	8004b74 <HAL_InitTick>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d052      	beq.n	8007d8a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	e327      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d032      	beq.n	8007d56 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007cf0:	4b43      	ldr	r3, [pc, #268]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a42      	ldr	r2, [pc, #264]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cfc:	f7fc ff8a 	bl	8004c14 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d04:	f7fc ff86 	bl	8004c14 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e310      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d16:	4b3a      	ldr	r3, [pc, #232]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d22:	4b37      	ldr	r3, [pc, #220]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a36      	ldr	r2, [pc, #216]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d28:	f043 0308 	orr.w	r3, r3, #8
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	4b34      	ldr	r3, [pc, #208]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	4931      	ldr	r1, [pc, #196]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d40:	4b2f      	ldr	r3, [pc, #188]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	492c      	ldr	r1, [pc, #176]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	604b      	str	r3, [r1, #4]
 8007d54:	e01a      	b.n	8007d8c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d56:	4b2a      	ldr	r3, [pc, #168]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a29      	ldr	r2, [pc, #164]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d5c:	f023 0301 	bic.w	r3, r3, #1
 8007d60:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d62:	f7fc ff57 	bl	8004c14 <HAL_GetTick>
 8007d66:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d68:	e008      	b.n	8007d7c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d6a:	f7fc ff53 	bl	8004c14 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e2dd      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007d7c:	4b20      	ldr	r3, [pc, #128]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f0      	bne.n	8007d6a <HAL_RCC_OscConfig+0x1da>
 8007d88:	e000      	b.n	8007d8c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d074      	beq.n	8007e82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d005      	beq.n	8007daa <HAL_RCC_OscConfig+0x21a>
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b0c      	cmp	r3, #12
 8007da2:	d10e      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d10b      	bne.n	8007dc2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007daa:	4b15      	ldr	r3, [pc, #84]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d064      	beq.n	8007e80 <HAL_RCC_OscConfig+0x2f0>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d160      	bne.n	8007e80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e2ba      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dca:	d106      	bne.n	8007dda <HAL_RCC_OscConfig+0x24a>
 8007dcc:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0b      	ldr	r2, [pc, #44]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	e026      	b.n	8007e28 <HAL_RCC_OscConfig+0x298>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007de2:	d115      	bne.n	8007e10 <HAL_RCC_OscConfig+0x280>
 8007de4:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a05      	ldr	r2, [pc, #20]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a02      	ldr	r2, [pc, #8]	; (8007e00 <HAL_RCC_OscConfig+0x270>)
 8007df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfa:	6013      	str	r3, [r2, #0]
 8007dfc:	e014      	b.n	8007e28 <HAL_RCC_OscConfig+0x298>
 8007dfe:	bf00      	nop
 8007e00:	40021000 	.word	0x40021000
 8007e04:	0801686c 	.word	0x0801686c
 8007e08:	2000013c 	.word	0x2000013c
 8007e0c:	20000140 	.word	0x20000140
 8007e10:	4ba0      	ldr	r3, [pc, #640]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a9f      	ldr	r2, [pc, #636]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	4b9d      	ldr	r3, [pc, #628]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a9c      	ldr	r2, [pc, #624]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d013      	beq.n	8007e58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fc fef0 	bl	8004c14 <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e38:	f7fc feec 	bl	8004c14 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b64      	cmp	r3, #100	; 0x64
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e276      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007e4a:	4b92      	ldr	r3, [pc, #584]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f0      	beq.n	8007e38 <HAL_RCC_OscConfig+0x2a8>
 8007e56:	e014      	b.n	8007e82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e58:	f7fc fedc 	bl	8004c14 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007e60:	f7fc fed8 	bl	8004c14 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b64      	cmp	r3, #100	; 0x64
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e262      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007e72:	4b88      	ldr	r3, [pc, #544]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x2d0>
 8007e7e:	e000      	b.n	8007e82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d060      	beq.n	8007f50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d005      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x310>
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	2b0c      	cmp	r3, #12
 8007e98:	d119      	bne.n	8007ece <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d116      	bne.n	8007ece <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ea0:	4b7c      	ldr	r3, [pc, #496]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x328>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e23f      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007eb8:	4b76      	ldr	r3, [pc, #472]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	4973      	ldr	r1, [pc, #460]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ecc:	e040      	b.n	8007f50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d023      	beq.n	8007f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ed6:	4b6f      	ldr	r3, [pc, #444]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a6e      	ldr	r2, [pc, #440]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee2:	f7fc fe97 	bl	8004c14 <HAL_GetTick>
 8007ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ee8:	e008      	b.n	8007efc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eea:	f7fc fe93 	bl	8004c14 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e21d      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007efc:	4b65      	ldr	r3, [pc, #404]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f08:	4b62      	ldr	r3, [pc, #392]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	691b      	ldr	r3, [r3, #16]
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	495f      	ldr	r1, [pc, #380]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	604b      	str	r3, [r1, #4]
 8007f1c:	e018      	b.n	8007f50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f1e:	4b5d      	ldr	r3, [pc, #372]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a5c      	ldr	r2, [pc, #368]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2a:	f7fc fe73 	bl	8004c14 <HAL_GetTick>
 8007f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f30:	e008      	b.n	8007f44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f32:	f7fc fe6f 	bl	8004c14 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d901      	bls.n	8007f44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e1f9      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f44:	4b53      	ldr	r3, [pc, #332]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f0      	bne.n	8007f32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d03c      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d01c      	beq.n	8007f9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f64:	4b4b      	ldr	r3, [pc, #300]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f6a:	4a4a      	ldr	r2, [pc, #296]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f74:	f7fc fe4e 	bl	8004c14 <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f7c:	f7fc fe4a 	bl	8004c14 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e1d4      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f8e:	4b41      	ldr	r3, [pc, #260]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0ef      	beq.n	8007f7c <HAL_RCC_OscConfig+0x3ec>
 8007f9c:	e01b      	b.n	8007fd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f9e:	4b3d      	ldr	r3, [pc, #244]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fa4:	4a3b      	ldr	r2, [pc, #236]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007fa6:	f023 0301 	bic.w	r3, r3, #1
 8007faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fae:	f7fc fe31 	bl	8004c14 <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fb4:	e008      	b.n	8007fc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007fb6:	f7fc fe2d 	bl	8004c14 <HAL_GetTick>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d901      	bls.n	8007fc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e1b7      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007fc8:	4b32      	ldr	r3, [pc, #200]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1ef      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0304 	and.w	r3, r3, #4
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80a6 	beq.w	8008130 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007fe8:	4b2a      	ldr	r3, [pc, #168]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10d      	bne.n	8008010 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ff4:	4b27      	ldr	r3, [pc, #156]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff8:	4a26      	ldr	r2, [pc, #152]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8007ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8008000:	4b24      	ldr	r3, [pc, #144]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8008002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008008:	60bb      	str	r3, [r7, #8]
 800800a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800800c:	2301      	movs	r3, #1
 800800e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008010:	4b21      	ldr	r3, [pc, #132]	; (8008098 <HAL_RCC_OscConfig+0x508>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008018:	2b00      	cmp	r3, #0
 800801a:	d118      	bne.n	800804e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <HAL_RCC_OscConfig+0x508>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a1d      	ldr	r2, [pc, #116]	; (8008098 <HAL_RCC_OscConfig+0x508>)
 8008022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008028:	f7fc fdf4 	bl	8004c14 <HAL_GetTick>
 800802c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008030:	f7fc fdf0 	bl	8004c14 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e17a      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <HAL_RCC_OscConfig+0x508>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f0      	beq.n	8008030 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d108      	bne.n	8008068 <HAL_RCC_OscConfig+0x4d8>
 8008056:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8008058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800805c:	4a0d      	ldr	r2, [pc, #52]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 800805e:	f043 0301 	orr.w	r3, r3, #1
 8008062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008066:	e029      	b.n	80080bc <HAL_RCC_OscConfig+0x52c>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b05      	cmp	r3, #5
 800806e:	d115      	bne.n	800809c <HAL_RCC_OscConfig+0x50c>
 8008070:	4b08      	ldr	r3, [pc, #32]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008076:	4a07      	ldr	r2, [pc, #28]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8008078:	f043 0304 	orr.w	r3, r3, #4
 800807c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008080:	4b04      	ldr	r3, [pc, #16]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8008082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008086:	4a03      	ldr	r2, [pc, #12]	; (8008094 <HAL_RCC_OscConfig+0x504>)
 8008088:	f043 0301 	orr.w	r3, r3, #1
 800808c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008090:	e014      	b.n	80080bc <HAL_RCC_OscConfig+0x52c>
 8008092:	bf00      	nop
 8008094:	40021000 	.word	0x40021000
 8008098:	40007000 	.word	0x40007000
 800809c:	4b9c      	ldr	r3, [pc, #624]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 800809e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a2:	4a9b      	ldr	r2, [pc, #620]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80080ac:	4b98      	ldr	r3, [pc, #608]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80080ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b2:	4a97      	ldr	r2, [pc, #604]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80080b4:	f023 0304 	bic.w	r3, r3, #4
 80080b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d016      	beq.n	80080f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c4:	f7fc fda6 	bl	8004c14 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080ca:	e00a      	b.n	80080e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080cc:	f7fc fda2 	bl	8004c14 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080da:	4293      	cmp	r3, r2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e12a      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080e2:	4b8b      	ldr	r3, [pc, #556]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0ed      	beq.n	80080cc <HAL_RCC_OscConfig+0x53c>
 80080f0:	e015      	b.n	800811e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080f2:	f7fc fd8f 	bl	8004c14 <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80080f8:	e00a      	b.n	8008110 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080fa:	f7fc fd8b 	bl	8004c14 <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	f241 3288 	movw	r2, #5000	; 0x1388
 8008108:	4293      	cmp	r3, r2
 800810a:	d901      	bls.n	8008110 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e113      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008110:	4b7f      	ldr	r3, [pc, #508]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	f003 0302 	and.w	r3, r3, #2
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1ed      	bne.n	80080fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800811e:	7ffb      	ldrb	r3, [r7, #31]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d105      	bne.n	8008130 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008124:	4b7a      	ldr	r3, [pc, #488]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008128:	4a79      	ldr	r2, [pc, #484]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 800812a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 80fe 	beq.w	8008336 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	2b02      	cmp	r3, #2
 8008140:	f040 80d0 	bne.w	80082e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008144:	4b72      	ldr	r3, [pc, #456]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f003 0203 	and.w	r2, r3, #3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	429a      	cmp	r2, r3
 8008156:	d130      	bne.n	80081ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	3b01      	subs	r3, #1
 8008164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008166:	429a      	cmp	r2, r3
 8008168:	d127      	bne.n	80081ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008174:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008176:	429a      	cmp	r2, r3
 8008178:	d11f      	bne.n	80081ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008184:	2a07      	cmp	r2, #7
 8008186:	bf14      	ite	ne
 8008188:	2201      	movne	r2, #1
 800818a:	2200      	moveq	r2, #0
 800818c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800818e:	4293      	cmp	r3, r2
 8008190:	d113      	bne.n	80081ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	085b      	lsrs	r3, r3, #1
 800819e:	3b01      	subs	r3, #1
 80081a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d109      	bne.n	80081ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	085b      	lsrs	r3, r3, #1
 80081b2:	3b01      	subs	r3, #1
 80081b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d06e      	beq.n	8008298 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	2b0c      	cmp	r3, #12
 80081be:	d069      	beq.n	8008294 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80081c0:	4b53      	ldr	r3, [pc, #332]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d105      	bne.n	80081d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80081cc:	4b50      	ldr	r3, [pc, #320]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e0ad      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80081dc:	4b4c      	ldr	r3, [pc, #304]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a4b      	ldr	r2, [pc, #300]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80081e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081e8:	f7fc fd14 	bl	8004c14 <HAL_GetTick>
 80081ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ee:	e008      	b.n	8008202 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081f0:	f7fc fd10 	bl	8004c14 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d901      	bls.n	8008202 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e09a      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008202:	4b43      	ldr	r3, [pc, #268]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f0      	bne.n	80081f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800820e:	4b40      	ldr	r3, [pc, #256]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	4b40      	ldr	r3, [pc, #256]	; (8008314 <HAL_RCC_OscConfig+0x784>)
 8008214:	4013      	ands	r3, r2
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800821e:	3a01      	subs	r2, #1
 8008220:	0112      	lsls	r2, r2, #4
 8008222:	4311      	orrs	r1, r2
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008228:	0212      	lsls	r2, r2, #8
 800822a:	4311      	orrs	r1, r2
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008230:	0852      	lsrs	r2, r2, #1
 8008232:	3a01      	subs	r2, #1
 8008234:	0552      	lsls	r2, r2, #21
 8008236:	4311      	orrs	r1, r2
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800823c:	0852      	lsrs	r2, r2, #1
 800823e:	3a01      	subs	r2, #1
 8008240:	0652      	lsls	r2, r2, #25
 8008242:	4311      	orrs	r1, r2
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008248:	0912      	lsrs	r2, r2, #4
 800824a:	0452      	lsls	r2, r2, #17
 800824c:	430a      	orrs	r2, r1
 800824e:	4930      	ldr	r1, [pc, #192]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008250:	4313      	orrs	r3, r2
 8008252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008254:	4b2e      	ldr	r3, [pc, #184]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a2d      	ldr	r2, [pc, #180]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 800825a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800825e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008260:	4b2b      	ldr	r3, [pc, #172]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800826a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800826c:	f7fc fcd2 	bl	8004c14 <HAL_GetTick>
 8008270:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008272:	e008      	b.n	8008286 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008274:	f7fc fcce 	bl	8004c14 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e058      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008286:	4b22      	ldr	r3, [pc, #136]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f0      	beq.n	8008274 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008292:	e050      	b.n	8008336 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e04f      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008298:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d148      	bne.n	8008336 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a19      	ldr	r2, [pc, #100]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	4a16      	ldr	r2, [pc, #88]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082bc:	f7fc fcaa 	bl	8004c14 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082c4:	f7fc fca6 	bl	8004c14 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e030      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCC_OscConfig+0x734>
 80082e2:	e028      	b.n	8008336 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	2b0c      	cmp	r3, #12
 80082e8:	d023      	beq.n	8008332 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ea:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <HAL_RCC_OscConfig+0x780>)
 80082f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f6:	f7fc fc8d 	bl	8004c14 <HAL_GetTick>
 80082fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082fc:	e00c      	b.n	8008318 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082fe:	f7fc fc89 	bl	8004c14 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b02      	cmp	r3, #2
 800830a:	d905      	bls.n	8008318 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e013      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
 8008310:	40021000 	.word	0x40021000
 8008314:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008318:	4b09      	ldr	r3, [pc, #36]	; (8008340 <HAL_RCC_OscConfig+0x7b0>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ec      	bne.n	80082fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <HAL_RCC_OscConfig+0x7b0>)
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	4905      	ldr	r1, [pc, #20]	; (8008340 <HAL_RCC_OscConfig+0x7b0>)
 800832a:	4b06      	ldr	r3, [pc, #24]	; (8008344 <HAL_RCC_OscConfig+0x7b4>)
 800832c:	4013      	ands	r3, r2
 800832e:	60cb      	str	r3, [r1, #12]
 8008330:	e001      	b.n	8008336 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	40021000 	.word	0x40021000
 8008344:	feeefffc 	.word	0xfeeefffc

08008348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0e7      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800835c:	4b75      	ldr	r3, [pc, #468]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	429a      	cmp	r2, r3
 8008368:	d910      	bls.n	800838c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800836a:	4b72      	ldr	r3, [pc, #456]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f023 0207 	bic.w	r2, r3, #7
 8008372:	4970      	ldr	r1, [pc, #448]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	4313      	orrs	r3, r2
 8008378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800837a:	4b6e      	ldr	r3, [pc, #440]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d001      	beq.n	800838c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e0cf      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b00      	cmp	r3, #0
 8008396:	d010      	beq.n	80083ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	4b66      	ldr	r3, [pc, #408]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d908      	bls.n	80083ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083a8:	4b63      	ldr	r3, [pc, #396]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	4960      	ldr	r1, [pc, #384]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d04c      	beq.n	8008460 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d107      	bne.n	80083de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ce:	4b5a      	ldr	r3, [pc, #360]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d121      	bne.n	800841e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e0a6      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d107      	bne.n	80083f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083e6:	4b54      	ldr	r3, [pc, #336]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d115      	bne.n	800841e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e09a      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d107      	bne.n	800840e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80083fe:	4b4e      	ldr	r3, [pc, #312]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e08e      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800840e:	4b4a      	ldr	r3, [pc, #296]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e086      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800841e:	4b46      	ldr	r3, [pc, #280]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f023 0203 	bic.w	r2, r3, #3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4943      	ldr	r1, [pc, #268]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 800842c:	4313      	orrs	r3, r2
 800842e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008430:	f7fc fbf0 	bl	8004c14 <HAL_GetTick>
 8008434:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008436:	e00a      	b.n	800844e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008438:	f7fc fbec 	bl	8004c14 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	f241 3288 	movw	r2, #5000	; 0x1388
 8008446:	4293      	cmp	r3, r2
 8008448:	d901      	bls.n	800844e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e06e      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800844e:	4b3a      	ldr	r3, [pc, #232]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 020c 	and.w	r2, r3, #12
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	429a      	cmp	r2, r3
 800845e:	d1eb      	bne.n	8008438 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d010      	beq.n	800848e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	4b31      	ldr	r3, [pc, #196]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008478:	429a      	cmp	r2, r3
 800847a:	d208      	bcs.n	800848e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800847c:	4b2e      	ldr	r3, [pc, #184]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	492b      	ldr	r1, [pc, #172]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 800848a:	4313      	orrs	r3, r2
 800848c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800848e:	4b29      	ldr	r3, [pc, #164]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0307 	and.w	r3, r3, #7
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d210      	bcs.n	80084be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849c:	4b25      	ldr	r3, [pc, #148]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f023 0207 	bic.w	r2, r3, #7
 80084a4:	4923      	ldr	r1, [pc, #140]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ac:	4b21      	ldr	r3, [pc, #132]	; (8008534 <HAL_RCC_ClockConfig+0x1ec>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d001      	beq.n	80084be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e036      	b.n	800852c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0304 	and.w	r3, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d008      	beq.n	80084dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084ca:	4b1b      	ldr	r3, [pc, #108]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	4918      	ldr	r1, [pc, #96]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0308 	and.w	r3, r3, #8
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084e8:	4b13      	ldr	r3, [pc, #76]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4910      	ldr	r1, [pc, #64]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084fc:	f000 f824 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 8008500:	4602      	mov	r2, r0
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <HAL_RCC_ClockConfig+0x1f0>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	091b      	lsrs	r3, r3, #4
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	490b      	ldr	r1, [pc, #44]	; (800853c <HAL_RCC_ClockConfig+0x1f4>)
 800850e:	5ccb      	ldrb	r3, [r1, r3]
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
 8008518:	4a09      	ldr	r2, [pc, #36]	; (8008540 <HAL_RCC_ClockConfig+0x1f8>)
 800851a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800851c:	4b09      	ldr	r3, [pc, #36]	; (8008544 <HAL_RCC_ClockConfig+0x1fc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f7fc fb27 	bl	8004b74 <HAL_InitTick>
 8008526:	4603      	mov	r3, r0
 8008528:	72fb      	strb	r3, [r7, #11]

  return status;
 800852a:	7afb      	ldrb	r3, [r7, #11]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40022000 	.word	0x40022000
 8008538:	40021000 	.word	0x40021000
 800853c:	0801686c 	.word	0x0801686c
 8008540:	2000013c 	.word	0x2000013c
 8008544:	20000140 	.word	0x20000140

08008548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008548:	b480      	push	{r7}
 800854a:	b089      	sub	sp, #36	; 0x24
 800854c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	2300      	movs	r3, #0
 8008554:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008556:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 030c 	and.w	r3, r3, #12
 800855e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d005      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0x34>
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b0c      	cmp	r3, #12
 8008574:	d121      	bne.n	80085ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d11e      	bne.n	80085ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800857c:	4b34      	ldr	r3, [pc, #208]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d107      	bne.n	8008598 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008588:	4b31      	ldr	r3, [pc, #196]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 800858a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800858e:	0a1b      	lsrs	r3, r3, #8
 8008590:	f003 030f 	and.w	r3, r3, #15
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	e005      	b.n	80085a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008598:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	091b      	lsrs	r3, r3, #4
 800859e:	f003 030f 	and.w	r3, r3, #15
 80085a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80085a4:	4a2b      	ldr	r2, [pc, #172]	; (8008654 <HAL_RCC_GetSysClockFreq+0x10c>)
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10d      	bne.n	80085d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80085b8:	e00a      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b04      	cmp	r3, #4
 80085be:	d102      	bne.n	80085c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80085c0:	4b25      	ldr	r3, [pc, #148]	; (8008658 <HAL_RCC_GetSysClockFreq+0x110>)
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	e004      	b.n	80085d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d101      	bne.n	80085d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80085cc:	4b23      	ldr	r3, [pc, #140]	; (800865c <HAL_RCC_GetSysClockFreq+0x114>)
 80085ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	2b0c      	cmp	r3, #12
 80085d4:	d134      	bne.n	8008640 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80085d6:	4b1e      	ldr	r3, [pc, #120]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f003 0303 	and.w	r3, r3, #3
 80085de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d003      	beq.n	80085ee <HAL_RCC_GetSysClockFreq+0xa6>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d003      	beq.n	80085f4 <HAL_RCC_GetSysClockFreq+0xac>
 80085ec:	e005      	b.n	80085fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80085ee:	4b1a      	ldr	r3, [pc, #104]	; (8008658 <HAL_RCC_GetSysClockFreq+0x110>)
 80085f0:	617b      	str	r3, [r7, #20]
      break;
 80085f2:	e005      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80085f4:	4b19      	ldr	r3, [pc, #100]	; (800865c <HAL_RCC_GetSysClockFreq+0x114>)
 80085f6:	617b      	str	r3, [r7, #20]
      break;
 80085f8:	e002      	b.n	8008600 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	617b      	str	r3, [r7, #20]
      break;
 80085fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008600:	4b13      	ldr	r3, [pc, #76]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	091b      	lsrs	r3, r3, #4
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	3301      	adds	r3, #1
 800860c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	0a1b      	lsrs	r3, r3, #8
 8008614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	fb03 f202 	mul.w	r2, r3, r2
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	fbb2 f3f3 	udiv	r3, r2, r3
 8008624:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <HAL_RCC_GetSysClockFreq+0x108>)
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	0e5b      	lsrs	r3, r3, #25
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	3301      	adds	r3, #1
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	fbb2 f3f3 	udiv	r3, r2, r3
 800863e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008640:	69bb      	ldr	r3, [r7, #24]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3724      	adds	r7, #36	; 0x24
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	40021000 	.word	0x40021000
 8008654:	08016884 	.word	0x08016884
 8008658:	00f42400 	.word	0x00f42400
 800865c:	007a1200 	.word	0x007a1200

08008660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008660:	b480      	push	{r7}
 8008662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008664:	4b03      	ldr	r3, [pc, #12]	; (8008674 <HAL_RCC_GetHCLKFreq+0x14>)
 8008666:	681b      	ldr	r3, [r3, #0]
}
 8008668:	4618      	mov	r0, r3
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	2000013c 	.word	0x2000013c

08008678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800867c:	f7ff fff0 	bl	8008660 <HAL_RCC_GetHCLKFreq>
 8008680:	4602      	mov	r2, r0
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	0a1b      	lsrs	r3, r3, #8
 8008688:	f003 0307 	and.w	r3, r3, #7
 800868c:	4904      	ldr	r1, [pc, #16]	; (80086a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800868e:	5ccb      	ldrb	r3, [r1, r3]
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008698:	4618      	mov	r0, r3
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40021000 	.word	0x40021000
 80086a0:	0801687c 	.word	0x0801687c

080086a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80086a8:	f7ff ffda 	bl	8008660 <HAL_RCC_GetHCLKFreq>
 80086ac:	4602      	mov	r2, r0
 80086ae:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	0adb      	lsrs	r3, r3, #11
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	4904      	ldr	r1, [pc, #16]	; (80086cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80086ba:	5ccb      	ldrb	r3, [r1, r3]
 80086bc:	f003 031f 	and.w	r3, r3, #31
 80086c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	40021000 	.word	0x40021000
 80086cc:	0801687c 	.word	0x0801687c

080086d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80086dc:	4b2a      	ldr	r3, [pc, #168]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80086e8:	f7ff f9ee 	bl	8007ac8 <HAL_PWREx_GetVoltageRange>
 80086ec:	6178      	str	r0, [r7, #20]
 80086ee:	e014      	b.n	800871a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80086f0:	4b25      	ldr	r3, [pc, #148]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	4a24      	ldr	r2, [pc, #144]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fa:	6593      	str	r3, [r2, #88]	; 0x58
 80086fc:	4b22      	ldr	r3, [pc, #136]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80086fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008708:	f7ff f9de 	bl	8007ac8 <HAL_PWREx_GetVoltageRange>
 800870c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800870e:	4b1e      	ldr	r3, [pc, #120]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	4a1d      	ldr	r2, [pc, #116]	; (8008788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008720:	d10b      	bne.n	800873a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b80      	cmp	r3, #128	; 0x80
 8008726:	d919      	bls.n	800875c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2ba0      	cmp	r3, #160	; 0xa0
 800872c:	d902      	bls.n	8008734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800872e:	2302      	movs	r3, #2
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e013      	b.n	800875c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008734:	2301      	movs	r3, #1
 8008736:	613b      	str	r3, [r7, #16]
 8008738:	e010      	b.n	800875c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b80      	cmp	r3, #128	; 0x80
 800873e:	d902      	bls.n	8008746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008740:	2303      	movs	r3, #3
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	e00a      	b.n	800875c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d102      	bne.n	8008752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800874c:	2302      	movs	r3, #2
 800874e:	613b      	str	r3, [r7, #16]
 8008750:	e004      	b.n	800875c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b70      	cmp	r3, #112	; 0x70
 8008756:	d101      	bne.n	800875c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008758:	2301      	movs	r3, #1
 800875a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f023 0207 	bic.w	r2, r3, #7
 8008764:	4909      	ldr	r1, [pc, #36]	; (800878c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800876c:	4b07      	ldr	r3, [pc, #28]	; (800878c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d001      	beq.n	800877e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3718      	adds	r7, #24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	40021000 	.word	0x40021000
 800878c:	40022000 	.word	0x40022000

08008790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008798:	2300      	movs	r3, #0
 800879a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800879c:	2300      	movs	r3, #0
 800879e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d041      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087b4:	d02a      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80087b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80087ba:	d824      	bhi.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80087bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087c0:	d008      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80087c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087c6:	d81e      	bhi.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00a      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80087cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087d0:	d010      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087d2:	e018      	b.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80087d4:	4b86      	ldr	r3, [pc, #536]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a85      	ldr	r2, [pc, #532]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80087e0:	e015      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	3304      	adds	r3, #4
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f000 facb 	bl	8008d84 <RCCEx_PLLSAI1_Config>
 80087ee:	4603      	mov	r3, r0
 80087f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80087f2:	e00c      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	3320      	adds	r3, #32
 80087f8:	2100      	movs	r1, #0
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fbb6 	bl	8008f6c <RCCEx_PLLSAI2_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008804:	e003      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	74fb      	strb	r3, [r7, #19]
      break;
 800880a:	e000      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800880c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800880e:	7cfb      	ldrb	r3, [r7, #19]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008814:	4b76      	ldr	r3, [pc, #472]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008822:	4973      	ldr	r1, [pc, #460]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008824:	4313      	orrs	r3, r2
 8008826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800882a:	e001      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	7cfb      	ldrb	r3, [r7, #19]
 800882e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d041      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008840:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008844:	d02a      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008846:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800884a:	d824      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800884c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008850:	d008      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008856:	d81e      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800885c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008860:	d010      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008862:	e018      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008864:	4b62      	ldr	r3, [pc, #392]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4a61      	ldr	r2, [pc, #388]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800886a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800886e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008870:	e015      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3304      	adds	r3, #4
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fa83 	bl	8008d84 <RCCEx_PLLSAI1_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008882:	e00c      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3320      	adds	r3, #32
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fb6e 	bl	8008f6c <RCCEx_PLLSAI2_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008894:	e003      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	74fb      	strb	r3, [r7, #19]
      break;
 800889a:	e000      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800889c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800889e:	7cfb      	ldrb	r3, [r7, #19]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10b      	bne.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80088a4:	4b52      	ldr	r3, [pc, #328]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088b2:	494f      	ldr	r1, [pc, #316]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80088ba:	e001      	b.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088bc:	7cfb      	ldrb	r3, [r7, #19]
 80088be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 80a0 	beq.w	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088ce:	2300      	movs	r3, #0
 80088d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80088d2:	4b47      	ldr	r3, [pc, #284]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d101      	bne.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80088de:	2301      	movs	r3, #1
 80088e0:	e000      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80088e2:	2300      	movs	r3, #0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00d      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088e8:	4b41      	ldr	r3, [pc, #260]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ec:	4a40      	ldr	r2, [pc, #256]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088f2:	6593      	str	r3, [r2, #88]	; 0x58
 80088f4:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80088f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088fc:	60bb      	str	r3, [r7, #8]
 80088fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008900:	2301      	movs	r3, #1
 8008902:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008904:	4b3b      	ldr	r3, [pc, #236]	; (80089f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a3a      	ldr	r2, [pc, #232]	; (80089f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800890a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800890e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008910:	f7fc f980 	bl	8004c14 <HAL_GetTick>
 8008914:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008916:	e009      	b.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008918:	f7fc f97c 	bl	8004c14 <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d902      	bls.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	74fb      	strb	r3, [r7, #19]
        break;
 800892a:	e005      	b.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800892c:	4b31      	ldr	r3, [pc, #196]	; (80089f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008934:	2b00      	cmp	r3, #0
 8008936:	d0ef      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008938:	7cfb      	ldrb	r3, [r7, #19]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d15c      	bne.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800893e:	4b2c      	ldr	r3, [pc, #176]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008948:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01f      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	429a      	cmp	r2, r3
 800895a:	d019      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800895c:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008966:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008968:	4b21      	ldr	r3, [pc, #132]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800896e:	4a20      	ldr	r2, [pc, #128]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800897a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800897e:	4a1c      	ldr	r2, [pc, #112]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008984:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008988:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d016      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899a:	f7fc f93b 	bl	8004c14 <HAL_GetTick>
 800899e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089a0:	e00b      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089a2:	f7fc f937 	bl	8004c14 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d902      	bls.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	74fb      	strb	r3, [r7, #19]
            break;
 80089b8:	e006      	b.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089ba:	4b0d      	ldr	r3, [pc, #52]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0ec      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80089c8:	7cfb      	ldrb	r3, [r7, #19]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10c      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089de:	4904      	ldr	r1, [pc, #16]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80089e6:	e009      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80089e8:	7cfb      	ldrb	r3, [r7, #19]
 80089ea:	74bb      	strb	r3, [r7, #18]
 80089ec:	e006      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80089ee:	bf00      	nop
 80089f0:	40021000 	.word	0x40021000
 80089f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f8:	7cfb      	ldrb	r3, [r7, #19]
 80089fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089fc:	7c7b      	ldrb	r3, [r7, #17]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	d105      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a02:	4b9e      	ldr	r3, [pc, #632]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a06:	4a9d      	ldr	r2, [pc, #628]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a1a:	4b98      	ldr	r3, [pc, #608]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a20:	f023 0203 	bic.w	r2, r3, #3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	4994      	ldr	r1, [pc, #592]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a3c:	4b8f      	ldr	r3, [pc, #572]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a42:	f023 020c 	bic.w	r2, r3, #12
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	498c      	ldr	r1, [pc, #560]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00a      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a5e:	4b87      	ldr	r3, [pc, #540]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	4983      	ldr	r1, [pc, #524]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00a      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008a80:	4b7e      	ldr	r3, [pc, #504]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8e:	497b      	ldr	r1, [pc, #492]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008aa2:	4b76      	ldr	r3, [pc, #472]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ab0:	4972      	ldr	r1, [pc, #456]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00a      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ac4:	4b6d      	ldr	r3, [pc, #436]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	496a      	ldr	r1, [pc, #424]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00a      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ae6:	4b65      	ldr	r3, [pc, #404]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af4:	4961      	ldr	r1, [pc, #388]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00a      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b08:	4b5c      	ldr	r3, [pc, #368]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b16:	4959      	ldr	r1, [pc, #356]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b2a:	4b54      	ldr	r3, [pc, #336]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b38:	4950      	ldr	r1, [pc, #320]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008b4c:	4b4b      	ldr	r3, [pc, #300]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	4948      	ldr	r1, [pc, #288]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b6e:	4b43      	ldr	r3, [pc, #268]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7c:	493f      	ldr	r1, [pc, #252]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d028      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b90:	4b3a      	ldr	r3, [pc, #232]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b9e:	4937      	ldr	r1, [pc, #220]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008baa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bae:	d106      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bb0:	4b32      	ldr	r3, [pc, #200]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	4a31      	ldr	r2, [pc, #196]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bba:	60d3      	str	r3, [r2, #12]
 8008bbc:	e011      	b.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bc6:	d10c      	bne.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	2101      	movs	r1, #1
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 f8d8 	bl	8008d84 <RCCEx_PLLSAI1_Config>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008bd8:	7cfb      	ldrb	r3, [r7, #19]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008bde:	7cfb      	ldrb	r3, [r7, #19]
 8008be0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d028      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008bee:	4b23      	ldr	r3, [pc, #140]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfc:	491f      	ldr	r1, [pc, #124]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c0c:	d106      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	4a1a      	ldr	r2, [pc, #104]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c18:	60d3      	str	r3, [r2, #12]
 8008c1a:	e011      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c24:	d10c      	bne.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f000 f8a9 	bl	8008d84 <RCCEx_PLLSAI1_Config>
 8008c32:	4603      	mov	r3, r0
 8008c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c36:	7cfb      	ldrb	r3, [r7, #19]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008c3c:	7cfb      	ldrb	r3, [r7, #19]
 8008c3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d02b      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c4c:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c5a:	4908      	ldr	r1, [pc, #32]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c6a:	d109      	bne.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c6c:	4b03      	ldr	r3, [pc, #12]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	4a02      	ldr	r2, [pc, #8]	; (8008c7c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c76:	60d3      	str	r3, [r2, #12]
 8008c78:	e014      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008c7a:	bf00      	nop
 8008c7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c88:	d10c      	bne.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	2101      	movs	r1, #1
 8008c90:	4618      	mov	r0, r3
 8008c92:	f000 f877 	bl	8008d84 <RCCEx_PLLSAI1_Config>
 8008c96:	4603      	mov	r3, r0
 8008c98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008c9a:	7cfb      	ldrb	r3, [r7, #19]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008ca0:	7cfb      	ldrb	r3, [r7, #19]
 8008ca2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d02f      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cbe:	4928      	ldr	r1, [pc, #160]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cce:	d10d      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f854 	bl	8008d84 <RCCEx_PLLSAI1_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ce0:	7cfb      	ldrb	r3, [r7, #19]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d014      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008ce6:	7cfb      	ldrb	r3, [r7, #19]
 8008ce8:	74bb      	strb	r3, [r7, #18]
 8008cea:	e011      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008cf4:	d10c      	bne.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	3320      	adds	r3, #32
 8008cfa:	2102      	movs	r1, #2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f935 	bl	8008f6c <RCCEx_PLLSAI2_Config>
 8008d02:	4603      	mov	r3, r0
 8008d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008d06:	7cfb      	ldrb	r3, [r7, #19]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008d0c:	7cfb      	ldrb	r3, [r7, #19]
 8008d0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00a      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d2a:	490d      	ldr	r1, [pc, #52]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4e:	4904      	ldr	r1, [pc, #16]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008d50:	4313      	orrs	r3, r2
 8008d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008d56:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	40021000 	.word	0x40021000

08008d64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a04      	ldr	r2, [pc, #16]	; (8008d80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008d6e:	f043 0304 	orr.w	r3, r3, #4
 8008d72:	6013      	str	r3, [r2, #0]
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	40021000 	.word	0x40021000

08008d84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d92:	4b75      	ldr	r3, [pc, #468]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d018      	beq.n	8008dd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008d9e:	4b72      	ldr	r3, [pc, #456]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	f003 0203 	and.w	r2, r3, #3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d10d      	bne.n	8008dca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
       ||
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d009      	beq.n	8008dca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008db6:	4b6c      	ldr	r3, [pc, #432]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	091b      	lsrs	r3, r3, #4
 8008dbc:	f003 0307 	and.w	r3, r3, #7
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d047      	beq.n	8008e5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	e044      	b.n	8008e5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d018      	beq.n	8008e0a <RCCEx_PLLSAI1_Config+0x86>
 8008dd8:	2b03      	cmp	r3, #3
 8008dda:	d825      	bhi.n	8008e28 <RCCEx_PLLSAI1_Config+0xa4>
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d002      	beq.n	8008de6 <RCCEx_PLLSAI1_Config+0x62>
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d009      	beq.n	8008df8 <RCCEx_PLLSAI1_Config+0x74>
 8008de4:	e020      	b.n	8008e28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008de6:	4b60      	ldr	r3, [pc, #384]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d11d      	bne.n	8008e2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008df6:	e01a      	b.n	8008e2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008df8:	4b5b      	ldr	r3, [pc, #364]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d116      	bne.n	8008e32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e08:	e013      	b.n	8008e32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008e0a:	4b57      	ldr	r3, [pc, #348]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10f      	bne.n	8008e36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008e16:	4b54      	ldr	r3, [pc, #336]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e26:	e006      	b.n	8008e36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e2c:	e004      	b.n	8008e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e2e:	bf00      	nop
 8008e30:	e002      	b.n	8008e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10d      	bne.n	8008e5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008e3e:	4b4a      	ldr	r3, [pc, #296]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6819      	ldr	r1, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	430b      	orrs	r3, r1
 8008e54:	4944      	ldr	r1, [pc, #272]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008e5a:	7bfb      	ldrb	r3, [r7, #15]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d17d      	bne.n	8008f5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008e60:	4b41      	ldr	r3, [pc, #260]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a40      	ldr	r2, [pc, #256]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e6c:	f7fb fed2 	bl	8004c14 <HAL_GetTick>
 8008e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e72:	e009      	b.n	8008e88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e74:	f7fb fece 	bl	8004c14 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d902      	bls.n	8008e88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	73fb      	strb	r3, [r7, #15]
        break;
 8008e86:	e005      	b.n	8008e94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008e88:	4b37      	ldr	r3, [pc, #220]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1ef      	bne.n	8008e74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d160      	bne.n	8008f5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d111      	bne.n	8008ec4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ea0:	4b31      	ldr	r3, [pc, #196]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	6892      	ldr	r2, [r2, #8]
 8008eb0:	0211      	lsls	r1, r2, #8
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	68d2      	ldr	r2, [r2, #12]
 8008eb6:	0912      	lsrs	r2, r2, #4
 8008eb8:	0452      	lsls	r2, r2, #17
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	492a      	ldr	r1, [pc, #168]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	610b      	str	r3, [r1, #16]
 8008ec2:	e027      	b.n	8008f14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d112      	bne.n	8008ef0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008eca:	4b27      	ldr	r3, [pc, #156]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6892      	ldr	r2, [r2, #8]
 8008eda:	0211      	lsls	r1, r2, #8
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6912      	ldr	r2, [r2, #16]
 8008ee0:	0852      	lsrs	r2, r2, #1
 8008ee2:	3a01      	subs	r2, #1
 8008ee4:	0552      	lsls	r2, r2, #21
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	491f      	ldr	r1, [pc, #124]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008eea:	4313      	orrs	r3, r2
 8008eec:	610b      	str	r3, [r1, #16]
 8008eee:	e011      	b.n	8008f14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ef0:	4b1d      	ldr	r3, [pc, #116]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008ef8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	6892      	ldr	r2, [r2, #8]
 8008f00:	0211      	lsls	r1, r2, #8
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6952      	ldr	r2, [r2, #20]
 8008f06:	0852      	lsrs	r2, r2, #1
 8008f08:	3a01      	subs	r2, #1
 8008f0a:	0652      	lsls	r2, r2, #25
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	4916      	ldr	r1, [pc, #88]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008f14:	4b14      	ldr	r3, [pc, #80]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f20:	f7fb fe78 	bl	8004c14 <HAL_GetTick>
 8008f24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f26:	e009      	b.n	8008f3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f28:	f7fb fe74 	bl	8004c14 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d902      	bls.n	8008f3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	73fb      	strb	r3, [r7, #15]
          break;
 8008f3a:	e005      	b.n	8008f48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0ef      	beq.n	8008f28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008f4e:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f50:	691a      	ldr	r2, [r3, #16]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	4904      	ldr	r1, [pc, #16]	; (8008f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	40021000 	.word	0x40021000

08008f6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008f7a:	4b6a      	ldr	r3, [pc, #424]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d018      	beq.n	8008fb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008f86:	4b67      	ldr	r3, [pc, #412]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	f003 0203 	and.w	r2, r3, #3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d10d      	bne.n	8008fb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
       ||
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008f9e:	4b61      	ldr	r3, [pc, #388]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685b      	ldr	r3, [r3, #4]
       ||
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d047      	beq.n	8009042 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	73fb      	strb	r3, [r7, #15]
 8008fb6:	e044      	b.n	8009042 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d018      	beq.n	8008ff2 <RCCEx_PLLSAI2_Config+0x86>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d825      	bhi.n	8009010 <RCCEx_PLLSAI2_Config+0xa4>
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d002      	beq.n	8008fce <RCCEx_PLLSAI2_Config+0x62>
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d009      	beq.n	8008fe0 <RCCEx_PLLSAI2_Config+0x74>
 8008fcc:	e020      	b.n	8009010 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008fce:	4b55      	ldr	r3, [pc, #340]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d11d      	bne.n	8009016 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fde:	e01a      	b.n	8009016 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008fe0:	4b50      	ldr	r3, [pc, #320]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d116      	bne.n	800901a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ff0:	e013      	b.n	800901a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008ff2:	4b4c      	ldr	r3, [pc, #304]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10f      	bne.n	800901e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008ffe:	4b49      	ldr	r3, [pc, #292]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009006:	2b00      	cmp	r3, #0
 8009008:	d109      	bne.n	800901e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800900e:	e006      	b.n	800901e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	73fb      	strb	r3, [r7, #15]
      break;
 8009014:	e004      	b.n	8009020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009016:	bf00      	nop
 8009018:	e002      	b.n	8009020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800901a:	bf00      	nop
 800901c:	e000      	b.n	8009020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800901e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10d      	bne.n	8009042 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009026:	4b3f      	ldr	r3, [pc, #252]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009028:	68db      	ldr	r3, [r3, #12]
 800902a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6819      	ldr	r1, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	3b01      	subs	r3, #1
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	430b      	orrs	r3, r1
 800903c:	4939      	ldr	r1, [pc, #228]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800903e:	4313      	orrs	r3, r2
 8009040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d167      	bne.n	8009118 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009048:	4b36      	ldr	r3, [pc, #216]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a35      	ldr	r2, [pc, #212]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800904e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009054:	f7fb fdde 	bl	8004c14 <HAL_GetTick>
 8009058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800905a:	e009      	b.n	8009070 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800905c:	f7fb fdda 	bl	8004c14 <HAL_GetTick>
 8009060:	4602      	mov	r2, r0
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	2b02      	cmp	r3, #2
 8009068:	d902      	bls.n	8009070 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	73fb      	strb	r3, [r7, #15]
        break;
 800906e:	e005      	b.n	800907c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009070:	4b2c      	ldr	r3, [pc, #176]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1ef      	bne.n	800905c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800907c:	7bfb      	ldrb	r3, [r7, #15]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d14a      	bne.n	8009118 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d111      	bne.n	80090ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009088:	4b26      	ldr	r3, [pc, #152]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800908a:	695b      	ldr	r3, [r3, #20]
 800908c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	6892      	ldr	r2, [r2, #8]
 8009098:	0211      	lsls	r1, r2, #8
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68d2      	ldr	r2, [r2, #12]
 800909e:	0912      	lsrs	r2, r2, #4
 80090a0:	0452      	lsls	r2, r2, #17
 80090a2:	430a      	orrs	r2, r1
 80090a4:	491f      	ldr	r1, [pc, #124]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	614b      	str	r3, [r1, #20]
 80090aa:	e011      	b.n	80090d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80090ac:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80090b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	6892      	ldr	r2, [r2, #8]
 80090bc:	0211      	lsls	r1, r2, #8
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6912      	ldr	r2, [r2, #16]
 80090c2:	0852      	lsrs	r2, r2, #1
 80090c4:	3a01      	subs	r2, #1
 80090c6:	0652      	lsls	r2, r2, #25
 80090c8:	430a      	orrs	r2, r1
 80090ca:	4916      	ldr	r1, [pc, #88]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80090d0:	4b14      	ldr	r3, [pc, #80]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a13      	ldr	r2, [pc, #76]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090dc:	f7fb fd9a 	bl	8004c14 <HAL_GetTick>
 80090e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80090e2:	e009      	b.n	80090f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80090e4:	f7fb fd96 	bl	8004c14 <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d902      	bls.n	80090f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	73fb      	strb	r3, [r7, #15]
          break;
 80090f6:	e005      	b.n	8009104 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80090f8:	4b0a      	ldr	r3, [pc, #40]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0ef      	beq.n	80090e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d106      	bne.n	8009118 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800910a:	4b06      	ldr	r3, [pc, #24]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800910c:	695a      	ldr	r2, [r3, #20]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	4904      	ldr	r1, [pc, #16]	; (8009124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009114:	4313      	orrs	r3, r2
 8009116:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	40021000 	.word	0x40021000

08009128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d06c      	beq.n	8009214 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fa fc46 	bl	80039e0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	22ca      	movs	r2, #202	; 0xca
 8009162:	625a      	str	r2, [r3, #36]	; 0x24
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2253      	movs	r2, #83	; 0x53
 800916a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fa49 	bl	8009604 <RTC_EnterInitMode>
 8009172:	4603      	mov	r3, r0
 8009174:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d14b      	bne.n	8009214 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6812      	ldr	r2, [r2, #0]
 8009186:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800918a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6899      	ldr	r1, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	68d2      	ldr	r2, [r2, #12]
 80091b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6919      	ldr	r1, [r3, #16]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	041a      	lsls	r2, r3, #16
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fa4d 	bl	800966c <RTC_ExitInitMode>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d11b      	bne.n	8009214 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0203 	bic.w	r2, r2, #3
 80091ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	69da      	ldr	r2, [r3, #28]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	430a      	orrs	r2, r1
 8009202:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	22ff      	movs	r2, #255	; 0xff
 800920a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009214:	7bfb      	ldrb	r3, [r7, #15]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800921e:	b590      	push	{r4, r7, lr}
 8009220:	b087      	sub	sp, #28
 8009222:	af00      	add	r7, sp, #0
 8009224:	60f8      	str	r0, [r7, #12]
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <HAL_RTC_SetTime+0x1a>
 8009234:	2302      	movs	r3, #2
 8009236:	e08b      	b.n	8009350 <HAL_RTC_SetTime+0x132>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	22ca      	movs	r2, #202	; 0xca
 800924e:	625a      	str	r2, [r3, #36]	; 0x24
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2253      	movs	r2, #83	; 0x53
 8009256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f9d3 	bl	8009604 <RTC_EnterInitMode>
 800925e:	4603      	mov	r3, r0
 8009260:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009262:	7cfb      	ldrb	r3, [r7, #19]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d163      	bne.n	8009330 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d126      	bne.n	80092bc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009278:	2b00      	cmp	r3, #0
 800927a:	d102      	bne.n	8009282 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f000 fa2e 	bl	80096e8 <RTC_ByteToBcd2>
 800928c:	4603      	mov	r3, r0
 800928e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	785b      	ldrb	r3, [r3, #1]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fa27 	bl	80096e8 <RTC_ByteToBcd2>
 800929a:	4603      	mov	r3, r0
 800929c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800929e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	789b      	ldrb	r3, [r3, #2]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fa1f 	bl	80096e8 <RTC_ByteToBcd2>
 80092aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	78db      	ldrb	r3, [r3, #3]
 80092b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80092b6:	4313      	orrs	r3, r2
 80092b8:	617b      	str	r3, [r7, #20]
 80092ba:	e018      	b.n	80092ee <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80092dc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80092de:	68ba      	ldr	r2, [r7, #8]
 80092e0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80092e2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	78db      	ldrb	r3, [r3, #3]
 80092e8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80092ea:	4313      	orrs	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80092f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80092fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689a      	ldr	r2, [r3, #8]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800930c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6899      	ldr	r1, [r3, #8]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	691b      	ldr	r3, [r3, #16]
 800931c:	431a      	orrs	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f9a0 	bl	800966c <RTC_ExitInitMode>
 800932c:	4603      	mov	r3, r0
 800932e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	22ff      	movs	r2, #255	; 0xff
 8009336:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009338:	7cfb      	ldrb	r3, [r7, #19]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d103      	bne.n	8009346 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800934e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009350:	4618      	mov	r0, r3
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	bd90      	pop	{r4, r7, pc}

08009358 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009386:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800938a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009396:	b2da      	uxtb	r2, r3
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	0a1b      	lsrs	r3, r3, #8
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b4:	b2da      	uxtb	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	0d9b      	lsrs	r3, r3, #22
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d11a      	bne.n	8009406 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f9a7 	bl	8009728 <RTC_Bcd2ToByte>
 80093da:	4603      	mov	r3, r0
 80093dc:	461a      	mov	r2, r3
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	785b      	ldrb	r3, [r3, #1]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f99e 	bl	8009728 <RTC_Bcd2ToByte>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	789b      	ldrb	r3, [r3, #2]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f995 	bl	8009728 <RTC_Bcd2ToByte>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b087      	sub	sp, #28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_RTC_SetDate+0x1a>
 8009426:	2302      	movs	r3, #2
 8009428:	e075      	b.n	8009516 <HAL_RTC_SetDate+0x106>
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2202      	movs	r2, #2
 8009436:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10e      	bne.n	800945e <HAL_RTC_SetDate+0x4e>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	f003 0310 	and.w	r3, r3, #16
 8009448:	2b00      	cmp	r3, #0
 800944a:	d008      	beq.n	800945e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	f023 0310 	bic.w	r3, r3, #16
 8009454:	b2db      	uxtb	r3, r3
 8009456:	330a      	adds	r3, #10
 8009458:	b2da      	uxtb	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d11c      	bne.n	800949e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	78db      	ldrb	r3, [r3, #3]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f93d 	bl	80096e8 <RTC_ByteToBcd2>
 800946e:	4603      	mov	r3, r0
 8009470:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	785b      	ldrb	r3, [r3, #1]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f936 	bl	80096e8 <RTC_ByteToBcd2>
 800947c:	4603      	mov	r3, r0
 800947e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009480:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	789b      	ldrb	r3, [r3, #2]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f92e 	bl	80096e8 <RTC_ByteToBcd2>
 800948c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800948e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]
 800949c:	e00e      	b.n	80094bc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	78db      	ldrb	r3, [r3, #3]
 80094a2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80094aa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80094b0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80094b8:	4313      	orrs	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	22ca      	movs	r2, #202	; 0xca
 80094c2:	625a      	str	r2, [r3, #36]	; 0x24
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2253      	movs	r2, #83	; 0x53
 80094ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f899 	bl	8009604 <RTC_EnterInitMode>
 80094d2:	4603      	mov	r3, r0
 80094d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80094d6:	7cfb      	ldrb	r3, [r7, #19]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10c      	bne.n	80094f6 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80094e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094ea:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094ec:	68f8      	ldr	r0, [r7, #12]
 80094ee:	f000 f8bd 	bl	800966c <RTC_ExitInitMode>
 80094f2:	4603      	mov	r3, r0
 80094f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	22ff      	movs	r2, #255	; 0xff
 80094fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80094fe:	7cfb      	ldrb	r3, [r7, #19]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d103      	bne.n	800950c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2201      	movs	r2, #1
 8009508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009514:	7cfb      	ldrb	r3, [r7, #19]
}
 8009516:	4618      	mov	r0, r3
 8009518:	371c      	adds	r7, #28
 800951a:	46bd      	mov	sp, r7
 800951c:	bd90      	pop	{r4, r7, pc}

0800951e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b086      	sub	sp, #24
 8009522:	af00      	add	r7, sp, #0
 8009524:	60f8      	str	r0, [r7, #12]
 8009526:	60b9      	str	r1, [r7, #8]
 8009528:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009534:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009538:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	0c1b      	lsrs	r3, r3, #16
 800953e:	b2da      	uxtb	r2, r3
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	b2db      	uxtb	r3, r3
 800954a:	f003 031f 	and.w	r3, r3, #31
 800954e:	b2da      	uxtb	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800955c:	b2da      	uxtb	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	0b5b      	lsrs	r3, r3, #13
 8009566:	b2db      	uxtb	r3, r3
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	b2da      	uxtb	r2, r3
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d11a      	bne.n	80095ae <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	78db      	ldrb	r3, [r3, #3]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f8d3 	bl	8009728 <RTC_Bcd2ToByte>
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	785b      	ldrb	r3, [r3, #1]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f8ca 	bl	8009728 <RTC_Bcd2ToByte>
 8009594:	4603      	mov	r3, r0
 8009596:	461a      	mov	r2, r3
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	789b      	ldrb	r3, [r3, #2]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f000 f8c1 	bl	8009728 <RTC_Bcd2ToByte>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80095ce:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80095d0:	f7fb fb20 	bl	8004c14 <HAL_GetTick>
 80095d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095d6:	e009      	b.n	80095ec <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095d8:	f7fb fb1c 	bl	8004c14 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095e6:	d901      	bls.n	80095ec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e007      	b.n	80095fc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0ee      	beq.n	80095d8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d120      	bne.n	8009660 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f04f 32ff 	mov.w	r2, #4294967295
 8009626:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009628:	f7fb faf4 	bl	8004c14 <HAL_GetTick>
 800962c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800962e:	e00d      	b.n	800964c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009630:	f7fb faf0 	bl	8004c14 <HAL_GetTick>
 8009634:	4602      	mov	r2, r0
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800963e:	d905      	bls.n	800964c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2203      	movs	r2, #3
 8009648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <RTC_EnterInitMode+0x5c>
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	2b03      	cmp	r3, #3
 800965e:	d1e7      	bne.n	8009630 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009660:	7bfb      	ldrb	r3, [r7, #15]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009678:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <RTC_ExitInitMode+0x78>)
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	4a19      	ldr	r2, [pc, #100]	; (80096e4 <RTC_ExitInitMode+0x78>)
 800967e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009682:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009684:	4b17      	ldr	r3, [pc, #92]	; (80096e4 <RTC_ExitInitMode+0x78>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 0320 	and.w	r3, r3, #32
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10c      	bne.n	80096aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7ff ff91 	bl	80095b8 <HAL_RTC_WaitForSynchro>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01e      	beq.n	80096da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2203      	movs	r2, #3
 80096a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	73fb      	strb	r3, [r7, #15]
 80096a8:	e017      	b.n	80096da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096aa:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <RTC_ExitInitMode+0x78>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	4a0d      	ldr	r2, [pc, #52]	; (80096e4 <RTC_ExitInitMode+0x78>)
 80096b0:	f023 0320 	bic.w	r3, r3, #32
 80096b4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff ff7e 	bl	80095b8 <HAL_RTC_WaitForSynchro>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2203      	movs	r2, #3
 80096c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <RTC_ExitInitMode+0x78>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	4a04      	ldr	r2, [pc, #16]	; (80096e4 <RTC_ExitInitMode+0x78>)
 80096d4:	f043 0320 	orr.w	r3, r3, #32
 80096d8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80096da:	7bfb      	ldrb	r3, [r7, #15]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	40002800 	.word	0x40002800

080096e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4603      	mov	r3, r0
 80096f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80096fa:	e005      	b.n	8009708 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009702:	7afb      	ldrb	r3, [r7, #11]
 8009704:	3b0a      	subs	r3, #10
 8009706:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	2b09      	cmp	r3, #9
 800970c:	d8f6      	bhi.n	80096fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	011b      	lsls	r3, r3, #4
 8009714:	b2da      	uxtb	r2, r3
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	4313      	orrs	r3, r2
 800971a:	b2db      	uxtb	r3, r3
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	091b      	lsrs	r3, r3, #4
 8009736:	b2db      	uxtb	r3, r3
 8009738:	461a      	mov	r2, r3
 800973a:	0092      	lsls	r2, r2, #2
 800973c:	4413      	add	r3, r2
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	b2da      	uxtb	r2, r3
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	4413      	add	r3, r2
 800974e:	b2db      	uxtb	r3, r3
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e095      	b.n	800989a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d108      	bne.n	8009788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800977e:	d009      	beq.n	8009794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	61da      	str	r2, [r3, #28]
 8009786:	e005      	b.n	8009794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fa f986 	bl	8003ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097d4:	d902      	bls.n	80097dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]
 80097da:	e002      	b.n	80097e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80097ea:	d007      	beq.n	80097fc <HAL_SPI_Init+0xa0>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097f4:	d002      	beq.n	80097fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	f003 0302 	and.w	r3, r3, #2
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983e:	ea42 0103 	orr.w	r1, r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009846:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	0c1b      	lsrs	r3, r3, #16
 8009858:	f003 0204 	and.w	r2, r3, #4
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	f003 0310 	and.w	r3, r3, #16
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986a:	f003 0308 	and.w	r3, r3, #8
 800986e:	431a      	orrs	r2, r3
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009878:	ea42 0103 	orr.w	r1, r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b088      	sub	sp, #32
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	603b      	str	r3, [r7, #0]
 80098ae:	4613      	mov	r3, r2
 80098b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_SPI_Transmit+0x22>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e158      	b.n	8009b76 <HAL_SPI_Transmit+0x2d4>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098cc:	f7fb f9a2 	bl	8004c14 <HAL_GetTick>
 80098d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80098d2:	88fb      	ldrh	r3, [r7, #6]
 80098d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d002      	beq.n	80098e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80098e2:	2302      	movs	r3, #2
 80098e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098e6:	e13d      	b.n	8009b64 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <HAL_SPI_Transmit+0x52>
 80098ee:	88fb      	ldrh	r3, [r7, #6]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d102      	bne.n	80098fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80098f8:	e134      	b.n	8009b64 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2203      	movs	r2, #3
 80098fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	88fa      	ldrh	r2, [r7, #6]
 8009912:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	88fa      	ldrh	r2, [r7, #6]
 8009918:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009944:	d10f      	bne.n	8009966 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009954:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009964:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009970:	2b40      	cmp	r3, #64	; 0x40
 8009972:	d007      	beq.n	8009984 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009982:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800998c:	d94b      	bls.n	8009a26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d002      	beq.n	800999c <HAL_SPI_Transmit+0xfa>
 8009996:	8afb      	ldrh	r3, [r7, #22]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d13e      	bne.n	8009a1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a0:	881a      	ldrh	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ac:	1c9a      	adds	r2, r3, #2
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	3b01      	subs	r3, #1
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80099c0:	e02b      	b.n	8009a1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f003 0302 	and.w	r3, r3, #2
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d112      	bne.n	80099f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d4:	881a      	ldrh	r2, [r3, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	1c9a      	adds	r2, r3, #2
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	3b01      	subs	r3, #1
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099f4:	e011      	b.n	8009a1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099f6:	f7fb f90d 	bl	8004c14 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d803      	bhi.n	8009a0e <HAL_SPI_Transmit+0x16c>
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0c:	d102      	bne.n	8009a14 <HAL_SPI_Transmit+0x172>
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d102      	bne.n	8009a1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009a18:	e0a4      	b.n	8009b64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1ce      	bne.n	80099c2 <HAL_SPI_Transmit+0x120>
 8009a24:	e07c      	b.n	8009b20 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <HAL_SPI_Transmit+0x192>
 8009a2e:	8afb      	ldrh	r3, [r7, #22]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d170      	bne.n	8009b16 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d912      	bls.n	8009a64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a42:	881a      	ldrh	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	1c9a      	adds	r2, r3, #2
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3b02      	subs	r3, #2
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a62:	e058      	b.n	8009b16 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	330c      	adds	r3, #12
 8009a6e:	7812      	ldrb	r2, [r2, #0]
 8009a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	3b01      	subs	r3, #1
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009a8a:	e044      	b.n	8009b16 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d12b      	bne.n	8009af2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d912      	bls.n	8009aca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa8:	881a      	ldrh	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	1c9a      	adds	r2, r3, #2
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	3b02      	subs	r3, #2
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009ac8:	e025      	b.n	8009b16 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	330c      	adds	r3, #12
 8009ad4:	7812      	ldrb	r2, [r2, #0]
 8009ad6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009af0:	e011      	b.n	8009b16 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009af2:	f7fb f88f 	bl	8004c14 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d803      	bhi.n	8009b0a <HAL_SPI_Transmit+0x268>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b08:	d102      	bne.n	8009b10 <HAL_SPI_Transmit+0x26e>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009b14:	e026      	b.n	8009b64 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d1b5      	bne.n	8009a8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b20:	69ba      	ldr	r2, [r7, #24]
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f000 f949 	bl	8009dbc <SPI_EndRxTxTransaction>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2220      	movs	r2, #32
 8009b34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d10a      	bne.n	8009b54 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b3e:	2300      	movs	r3, #0
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	613b      	str	r3, [r7, #16]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	613b      	str	r3, [r7, #16]
 8009b52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	77fb      	strb	r3, [r7, #31]
 8009b60:	e000      	b.n	8009b64 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8009b62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b74:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b90:	f7fb f840 	bl	8004c14 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	1a9b      	subs	r3, r3, r2
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009ba0:	f7fb f838 	bl	8004c14 <HAL_GetTick>
 8009ba4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ba6:	4b39      	ldr	r3, [pc, #228]	; (8009c8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	015b      	lsls	r3, r3, #5
 8009bac:	0d1b      	lsrs	r3, r3, #20
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bb6:	e054      	b.n	8009c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d050      	beq.n	8009c62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009bc0:	f7fb f828 	bl	8004c14 <HAL_GetTick>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	69fa      	ldr	r2, [r7, #28]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d902      	bls.n	8009bd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d13d      	bne.n	8009c52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009be4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bee:	d111      	bne.n	8009c14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bf8:	d004      	beq.n	8009c04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c02:	d107      	bne.n	8009c14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c1c:	d10f      	bne.n	8009c3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e017      	b.n	8009c82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	bf0c      	ite	eq
 8009c72:	2301      	moveq	r3, #1
 8009c74:	2300      	movne	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	461a      	mov	r2, r3
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d19b      	bne.n	8009bb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3720      	adds	r7, #32
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	2000013c 	.word	0x2000013c

08009c90 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b08a      	sub	sp, #40	; 0x28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ca2:	f7fa ffb7 	bl	8004c14 <HAL_GetTick>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	1a9b      	subs	r3, r3, r2
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	4413      	add	r3, r2
 8009cb0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009cb2:	f7fa ffaf 	bl	8004c14 <HAL_GetTick>
 8009cb6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	330c      	adds	r3, #12
 8009cbe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009cc0:	4b3d      	ldr	r3, [pc, #244]	; (8009db8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	00da      	lsls	r2, r3, #3
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	0d1b      	lsrs	r3, r3, #20
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	fb02 f303 	mul.w	r3, r2, r3
 8009cd6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009cd8:	e060      	b.n	8009d9c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ce0:	d107      	bne.n	8009cf2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d104      	bne.n	8009cf2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf8:	d050      	beq.n	8009d9c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009cfa:	f7fa ff8b 	bl	8004c14 <HAL_GetTick>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d902      	bls.n	8009d10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d13d      	bne.n	8009d8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009d1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d28:	d111      	bne.n	8009d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d32:	d004      	beq.n	8009d3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3c:	d107      	bne.n	8009d4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d56:	d10f      	bne.n	8009d78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e010      	b.n	8009dae <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	4013      	ands	r3, r2
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d196      	bne.n	8009cda <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3728      	adds	r7, #40	; 0x28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	2000013c 	.word	0x2000013c

08009dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f7ff ff5b 	bl	8009c90 <SPI_WaitFifoStateUntilTimeout>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d007      	beq.n	8009df0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009de4:	f043 0220 	orr.w	r2, r3, #32
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e027      	b.n	8009e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2200      	movs	r2, #0
 8009df8:	2180      	movs	r1, #128	; 0x80
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff fec0 	bl	8009b80 <SPI_WaitFlagStateUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d007      	beq.n	8009e16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e0a:	f043 0220 	orr.w	r2, r3, #32
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e014      	b.n	8009e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f7ff ff34 	bl	8009c90 <SPI_WaitFifoStateUntilTimeout>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e32:	f043 0220 	orr.w	r2, r3, #32
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e000      	b.n	8009e40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e049      	b.n	8009eee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fa f948 	bl	8004104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f001 f806 	bl	800ae98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d001      	beq.n	8009f10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e047      	b.n	8009fa0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2202      	movs	r2, #2
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a23      	ldr	r2, [pc, #140]	; (8009fac <HAL_TIM_Base_Start+0xb4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01d      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f2a:	d018      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a1f      	ldr	r2, [pc, #124]	; (8009fb0 <HAL_TIM_Base_Start+0xb8>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d013      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a1e      	ldr	r2, [pc, #120]	; (8009fb4 <HAL_TIM_Base_Start+0xbc>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d00e      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a1c      	ldr	r2, [pc, #112]	; (8009fb8 <HAL_TIM_Base_Start+0xc0>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d009      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a1b      	ldr	r2, [pc, #108]	; (8009fbc <HAL_TIM_Base_Start+0xc4>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d004      	beq.n	8009f5e <HAL_TIM_Base_Start+0x66>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a19      	ldr	r2, [pc, #100]	; (8009fc0 <HAL_TIM_Base_Start+0xc8>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d115      	bne.n	8009f8a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	4b17      	ldr	r3, [pc, #92]	; (8009fc4 <HAL_TIM_Base_Start+0xcc>)
 8009f66:	4013      	ands	r3, r2
 8009f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2b06      	cmp	r3, #6
 8009f6e:	d015      	beq.n	8009f9c <HAL_TIM_Base_Start+0xa4>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f76:	d011      	beq.n	8009f9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f042 0201 	orr.w	r2, r2, #1
 8009f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f88:	e008      	b.n	8009f9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f042 0201 	orr.w	r2, r2, #1
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e000      	b.n	8009f9e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	40012c00 	.word	0x40012c00
 8009fb0:	40000400 	.word	0x40000400
 8009fb4:	40000800 	.word	0x40000800
 8009fb8:	40000c00 	.word	0x40000c00
 8009fbc:	40013400 	.word	0x40013400
 8009fc0:	40014000 	.word	0x40014000
 8009fc4:	00010007 	.word	0x00010007

08009fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e049      	b.n	800a06e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d106      	bne.n	8009ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f841 	bl	800a076 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f000 ff46 	bl	800ae98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2201      	movs	r2, #1
 800a020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a076:	b480      	push	{r7}
 800a078:	b083      	sub	sp, #12
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a07e:	bf00      	nop
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
	...

0800a08c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d109      	bne.n	800a0b0 <HAL_TIM_PWM_Start+0x24>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	bf14      	ite	ne
 800a0a8:	2301      	movne	r3, #1
 800a0aa:	2300      	moveq	r3, #0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	e03c      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	d109      	bne.n	800a0ca <HAL_TIM_PWM_Start+0x3e>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	bf14      	ite	ne
 800a0c2:	2301      	movne	r3, #1
 800a0c4:	2300      	moveq	r3, #0
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	e02f      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	2b08      	cmp	r3, #8
 800a0ce:	d109      	bne.n	800a0e4 <HAL_TIM_PWM_Start+0x58>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	bf14      	ite	ne
 800a0dc:	2301      	movne	r3, #1
 800a0de:	2300      	moveq	r3, #0
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	e022      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	2b0c      	cmp	r3, #12
 800a0e8:	d109      	bne.n	800a0fe <HAL_TIM_PWM_Start+0x72>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	bf14      	ite	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	2300      	moveq	r3, #0
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	e015      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2b10      	cmp	r3, #16
 800a102:	d109      	bne.n	800a118 <HAL_TIM_PWM_Start+0x8c>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b01      	cmp	r3, #1
 800a10e:	bf14      	ite	ne
 800a110:	2301      	movne	r3, #1
 800a112:	2300      	moveq	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	e008      	b.n	800a12a <HAL_TIM_PWM_Start+0x9e>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b01      	cmp	r3, #1
 800a122:	bf14      	ite	ne
 800a124:	2301      	movne	r3, #1
 800a126:	2300      	moveq	r3, #0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e09c      	b.n	800a26c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d104      	bne.n	800a142 <HAL_TIM_PWM_Start+0xb6>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2202      	movs	r2, #2
 800a13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a140:	e023      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b04      	cmp	r3, #4
 800a146:	d104      	bne.n	800a152 <HAL_TIM_PWM_Start+0xc6>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a150:	e01b      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b08      	cmp	r3, #8
 800a156:	d104      	bne.n	800a162 <HAL_TIM_PWM_Start+0xd6>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a160:	e013      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b0c      	cmp	r3, #12
 800a166:	d104      	bne.n	800a172 <HAL_TIM_PWM_Start+0xe6>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a170:	e00b      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b10      	cmp	r3, #16
 800a176:	d104      	bne.n	800a182 <HAL_TIM_PWM_Start+0xf6>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a180:	e003      	b.n	800a18a <HAL_TIM_PWM_Start+0xfe>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2202      	movs	r2, #2
 800a186:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2201      	movs	r2, #1
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	4618      	mov	r0, r3
 800a194:	f001 fc42 	bl	800ba1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a35      	ldr	r2, [pc, #212]	; (800a274 <HAL_TIM_PWM_Start+0x1e8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d013      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a34      	ldr	r2, [pc, #208]	; (800a278 <HAL_TIM_PWM_Start+0x1ec>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00e      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a32      	ldr	r2, [pc, #200]	; (800a27c <HAL_TIM_PWM_Start+0x1f0>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d009      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a31      	ldr	r2, [pc, #196]	; (800a280 <HAL_TIM_PWM_Start+0x1f4>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d004      	beq.n	800a1ca <HAL_TIM_PWM_Start+0x13e>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a2f      	ldr	r2, [pc, #188]	; (800a284 <HAL_TIM_PWM_Start+0x1f8>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d101      	bne.n	800a1ce <HAL_TIM_PWM_Start+0x142>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e000      	b.n	800a1d0 <HAL_TIM_PWM_Start+0x144>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a1e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a22      	ldr	r2, [pc, #136]	; (800a274 <HAL_TIM_PWM_Start+0x1e8>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d01d      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f6:	d018      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a22      	ldr	r2, [pc, #136]	; (800a288 <HAL_TIM_PWM_Start+0x1fc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d013      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a21      	ldr	r2, [pc, #132]	; (800a28c <HAL_TIM_PWM_Start+0x200>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d00e      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <HAL_TIM_PWM_Start+0x204>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d009      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a17      	ldr	r2, [pc, #92]	; (800a278 <HAL_TIM_PWM_Start+0x1ec>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d004      	beq.n	800a22a <HAL_TIM_PWM_Start+0x19e>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a15      	ldr	r2, [pc, #84]	; (800a27c <HAL_TIM_PWM_Start+0x1f0>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d115      	bne.n	800a256 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	4b18      	ldr	r3, [pc, #96]	; (800a294 <HAL_TIM_PWM_Start+0x208>)
 800a232:	4013      	ands	r3, r2
 800a234:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b06      	cmp	r3, #6
 800a23a:	d015      	beq.n	800a268 <HAL_TIM_PWM_Start+0x1dc>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a242:	d011      	beq.n	800a268 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0201 	orr.w	r2, r2, #1
 800a252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a254:	e008      	b.n	800a268 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f042 0201 	orr.w	r2, r2, #1
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e000      	b.n	800a26a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a268:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	40012c00 	.word	0x40012c00
 800a278:	40013400 	.word	0x40013400
 800a27c:	40014000 	.word	0x40014000
 800a280:	40014400 	.word	0x40014400
 800a284:	40014800 	.word	0x40014800
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	00010007 	.word	0x00010007

0800a298 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e049      	b.n	800a33e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d106      	bne.n	800a2c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f841 	bl	800a346 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	f000 fdde 	bl	800ae98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a34e:	bf00      	nop
 800a350:	370c      	adds	r7, #12
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
	...

0800a35c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <HAL_TIM_IC_Start_IT+0x1e>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a376:	b2db      	uxtb	r3, r3
 800a378:	e023      	b.n	800a3c2 <HAL_TIM_IC_Start_IT+0x66>
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	2b04      	cmp	r3, #4
 800a37e:	d104      	bne.n	800a38a <HAL_TIM_IC_Start_IT+0x2e>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a386:	b2db      	uxtb	r3, r3
 800a388:	e01b      	b.n	800a3c2 <HAL_TIM_IC_Start_IT+0x66>
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d104      	bne.n	800a39a <HAL_TIM_IC_Start_IT+0x3e>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a396:	b2db      	uxtb	r3, r3
 800a398:	e013      	b.n	800a3c2 <HAL_TIM_IC_Start_IT+0x66>
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	2b0c      	cmp	r3, #12
 800a39e:	d104      	bne.n	800a3aa <HAL_TIM_IC_Start_IT+0x4e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	e00b      	b.n	800a3c2 <HAL_TIM_IC_Start_IT+0x66>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b10      	cmp	r3, #16
 800a3ae:	d104      	bne.n	800a3ba <HAL_TIM_IC_Start_IT+0x5e>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	e003      	b.n	800a3c2 <HAL_TIM_IC_Start_IT+0x66>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d104      	bne.n	800a3d4 <HAL_TIM_IC_Start_IT+0x78>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	e013      	b.n	800a3fc <HAL_TIM_IC_Start_IT+0xa0>
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d104      	bne.n	800a3e4 <HAL_TIM_IC_Start_IT+0x88>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	e00b      	b.n	800a3fc <HAL_TIM_IC_Start_IT+0xa0>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d104      	bne.n	800a3f4 <HAL_TIM_IC_Start_IT+0x98>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	e003      	b.n	800a3fc <HAL_TIM_IC_Start_IT+0xa0>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3fe:	7bbb      	ldrb	r3, [r7, #14]
 800a400:	2b01      	cmp	r3, #1
 800a402:	d102      	bne.n	800a40a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a404:	7b7b      	ldrb	r3, [r7, #13]
 800a406:	2b01      	cmp	r3, #1
 800a408:	d001      	beq.n	800a40e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	e0dd      	b.n	800a5ca <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <HAL_TIM_IC_Start_IT+0xc2>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2202      	movs	r2, #2
 800a418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a41c:	e023      	b.n	800a466 <HAL_TIM_IC_Start_IT+0x10a>
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b04      	cmp	r3, #4
 800a422:	d104      	bne.n	800a42e <HAL_TIM_IC_Start_IT+0xd2>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2202      	movs	r2, #2
 800a428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a42c:	e01b      	b.n	800a466 <HAL_TIM_IC_Start_IT+0x10a>
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	2b08      	cmp	r3, #8
 800a432:	d104      	bne.n	800a43e <HAL_TIM_IC_Start_IT+0xe2>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a43c:	e013      	b.n	800a466 <HAL_TIM_IC_Start_IT+0x10a>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	2b0c      	cmp	r3, #12
 800a442:	d104      	bne.n	800a44e <HAL_TIM_IC_Start_IT+0xf2>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2202      	movs	r2, #2
 800a448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a44c:	e00b      	b.n	800a466 <HAL_TIM_IC_Start_IT+0x10a>
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b10      	cmp	r3, #16
 800a452:	d104      	bne.n	800a45e <HAL_TIM_IC_Start_IT+0x102>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a45c:	e003      	b.n	800a466 <HAL_TIM_IC_Start_IT+0x10a>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2202      	movs	r2, #2
 800a462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d104      	bne.n	800a476 <HAL_TIM_IC_Start_IT+0x11a>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a474:	e013      	b.n	800a49e <HAL_TIM_IC_Start_IT+0x142>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d104      	bne.n	800a486 <HAL_TIM_IC_Start_IT+0x12a>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a484:	e00b      	b.n	800a49e <HAL_TIM_IC_Start_IT+0x142>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d104      	bne.n	800a496 <HAL_TIM_IC_Start_IT+0x13a>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a494:	e003      	b.n	800a49e <HAL_TIM_IC_Start_IT+0x142>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2202      	movs	r2, #2
 800a49a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b0c      	cmp	r3, #12
 800a4a2:	d841      	bhi.n	800a528 <HAL_TIM_IC_Start_IT+0x1cc>
 800a4a4:	a201      	add	r2, pc, #4	; (adr r2, 800a4ac <HAL_TIM_IC_Start_IT+0x150>)
 800a4a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a4e1 	.word	0x0800a4e1
 800a4b0:	0800a529 	.word	0x0800a529
 800a4b4:	0800a529 	.word	0x0800a529
 800a4b8:	0800a529 	.word	0x0800a529
 800a4bc:	0800a4f3 	.word	0x0800a4f3
 800a4c0:	0800a529 	.word	0x0800a529
 800a4c4:	0800a529 	.word	0x0800a529
 800a4c8:	0800a529 	.word	0x0800a529
 800a4cc:	0800a505 	.word	0x0800a505
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a529 	.word	0x0800a529
 800a4d8:	0800a529 	.word	0x0800a529
 800a4dc:	0800a517 	.word	0x0800a517
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0202 	orr.w	r2, r2, #2
 800a4ee:	60da      	str	r2, [r3, #12]
      break;
 800a4f0:	e01d      	b.n	800a52e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0204 	orr.w	r2, r2, #4
 800a500:	60da      	str	r2, [r3, #12]
      break;
 800a502:	e014      	b.n	800a52e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68da      	ldr	r2, [r3, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0208 	orr.w	r2, r2, #8
 800a512:	60da      	str	r2, [r3, #12]
      break;
 800a514:	e00b      	b.n	800a52e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	68da      	ldr	r2, [r3, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f042 0210 	orr.w	r2, r2, #16
 800a524:	60da      	str	r2, [r3, #12]
      break;
 800a526:	e002      	b.n	800a52e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	73fb      	strb	r3, [r7, #15]
      break;
 800a52c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d149      	bne.n	800a5c8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2201      	movs	r2, #1
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f001 fa6d 	bl	800ba1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a23      	ldr	r2, [pc, #140]	; (800a5d4 <HAL_TIM_IC_Start_IT+0x278>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d01d      	beq.n	800a588 <HAL_TIM_IC_Start_IT+0x22c>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a554:	d018      	beq.n	800a588 <HAL_TIM_IC_Start_IT+0x22c>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a1f      	ldr	r2, [pc, #124]	; (800a5d8 <HAL_TIM_IC_Start_IT+0x27c>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d013      	beq.n	800a588 <HAL_TIM_IC_Start_IT+0x22c>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a1d      	ldr	r2, [pc, #116]	; (800a5dc <HAL_TIM_IC_Start_IT+0x280>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d00e      	beq.n	800a588 <HAL_TIM_IC_Start_IT+0x22c>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a1c      	ldr	r2, [pc, #112]	; (800a5e0 <HAL_TIM_IC_Start_IT+0x284>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d009      	beq.n	800a588 <HAL_TIM_IC_Start_IT+0x22c>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a1a      	ldr	r2, [pc, #104]	; (800a5e4 <HAL_TIM_IC_Start_IT+0x288>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d004      	beq.n	800a588 <HAL_TIM_IC_Start_IT+0x22c>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a19      	ldr	r2, [pc, #100]	; (800a5e8 <HAL_TIM_IC_Start_IT+0x28c>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d115      	bne.n	800a5b4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689a      	ldr	r2, [r3, #8]
 800a58e:	4b17      	ldr	r3, [pc, #92]	; (800a5ec <HAL_TIM_IC_Start_IT+0x290>)
 800a590:	4013      	ands	r3, r2
 800a592:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2b06      	cmp	r3, #6
 800a598:	d015      	beq.n	800a5c6 <HAL_TIM_IC_Start_IT+0x26a>
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5a0:	d011      	beq.n	800a5c6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f042 0201 	orr.w	r2, r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b2:	e008      	b.n	800a5c6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0201 	orr.w	r2, r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	e000      	b.n	800a5c8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5c6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	40012c00 	.word	0x40012c00
 800a5d8:	40000400 	.word	0x40000400
 800a5dc:	40000800 	.word	0x40000800
 800a5e0:	40000c00 	.word	0x40000c00
 800a5e4:	40013400 	.word	0x40013400
 800a5e8:	40014000 	.word	0x40014000
 800a5ec:	00010007 	.word	0x00010007

0800a5f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	f003 0302 	and.w	r3, r3, #2
 800a602:	2b02      	cmp	r3, #2
 800a604:	d122      	bne.n	800a64c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f003 0302 	and.w	r3, r3, #2
 800a610:	2b02      	cmp	r3, #2
 800a612:	d11b      	bne.n	800a64c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f06f 0202 	mvn.w	r2, #2
 800a61c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	699b      	ldr	r3, [r3, #24]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f7f7 ffb0 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 800a638:	e005      	b.n	800a646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fc02 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fc09 	bl	800ae58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2200      	movs	r2, #0
 800a64a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b04      	cmp	r3, #4
 800a658:	d122      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b04      	cmp	r3, #4
 800a666:	d11b      	bne.n	800a6a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f06f 0204 	mvn.w	r2, #4
 800a670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2202      	movs	r2, #2
 800a676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7f7 ff86 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 800a68c:	e005      	b.n	800a69a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fbd8 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fbdf 	bl	800ae58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	f003 0308 	and.w	r3, r3, #8
 800a6aa:	2b08      	cmp	r3, #8
 800a6ac:	d122      	bne.n	800a6f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b08      	cmp	r3, #8
 800a6ba:	d11b      	bne.n	800a6f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f06f 0208 	mvn.w	r2, #8
 800a6c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2204      	movs	r2, #4
 800a6ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f003 0303 	and.w	r3, r3, #3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f7f7 ff5c 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 800a6e0:	e005      	b.n	800a6ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fbae 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 fbb5 	bl	800ae58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	f003 0310 	and.w	r3, r3, #16
 800a6fe:	2b10      	cmp	r3, #16
 800a700:	d122      	bne.n	800a748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f003 0310 	and.w	r3, r3, #16
 800a70c:	2b10      	cmp	r3, #16
 800a70e:	d11b      	bne.n	800a748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f06f 0210 	mvn.w	r2, #16
 800a718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2208      	movs	r2, #8
 800a71e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	69db      	ldr	r3, [r3, #28]
 800a726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7f7 ff32 	bl	8002598 <HAL_TIM_IC_CaptureCallback>
 800a734:	e005      	b.n	800a742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fb84 	bl	800ae44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fb8b 	bl	800ae58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b01      	cmp	r3, #1
 800a754:	d10e      	bne.n	800a774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b01      	cmp	r3, #1
 800a762:	d107      	bne.n	800a774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f06f 0201 	mvn.w	r2, #1
 800a76c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fb5e 	bl	800ae30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77e:	2b80      	cmp	r3, #128	; 0x80
 800a780:	d10e      	bne.n	800a7a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68db      	ldr	r3, [r3, #12]
 800a788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a78c:	2b80      	cmp	r3, #128	; 0x80
 800a78e:	d107      	bne.n	800a7a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f001 fa74 	bl	800bc88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ae:	d10e      	bne.n	800a7ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ba:	2b80      	cmp	r3, #128	; 0x80
 800a7bc:	d107      	bne.n	800a7ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f001 fa67 	bl	800bc9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d8:	2b40      	cmp	r3, #64	; 0x40
 800a7da:	d10e      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e6:	2b40      	cmp	r3, #64	; 0x40
 800a7e8:	d107      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fb39 	bl	800ae6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0320 	and.w	r3, r3, #32
 800a804:	2b20      	cmp	r3, #32
 800a806:	d10e      	bne.n	800a826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b20      	cmp	r3, #32
 800a814:	d107      	bne.n	800a826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0220 	mvn.w	r2, #32
 800a81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 fa27 	bl	800bc74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b086      	sub	sp, #24
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	60b9      	str	r1, [r7, #8]
 800a838:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a844:	2b01      	cmp	r3, #1
 800a846:	d101      	bne.n	800a84c <HAL_TIM_IC_ConfigChannel+0x1e>
 800a848:	2302      	movs	r3, #2
 800a84a:	e088      	b.n	800a95e <HAL_TIM_IC_ConfigChannel+0x130>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d11b      	bne.n	800a892 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6819      	ldr	r1, [r3, #0]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f000 ff19 	bl	800b6a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	699a      	ldr	r2, [r3, #24]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 020c 	bic.w	r2, r2, #12
 800a87c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6999      	ldr	r1, [r3, #24]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	689a      	ldr	r2, [r3, #8]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	430a      	orrs	r2, r1
 800a88e:	619a      	str	r2, [r3, #24]
 800a890:	e060      	b.n	800a954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b04      	cmp	r3, #4
 800a896:	d11c      	bne.n	800a8d2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6818      	ldr	r0, [r3, #0]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	6819      	ldr	r1, [r3, #0]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f000 ff97 	bl	800b7da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699a      	ldr	r2, [r3, #24]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a8ba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6999      	ldr	r1, [r3, #24]
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	021a      	lsls	r2, r3, #8
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	619a      	str	r2, [r3, #24]
 800a8d0:	e040      	b.n	800a954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2b08      	cmp	r3, #8
 800a8d6:	d11b      	bne.n	800a910 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f000 ffe4 	bl	800b8b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	69da      	ldr	r2, [r3, #28]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 020c 	bic.w	r2, r2, #12
 800a8fa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	69d9      	ldr	r1, [r3, #28]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	61da      	str	r2, [r3, #28]
 800a90e:	e021      	b.n	800a954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b0c      	cmp	r3, #12
 800a914:	d11c      	bne.n	800a950 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	6819      	ldr	r1, [r3, #0]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f001 f801 	bl	800b92c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	69da      	ldr	r2, [r3, #28]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a938:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	69d9      	ldr	r1, [r3, #28]
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	021a      	lsls	r2, r3, #8
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	61da      	str	r2, [r3, #28]
 800a94e:	e001      	b.n	800a954 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a982:	2302      	movs	r3, #2
 800a984:	e0ff      	b.n	800ab86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b14      	cmp	r3, #20
 800a992:	f200 80f0 	bhi.w	800ab76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a996:	a201      	add	r2, pc, #4	; (adr r2, 800a99c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a99c:	0800a9f1 	.word	0x0800a9f1
 800a9a0:	0800ab77 	.word	0x0800ab77
 800a9a4:	0800ab77 	.word	0x0800ab77
 800a9a8:	0800ab77 	.word	0x0800ab77
 800a9ac:	0800aa31 	.word	0x0800aa31
 800a9b0:	0800ab77 	.word	0x0800ab77
 800a9b4:	0800ab77 	.word	0x0800ab77
 800a9b8:	0800ab77 	.word	0x0800ab77
 800a9bc:	0800aa73 	.word	0x0800aa73
 800a9c0:	0800ab77 	.word	0x0800ab77
 800a9c4:	0800ab77 	.word	0x0800ab77
 800a9c8:	0800ab77 	.word	0x0800ab77
 800a9cc:	0800aab3 	.word	0x0800aab3
 800a9d0:	0800ab77 	.word	0x0800ab77
 800a9d4:	0800ab77 	.word	0x0800ab77
 800a9d8:	0800ab77 	.word	0x0800ab77
 800a9dc:	0800aaf5 	.word	0x0800aaf5
 800a9e0:	0800ab77 	.word	0x0800ab77
 800a9e4:	0800ab77 	.word	0x0800ab77
 800a9e8:	0800ab77 	.word	0x0800ab77
 800a9ec:	0800ab35 	.word	0x0800ab35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68b9      	ldr	r1, [r7, #8]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fae8 	bl	800afcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0208 	orr.w	r2, r2, #8
 800aa0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699a      	ldr	r2, [r3, #24]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f022 0204 	bic.w	r2, r2, #4
 800aa1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6999      	ldr	r1, [r3, #24]
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	691a      	ldr	r2, [r3, #16]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	619a      	str	r2, [r3, #24]
      break;
 800aa2e:	e0a5      	b.n	800ab7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fb58 	bl	800b0ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699a      	ldr	r2, [r3, #24]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	699a      	ldr	r2, [r3, #24]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6999      	ldr	r1, [r3, #24]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	021a      	lsls	r2, r3, #8
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	619a      	str	r2, [r3, #24]
      break;
 800aa70:	e084      	b.n	800ab7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 fbc1 	bl	800b200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69da      	ldr	r2, [r3, #28]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f042 0208 	orr.w	r2, r2, #8
 800aa8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69da      	ldr	r2, [r3, #28]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f022 0204 	bic.w	r2, r2, #4
 800aa9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	69d9      	ldr	r1, [r3, #28]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	691a      	ldr	r2, [r3, #16]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	430a      	orrs	r2, r1
 800aaae:	61da      	str	r2, [r3, #28]
      break;
 800aab0:	e064      	b.n	800ab7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68b9      	ldr	r1, [r7, #8]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f000 fc29 	bl	800b310 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	69da      	ldr	r2, [r3, #28]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aacc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	69da      	ldr	r2, [r3, #28]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aadc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	69d9      	ldr	r1, [r3, #28]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	021a      	lsls	r2, r3, #8
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	61da      	str	r2, [r3, #28]
      break;
 800aaf2:	e043      	b.n	800ab7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 fc72 	bl	800b3e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f042 0208 	orr.w	r2, r2, #8
 800ab0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f022 0204 	bic.w	r2, r2, #4
 800ab1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	691a      	ldr	r2, [r3, #16]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	430a      	orrs	r2, r1
 800ab30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab32:	e023      	b.n	800ab7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68b9      	ldr	r1, [r7, #8]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fcb6 	bl	800b4ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	021a      	lsls	r2, r3, #8
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ab74:	e002      	b.n	800ab7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	75fb      	strb	r3, [r7, #23]
      break;
 800ab7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop

0800ab90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d101      	bne.n	800abac <HAL_TIM_ConfigClockSource+0x1c>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e0b6      	b.n	800ad1a <HAL_TIM_ConfigClockSource+0x18a>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800abce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe8:	d03e      	beq.n	800ac68 <HAL_TIM_ConfigClockSource+0xd8>
 800abea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abee:	f200 8087 	bhi.w	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800abf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abf6:	f000 8086 	beq.w	800ad06 <HAL_TIM_ConfigClockSource+0x176>
 800abfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abfe:	d87f      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac00:	2b70      	cmp	r3, #112	; 0x70
 800ac02:	d01a      	beq.n	800ac3a <HAL_TIM_ConfigClockSource+0xaa>
 800ac04:	2b70      	cmp	r3, #112	; 0x70
 800ac06:	d87b      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac08:	2b60      	cmp	r3, #96	; 0x60
 800ac0a:	d050      	beq.n	800acae <HAL_TIM_ConfigClockSource+0x11e>
 800ac0c:	2b60      	cmp	r3, #96	; 0x60
 800ac0e:	d877      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac10:	2b50      	cmp	r3, #80	; 0x50
 800ac12:	d03c      	beq.n	800ac8e <HAL_TIM_ConfigClockSource+0xfe>
 800ac14:	2b50      	cmp	r3, #80	; 0x50
 800ac16:	d873      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac18:	2b40      	cmp	r3, #64	; 0x40
 800ac1a:	d058      	beq.n	800acce <HAL_TIM_ConfigClockSource+0x13e>
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	d86f      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac20:	2b30      	cmp	r3, #48	; 0x30
 800ac22:	d064      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x15e>
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d86b      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d060      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x15e>
 800ac2c:	2b20      	cmp	r3, #32
 800ac2e:	d867      	bhi.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d05c      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x15e>
 800ac34:	2b10      	cmp	r3, #16
 800ac36:	d05a      	beq.n	800acee <HAL_TIM_ConfigClockSource+0x15e>
 800ac38:	e062      	b.n	800ad00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6818      	ldr	r0, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6899      	ldr	r1, [r3, #8]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	f000 fec7 	bl	800b9dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	68ba      	ldr	r2, [r7, #8]
 800ac64:	609a      	str	r2, [r3, #8]
      break;
 800ac66:	e04f      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	6899      	ldr	r1, [r3, #8]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	685a      	ldr	r2, [r3, #4]
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	f000 feb0 	bl	800b9dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	689a      	ldr	r2, [r3, #8]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac8a:	609a      	str	r2, [r3, #8]
      break;
 800ac8c:	e03c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6818      	ldr	r0, [r3, #0]
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	6859      	ldr	r1, [r3, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	f000 fd6e 	bl	800b77c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2150      	movs	r1, #80	; 0x50
 800aca6:	4618      	mov	r0, r3
 800aca8:	f000 fe7d 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800acac:	e02c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6859      	ldr	r1, [r3, #4]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	461a      	mov	r2, r3
 800acbc:	f000 fdca 	bl	800b854 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2160      	movs	r1, #96	; 0x60
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fe6d 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800accc:	e01c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6818      	ldr	r0, [r3, #0]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	6859      	ldr	r1, [r3, #4]
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	461a      	mov	r2, r3
 800acdc:	f000 fd4e 	bl	800b77c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2140      	movs	r1, #64	; 0x40
 800ace6:	4618      	mov	r0, r3
 800ace8:	f000 fe5d 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800acec:	e00c      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4619      	mov	r1, r3
 800acf8:	4610      	mov	r0, r2
 800acfa:	f000 fe54 	bl	800b9a6 <TIM_ITRx_SetConfig>
      break;
 800acfe:	e003      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	73fb      	strb	r3, [r7, #15]
      break;
 800ad04:	e000      	b.n	800ad08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ad06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b082      	sub	sp, #8
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d101      	bne.n	800ad3a <HAL_TIM_SlaveConfigSynchro+0x18>
 800ad36:	2302      	movs	r3, #2
 800ad38:	e031      	b.n	800ad9e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2202      	movs	r2, #2
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fc13 	bl	800b578 <TIM_SlaveTimer_SetConfig>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d009      	beq.n	800ad6c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e018      	b.n	800ad9e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68da      	ldr	r2, [r3, #12]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad7a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68da      	ldr	r2, [r3, #12]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ad8a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3708      	adds	r7, #8
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b0c      	cmp	r3, #12
 800adba:	d831      	bhi.n	800ae20 <HAL_TIM_ReadCapturedValue+0x78>
 800adbc:	a201      	add	r2, pc, #4	; (adr r2, 800adc4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800adbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc2:	bf00      	nop
 800adc4:	0800adf9 	.word	0x0800adf9
 800adc8:	0800ae21 	.word	0x0800ae21
 800adcc:	0800ae21 	.word	0x0800ae21
 800add0:	0800ae21 	.word	0x0800ae21
 800add4:	0800ae03 	.word	0x0800ae03
 800add8:	0800ae21 	.word	0x0800ae21
 800addc:	0800ae21 	.word	0x0800ae21
 800ade0:	0800ae21 	.word	0x0800ae21
 800ade4:	0800ae0d 	.word	0x0800ae0d
 800ade8:	0800ae21 	.word	0x0800ae21
 800adec:	0800ae21 	.word	0x0800ae21
 800adf0:	0800ae21 	.word	0x0800ae21
 800adf4:	0800ae17 	.word	0x0800ae17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adfe:	60fb      	str	r3, [r7, #12]

      break;
 800ae00:	e00f      	b.n	800ae22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae08:	60fb      	str	r3, [r7, #12]

      break;
 800ae0a:	e00a      	b.n	800ae22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	60fb      	str	r3, [r7, #12]

      break;
 800ae14:	e005      	b.n	800ae22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1c:	60fb      	str	r3, [r7, #12]

      break;
 800ae1e:	e000      	b.n	800ae22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800ae20:	bf00      	nop
  }

  return tmpreg;
 800ae22:	68fb      	ldr	r3, [r7, #12]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	7f1b      	ldrb	r3, [r3, #28]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a40      	ldr	r2, [pc, #256]	; (800afac <TIM_Base_SetConfig+0x114>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d013      	beq.n	800aed8 <TIM_Base_SetConfig+0x40>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeb6:	d00f      	beq.n	800aed8 <TIM_Base_SetConfig+0x40>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	4a3d      	ldr	r2, [pc, #244]	; (800afb0 <TIM_Base_SetConfig+0x118>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d00b      	beq.n	800aed8 <TIM_Base_SetConfig+0x40>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a3c      	ldr	r2, [pc, #240]	; (800afb4 <TIM_Base_SetConfig+0x11c>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d007      	beq.n	800aed8 <TIM_Base_SetConfig+0x40>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a3b      	ldr	r2, [pc, #236]	; (800afb8 <TIM_Base_SetConfig+0x120>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_Base_SetConfig+0x40>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a3a      	ldr	r2, [pc, #232]	; (800afbc <TIM_Base_SetConfig+0x124>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d108      	bne.n	800aeea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a2f      	ldr	r2, [pc, #188]	; (800afac <TIM_Base_SetConfig+0x114>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d01f      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef8:	d01b      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a2c      	ldr	r2, [pc, #176]	; (800afb0 <TIM_Base_SetConfig+0x118>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d017      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a2b      	ldr	r2, [pc, #172]	; (800afb4 <TIM_Base_SetConfig+0x11c>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d013      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a2a      	ldr	r2, [pc, #168]	; (800afb8 <TIM_Base_SetConfig+0x120>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d00f      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a29      	ldr	r2, [pc, #164]	; (800afbc <TIM_Base_SetConfig+0x124>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d00b      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a28      	ldr	r2, [pc, #160]	; (800afc0 <TIM_Base_SetConfig+0x128>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d007      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a27      	ldr	r2, [pc, #156]	; (800afc4 <TIM_Base_SetConfig+0x12c>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d003      	beq.n	800af32 <TIM_Base_SetConfig+0x9a>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4a26      	ldr	r2, [pc, #152]	; (800afc8 <TIM_Base_SetConfig+0x130>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d108      	bne.n	800af44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	4313      	orrs	r3, r2
 800af42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	695b      	ldr	r3, [r3, #20]
 800af4e:	4313      	orrs	r3, r2
 800af50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a10      	ldr	r2, [pc, #64]	; (800afac <TIM_Base_SetConfig+0x114>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d00f      	beq.n	800af90 <TIM_Base_SetConfig+0xf8>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a12      	ldr	r2, [pc, #72]	; (800afbc <TIM_Base_SetConfig+0x124>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00b      	beq.n	800af90 <TIM_Base_SetConfig+0xf8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	4a11      	ldr	r2, [pc, #68]	; (800afc0 <TIM_Base_SetConfig+0x128>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d007      	beq.n	800af90 <TIM_Base_SetConfig+0xf8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a10      	ldr	r2, [pc, #64]	; (800afc4 <TIM_Base_SetConfig+0x12c>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d003      	beq.n	800af90 <TIM_Base_SetConfig+0xf8>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a0f      	ldr	r2, [pc, #60]	; (800afc8 <TIM_Base_SetConfig+0x130>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d103      	bne.n	800af98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	691a      	ldr	r2, [r3, #16]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2201      	movs	r2, #1
 800af9c:	615a      	str	r2, [r3, #20]
}
 800af9e:	bf00      	nop
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	40012c00 	.word	0x40012c00
 800afb0:	40000400 	.word	0x40000400
 800afb4:	40000800 	.word	0x40000800
 800afb8:	40000c00 	.word	0x40000c00
 800afbc:	40013400 	.word	0x40013400
 800afc0:	40014000 	.word	0x40014000
 800afc4:	40014400 	.word	0x40014400
 800afc8:	40014800 	.word	0x40014800

0800afcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	f023 0201 	bic.w	r2, r3, #1
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800affa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800affe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f023 0303 	bic.w	r3, r3, #3
 800b006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	68fa      	ldr	r2, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f023 0302 	bic.w	r3, r3, #2
 800b018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4313      	orrs	r3, r2
 800b022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a2c      	ldr	r2, [pc, #176]	; (800b0d8 <TIM_OC1_SetConfig+0x10c>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00f      	beq.n	800b04c <TIM_OC1_SetConfig+0x80>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a2b      	ldr	r2, [pc, #172]	; (800b0dc <TIM_OC1_SetConfig+0x110>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d00b      	beq.n	800b04c <TIM_OC1_SetConfig+0x80>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a2a      	ldr	r2, [pc, #168]	; (800b0e0 <TIM_OC1_SetConfig+0x114>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d007      	beq.n	800b04c <TIM_OC1_SetConfig+0x80>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a29      	ldr	r2, [pc, #164]	; (800b0e4 <TIM_OC1_SetConfig+0x118>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d003      	beq.n	800b04c <TIM_OC1_SetConfig+0x80>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a28      	ldr	r2, [pc, #160]	; (800b0e8 <TIM_OC1_SetConfig+0x11c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d10c      	bne.n	800b066 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	f023 0308 	bic.w	r3, r3, #8
 800b052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f023 0304 	bic.w	r3, r3, #4
 800b064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a1b      	ldr	r2, [pc, #108]	; (800b0d8 <TIM_OC1_SetConfig+0x10c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d00f      	beq.n	800b08e <TIM_OC1_SetConfig+0xc2>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a1a      	ldr	r2, [pc, #104]	; (800b0dc <TIM_OC1_SetConfig+0x110>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d00b      	beq.n	800b08e <TIM_OC1_SetConfig+0xc2>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a19      	ldr	r2, [pc, #100]	; (800b0e0 <TIM_OC1_SetConfig+0x114>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d007      	beq.n	800b08e <TIM_OC1_SetConfig+0xc2>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a18      	ldr	r2, [pc, #96]	; (800b0e4 <TIM_OC1_SetConfig+0x118>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d003      	beq.n	800b08e <TIM_OC1_SetConfig+0xc2>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <TIM_OC1_SetConfig+0x11c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d111      	bne.n	800b0b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b09c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	693a      	ldr	r2, [r7, #16]
 800b0b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68fa      	ldr	r2, [r7, #12]
 800b0bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	685a      	ldr	r2, [r3, #4]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	621a      	str	r2, [r3, #32]
}
 800b0cc:	bf00      	nop
 800b0ce:	371c      	adds	r7, #28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr
 800b0d8:	40012c00 	.word	0x40012c00
 800b0dc:	40013400 	.word	0x40013400
 800b0e0:	40014000 	.word	0x40014000
 800b0e4:	40014400 	.word	0x40014400
 800b0e8:	40014800 	.word	0x40014800

0800b0ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	f023 0210 	bic.w	r2, r3, #16
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b11a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	021b      	lsls	r3, r3, #8
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f023 0320 	bic.w	r3, r3, #32
 800b13a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	011b      	lsls	r3, r3, #4
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	4313      	orrs	r3, r2
 800b146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a28      	ldr	r2, [pc, #160]	; (800b1ec <TIM_OC2_SetConfig+0x100>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d003      	beq.n	800b158 <TIM_OC2_SetConfig+0x6c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a27      	ldr	r2, [pc, #156]	; (800b1f0 <TIM_OC2_SetConfig+0x104>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d10d      	bne.n	800b174 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b15e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	011b      	lsls	r3, r3, #4
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	4a1d      	ldr	r2, [pc, #116]	; (800b1ec <TIM_OC2_SetConfig+0x100>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d00f      	beq.n	800b19c <TIM_OC2_SetConfig+0xb0>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4a1c      	ldr	r2, [pc, #112]	; (800b1f0 <TIM_OC2_SetConfig+0x104>)
 800b180:	4293      	cmp	r3, r2
 800b182:	d00b      	beq.n	800b19c <TIM_OC2_SetConfig+0xb0>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	4a1b      	ldr	r2, [pc, #108]	; (800b1f4 <TIM_OC2_SetConfig+0x108>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d007      	beq.n	800b19c <TIM_OC2_SetConfig+0xb0>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a1a      	ldr	r2, [pc, #104]	; (800b1f8 <TIM_OC2_SetConfig+0x10c>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d003      	beq.n	800b19c <TIM_OC2_SetConfig+0xb0>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a19      	ldr	r2, [pc, #100]	; (800b1fc <TIM_OC2_SetConfig+0x110>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d113      	bne.n	800b1c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	695b      	ldr	r3, [r3, #20]
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	699b      	ldr	r3, [r3, #24]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	621a      	str	r2, [r3, #32]
}
 800b1de:	bf00      	nop
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	40012c00 	.word	0x40012c00
 800b1f0:	40013400 	.word	0x40013400
 800b1f4:	40014000 	.word	0x40014000
 800b1f8:	40014400 	.word	0x40014400
 800b1fc:	40014800 	.word	0x40014800

0800b200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b22e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0303 	bic.w	r3, r3, #3
 800b23a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	4313      	orrs	r3, r2
 800b244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b24c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	021b      	lsls	r3, r3, #8
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	4313      	orrs	r3, r2
 800b258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	4a27      	ldr	r2, [pc, #156]	; (800b2fc <TIM_OC3_SetConfig+0xfc>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d003      	beq.n	800b26a <TIM_OC3_SetConfig+0x6a>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	4a26      	ldr	r2, [pc, #152]	; (800b300 <TIM_OC3_SetConfig+0x100>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d10d      	bne.n	800b286 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	021b      	lsls	r3, r3, #8
 800b278:	697a      	ldr	r2, [r7, #20]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1c      	ldr	r2, [pc, #112]	; (800b2fc <TIM_OC3_SetConfig+0xfc>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00f      	beq.n	800b2ae <TIM_OC3_SetConfig+0xae>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a1b      	ldr	r2, [pc, #108]	; (800b300 <TIM_OC3_SetConfig+0x100>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00b      	beq.n	800b2ae <TIM_OC3_SetConfig+0xae>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a1a      	ldr	r2, [pc, #104]	; (800b304 <TIM_OC3_SetConfig+0x104>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d007      	beq.n	800b2ae <TIM_OC3_SetConfig+0xae>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a19      	ldr	r2, [pc, #100]	; (800b308 <TIM_OC3_SetConfig+0x108>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d003      	beq.n	800b2ae <TIM_OC3_SetConfig+0xae>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a18      	ldr	r2, [pc, #96]	; (800b30c <TIM_OC3_SetConfig+0x10c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d113      	bne.n	800b2d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	695b      	ldr	r3, [r3, #20]
 800b2c2:	011b      	lsls	r3, r3, #4
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	699b      	ldr	r3, [r3, #24]
 800b2ce:	011b      	lsls	r3, r3, #4
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68fa      	ldr	r2, [r7, #12]
 800b2e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	697a      	ldr	r2, [r7, #20]
 800b2ee:	621a      	str	r2, [r3, #32]
}
 800b2f0:	bf00      	nop
 800b2f2:	371c      	adds	r7, #28
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	40012c00 	.word	0x40012c00
 800b300:	40013400 	.word	0x40013400
 800b304:	40014000 	.word	0x40014000
 800b308:	40014400 	.word	0x40014400
 800b30c:	40014800 	.word	0x40014800

0800b310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a1b      	ldr	r3, [r3, #32]
 800b31e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	6a1b      	ldr	r3, [r3, #32]
 800b32a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b33e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b34a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4313      	orrs	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	031b      	lsls	r3, r3, #12
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a18      	ldr	r2, [pc, #96]	; (800b3d0 <TIM_OC4_SetConfig+0xc0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00f      	beq.n	800b394 <TIM_OC4_SetConfig+0x84>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a17      	ldr	r2, [pc, #92]	; (800b3d4 <TIM_OC4_SetConfig+0xc4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d00b      	beq.n	800b394 <TIM_OC4_SetConfig+0x84>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a16      	ldr	r2, [pc, #88]	; (800b3d8 <TIM_OC4_SetConfig+0xc8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d007      	beq.n	800b394 <TIM_OC4_SetConfig+0x84>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a15      	ldr	r2, [pc, #84]	; (800b3dc <TIM_OC4_SetConfig+0xcc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d003      	beq.n	800b394 <TIM_OC4_SetConfig+0x84>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a14      	ldr	r2, [pc, #80]	; (800b3e0 <TIM_OC4_SetConfig+0xd0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d109      	bne.n	800b3a8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b39a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	019b      	lsls	r3, r3, #6
 800b3a2:	697a      	ldr	r2, [r7, #20]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	621a      	str	r2, [r3, #32]
}
 800b3c2:	bf00      	nop
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40012c00 	.word	0x40012c00
 800b3d4:	40013400 	.word	0x40013400
 800b3d8:	40014000 	.word	0x40014000
 800b3dc:	40014400 	.word	0x40014400
 800b3e0:	40014800 	.word	0x40014800

0800b3e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b428:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	4313      	orrs	r3, r2
 800b434:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4a17      	ldr	r2, [pc, #92]	; (800b498 <TIM_OC5_SetConfig+0xb4>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d00f      	beq.n	800b45e <TIM_OC5_SetConfig+0x7a>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a16      	ldr	r2, [pc, #88]	; (800b49c <TIM_OC5_SetConfig+0xb8>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00b      	beq.n	800b45e <TIM_OC5_SetConfig+0x7a>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a15      	ldr	r2, [pc, #84]	; (800b4a0 <TIM_OC5_SetConfig+0xbc>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d007      	beq.n	800b45e <TIM_OC5_SetConfig+0x7a>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a14      	ldr	r2, [pc, #80]	; (800b4a4 <TIM_OC5_SetConfig+0xc0>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d003      	beq.n	800b45e <TIM_OC5_SetConfig+0x7a>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a13      	ldr	r2, [pc, #76]	; (800b4a8 <TIM_OC5_SetConfig+0xc4>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d109      	bne.n	800b472 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b464:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	697a      	ldr	r2, [r7, #20]
 800b46e:	4313      	orrs	r3, r2
 800b470:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	685a      	ldr	r2, [r3, #4]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	621a      	str	r2, [r3, #32]
}
 800b48c:	bf00      	nop
 800b48e:	371c      	adds	r7, #28
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	40012c00 	.word	0x40012c00
 800b49c:	40013400 	.word	0x40013400
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40014400 	.word	0x40014400
 800b4a8:	40014800 	.word	0x40014800

0800b4ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	021b      	lsls	r3, r3, #8
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	051b      	lsls	r3, r3, #20
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a18      	ldr	r2, [pc, #96]	; (800b564 <TIM_OC6_SetConfig+0xb8>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d00f      	beq.n	800b528 <TIM_OC6_SetConfig+0x7c>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a17      	ldr	r2, [pc, #92]	; (800b568 <TIM_OC6_SetConfig+0xbc>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d00b      	beq.n	800b528 <TIM_OC6_SetConfig+0x7c>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4a16      	ldr	r2, [pc, #88]	; (800b56c <TIM_OC6_SetConfig+0xc0>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d007      	beq.n	800b528 <TIM_OC6_SetConfig+0x7c>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	4a15      	ldr	r2, [pc, #84]	; (800b570 <TIM_OC6_SetConfig+0xc4>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d003      	beq.n	800b528 <TIM_OC6_SetConfig+0x7c>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a14      	ldr	r2, [pc, #80]	; (800b574 <TIM_OC6_SetConfig+0xc8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d109      	bne.n	800b53c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b52e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	029b      	lsls	r3, r3, #10
 800b536:	697a      	ldr	r2, [r7, #20]
 800b538:	4313      	orrs	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	621a      	str	r2, [r3, #32]
}
 800b556:	bf00      	nop
 800b558:	371c      	adds	r7, #28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	40012c00 	.word	0x40012c00
 800b568:	40013400 	.word	0x40013400
 800b56c:	40014000 	.word	0x40014000
 800b570:	40014400 	.word	0x40014400
 800b574:	40014800 	.word	0x40014800

0800b578 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b594:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5a6:	f023 0307 	bic.w	r3, r3, #7
 800b5aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	693a      	ldr	r2, [r7, #16]
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	2b70      	cmp	r3, #112	; 0x70
 800b5c4:	d01a      	beq.n	800b5fc <TIM_SlaveTimer_SetConfig+0x84>
 800b5c6:	2b70      	cmp	r3, #112	; 0x70
 800b5c8:	d860      	bhi.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
 800b5ca:	2b60      	cmp	r3, #96	; 0x60
 800b5cc:	d054      	beq.n	800b678 <TIM_SlaveTimer_SetConfig+0x100>
 800b5ce:	2b60      	cmp	r3, #96	; 0x60
 800b5d0:	d85c      	bhi.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
 800b5d2:	2b50      	cmp	r3, #80	; 0x50
 800b5d4:	d046      	beq.n	800b664 <TIM_SlaveTimer_SetConfig+0xec>
 800b5d6:	2b50      	cmp	r3, #80	; 0x50
 800b5d8:	d858      	bhi.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
 800b5da:	2b40      	cmp	r3, #64	; 0x40
 800b5dc:	d019      	beq.n	800b612 <TIM_SlaveTimer_SetConfig+0x9a>
 800b5de:	2b40      	cmp	r3, #64	; 0x40
 800b5e0:	d854      	bhi.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
 800b5e2:	2b30      	cmp	r3, #48	; 0x30
 800b5e4:	d055      	beq.n	800b692 <TIM_SlaveTimer_SetConfig+0x11a>
 800b5e6:	2b30      	cmp	r3, #48	; 0x30
 800b5e8:	d850      	bhi.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	d051      	beq.n	800b692 <TIM_SlaveTimer_SetConfig+0x11a>
 800b5ee:	2b20      	cmp	r3, #32
 800b5f0:	d84c      	bhi.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d04d      	beq.n	800b692 <TIM_SlaveTimer_SetConfig+0x11a>
 800b5f6:	2b10      	cmp	r3, #16
 800b5f8:	d04b      	beq.n	800b692 <TIM_SlaveTimer_SetConfig+0x11a>
 800b5fa:	e047      	b.n	800b68c <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	68d9      	ldr	r1, [r3, #12]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f000 f9e6 	bl	800b9dc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800b610:	e040      	b.n	800b694 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b05      	cmp	r3, #5
 800b618:	d101      	bne.n	800b61e <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	e03b      	b.n	800b696 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6a1b      	ldr	r3, [r3, #32]
 800b624:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6a1a      	ldr	r2, [r3, #32]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0201 	bic.w	r2, r2, #1
 800b634:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	699b      	ldr	r3, [r3, #24]
 800b63c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b644:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	011b      	lsls	r3, r3, #4
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	4313      	orrs	r3, r2
 800b650:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68fa      	ldr	r2, [r7, #12]
 800b660:	621a      	str	r2, [r3, #32]
      break;
 800b662:	e017      	b.n	800b694 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6818      	ldr	r0, [r3, #0]
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	6899      	ldr	r1, [r3, #8]
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	461a      	mov	r2, r3
 800b672:	f000 f883 	bl	800b77c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b676:	e00d      	b.n	800b694 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	6899      	ldr	r1, [r3, #8]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	461a      	mov	r2, r3
 800b686:	f000 f8e5 	bl	800b854 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800b68a:	e003      	b.n	800b694 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	75fb      	strb	r3, [r7, #23]
      break;
 800b690:	e000      	b.n	800b694 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800b692:	bf00      	nop
  }

  return status;
 800b694:	7dfb      	ldrb	r3, [r7, #23]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b087      	sub	sp, #28
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	f023 0201 	bic.w	r2, r3, #1
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	4a26      	ldr	r2, [pc, #152]	; (800b764 <TIM_TI1_SetConfig+0xc4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d017      	beq.n	800b6fe <TIM_TI1_SetConfig+0x5e>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d4:	d013      	beq.n	800b6fe <TIM_TI1_SetConfig+0x5e>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	4a23      	ldr	r2, [pc, #140]	; (800b768 <TIM_TI1_SetConfig+0xc8>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00f      	beq.n	800b6fe <TIM_TI1_SetConfig+0x5e>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	4a22      	ldr	r2, [pc, #136]	; (800b76c <TIM_TI1_SetConfig+0xcc>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00b      	beq.n	800b6fe <TIM_TI1_SetConfig+0x5e>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4a21      	ldr	r2, [pc, #132]	; (800b770 <TIM_TI1_SetConfig+0xd0>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d007      	beq.n	800b6fe <TIM_TI1_SetConfig+0x5e>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	4a20      	ldr	r2, [pc, #128]	; (800b774 <TIM_TI1_SetConfig+0xd4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d003      	beq.n	800b6fe <TIM_TI1_SetConfig+0x5e>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4a1f      	ldr	r2, [pc, #124]	; (800b778 <TIM_TI1_SetConfig+0xd8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d101      	bne.n	800b702 <TIM_TI1_SetConfig+0x62>
 800b6fe:	2301      	movs	r3, #1
 800b700:	e000      	b.n	800b704 <TIM_TI1_SetConfig+0x64>
 800b702:	2300      	movs	r3, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d008      	beq.n	800b71a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	f023 0303 	bic.w	r3, r3, #3
 800b70e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4313      	orrs	r3, r2
 800b716:	617b      	str	r3, [r7, #20]
 800b718:	e003      	b.n	800b722 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f043 0301 	orr.w	r3, r3, #1
 800b720:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	011b      	lsls	r3, r3, #4
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	4313      	orrs	r3, r2
 800b734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	f023 030a 	bic.w	r3, r3, #10
 800b73c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	f003 030a 	and.w	r3, r3, #10
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	621a      	str	r2, [r3, #32]
}
 800b756:	bf00      	nop
 800b758:	371c      	adds	r7, #28
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr
 800b762:	bf00      	nop
 800b764:	40012c00 	.word	0x40012c00
 800b768:	40000400 	.word	0x40000400
 800b76c:	40000800 	.word	0x40000800
 800b770:	40000c00 	.word	0x40000c00
 800b774:	40013400 	.word	0x40013400
 800b778:	40014000 	.word	0x40014000

0800b77c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6a1b      	ldr	r3, [r3, #32]
 800b78c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	f023 0201 	bic.w	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f023 030a 	bic.w	r3, r3, #10
 800b7b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	621a      	str	r2, [r3, #32]
}
 800b7ce:	bf00      	nop
 800b7d0:	371c      	adds	r7, #28
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b087      	sub	sp, #28
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	60f8      	str	r0, [r7, #12]
 800b7e2:	60b9      	str	r1, [r7, #8]
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	f023 0210 	bic.w	r2, r3, #16
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6a1b      	ldr	r3, [r3, #32]
 800b7fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b806:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	021b      	lsls	r3, r3, #8
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	4313      	orrs	r3, r2
 800b810:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	031b      	lsls	r3, r3, #12
 800b81e:	b29b      	uxth	r3, r3
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	4313      	orrs	r3, r2
 800b824:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b82c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	4313      	orrs	r3, r2
 800b83a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	621a      	str	r2, [r3, #32]
}
 800b848:	bf00      	nop
 800b84a:	371c      	adds	r7, #28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b854:	b480      	push	{r7}
 800b856:	b087      	sub	sp, #28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6a1b      	ldr	r3, [r3, #32]
 800b864:	f023 0210 	bic.w	r2, r3, #16
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b87e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	031b      	lsls	r3, r3, #12
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	4313      	orrs	r3, r2
 800b888:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b890:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	011b      	lsls	r3, r3, #4
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	4313      	orrs	r3, r2
 800b89a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	621a      	str	r2, [r3, #32]
}
 800b8a8:	bf00      	nop
 800b8aa:	371c      	adds	r7, #28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b087      	sub	sp, #28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	60b9      	str	r1, [r7, #8]
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a1b      	ldr	r3, [r3, #32]
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	f023 0303 	bic.w	r3, r3, #3
 800b8e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	697a      	ldr	r2, [r7, #20]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b904:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	021b      	lsls	r3, r3, #8
 800b90a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	621a      	str	r2, [r3, #32]
}
 800b920:	bf00      	nop
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b087      	sub	sp, #28
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b958:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	4313      	orrs	r3, r2
 800b962:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b96a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	031b      	lsls	r3, r3, #12
 800b970:	b29b      	uxth	r3, r3
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	4313      	orrs	r3, r2
 800b976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b97e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	031b      	lsls	r3, r3, #12
 800b984:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	4313      	orrs	r3, r2
 800b98c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	697a      	ldr	r2, [r7, #20]
 800b992:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	621a      	str	r2, [r3, #32]
}
 800b99a:	bf00      	nop
 800b99c:	371c      	adds	r7, #28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr

0800b9a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9a6:	b480      	push	{r7}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	689b      	ldr	r3, [r3, #8]
 800b9b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	f043 0307 	orr.w	r3, r3, #7
 800b9c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	609a      	str	r2, [r3, #8]
}
 800b9d0:	bf00      	nop
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b087      	sub	sp, #28
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
 800b9e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	021a      	lsls	r2, r3, #8
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	431a      	orrs	r2, r3
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	697a      	ldr	r2, [r7, #20]
 800ba0e:	609a      	str	r2, [r3, #8]
}
 800ba10:	bf00      	nop
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f003 031f 	and.w	r3, r3, #31
 800ba2e:	2201      	movs	r2, #1
 800ba30:	fa02 f303 	lsl.w	r3, r2, r3
 800ba34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6a1a      	ldr	r2, [r3, #32]
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	43db      	mvns	r3, r3
 800ba3e:	401a      	ands	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6a1a      	ldr	r2, [r3, #32]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	f003 031f 	and.w	r3, r3, #31
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	fa01 f303 	lsl.w	r3, r1, r3
 800ba54:	431a      	orrs	r2, r3
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	621a      	str	r2, [r3, #32]
}
 800ba5a:	bf00      	nop
 800ba5c:	371c      	adds	r7, #28
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
	...

0800ba68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d101      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	e068      	b.n	800bb52 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a2e      	ldr	r2, [pc, #184]	; (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d004      	beq.n	800bab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a2d      	ldr	r2, [pc, #180]	; (800bb64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d108      	bne.n	800bac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800baba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	4313      	orrs	r3, r2
 800bac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bacc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	4313      	orrs	r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a1e      	ldr	r2, [pc, #120]	; (800bb60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d01d      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baf2:	d018      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4a1b      	ldr	r2, [pc, #108]	; (800bb68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d013      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4a1a      	ldr	r2, [pc, #104]	; (800bb6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d00e      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a18      	ldr	r2, [pc, #96]	; (800bb70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d009      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a13      	ldr	r2, [pc, #76]	; (800bb64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d004      	beq.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a14      	ldr	r2, [pc, #80]	; (800bb74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d10c      	bne.n	800bb40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	689b      	ldr	r3, [r3, #8]
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	40012c00 	.word	0x40012c00
 800bb64:	40013400 	.word	0x40013400
 800bb68:	40000400 	.word	0x40000400
 800bb6c:	40000800 	.word	0x40000800
 800bb70:	40000c00 	.word	0x40000c00
 800bb74:	40014000 	.word	0x40014000

0800bb78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb82:	2300      	movs	r3, #0
 800bb84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d101      	bne.n	800bb94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb90:	2302      	movs	r3, #2
 800bb92:	e065      	b.n	800bc60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	695b      	ldr	r3, [r3, #20]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	041b      	lsls	r3, r3, #16
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a16      	ldr	r2, [pc, #88]	; (800bc6c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d004      	beq.n	800bc22 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a14      	ldr	r2, [pc, #80]	; (800bc70 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d115      	bne.n	800bc4e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	051b      	lsls	r3, r3, #20
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	69db      	ldr	r3, [r3, #28]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	40012c00 	.word	0x40012c00
 800bc70:	40013400 	.word	0x40013400

0800bc74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc7c:	bf00      	nop
 800bc7e:	370c      	adds	r7, #12
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b083      	sub	sp, #12
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e040      	b.n	800bd44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d106      	bne.n	800bcd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f7f8 fb22 	bl	800431c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2224      	movs	r2, #36	; 0x24
 800bcdc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f022 0201 	bic.w	r2, r2, #1
 800bcec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fc94 	bl	800c61c <UART_SetConfig>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d101      	bne.n	800bcfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e022      	b.n	800bd44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 ff40 	bl	800cb8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689a      	ldr	r2, [r3, #8]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f042 0201 	orr.w	r2, r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 ffc7 	bl	800ccd0 <UART_CheckIdleState>
 800bd42:	4603      	mov	r3, r0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08a      	sub	sp, #40	; 0x28
 800bd50:	af02      	add	r7, sp, #8
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	f040 8082 	bne.w	800be6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <HAL_UART_Transmit+0x26>
 800bd6c:	88fb      	ldrh	r3, [r7, #6]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d101      	bne.n	800bd76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e07a      	b.n	800be6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d101      	bne.n	800bd84 <HAL_UART_Transmit+0x38>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e073      	b.n	800be6c <HAL_UART_Transmit+0x120>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2221      	movs	r2, #33	; 0x21
 800bd98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd9a:	f7f8 ff3b 	bl	8004c14 <HAL_GetTick>
 800bd9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	88fa      	ldrh	r2, [r7, #6]
 800bda4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	88fa      	ldrh	r2, [r7, #6]
 800bdac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdb8:	d108      	bne.n	800bdcc <HAL_UART_Transmit+0x80>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d104      	bne.n	800bdcc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	61bb      	str	r3, [r7, #24]
 800bdca:	e003      	b.n	800bdd4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800bddc:	e02d      	b.n	800be3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2200      	movs	r2, #0
 800bde6:	2180      	movs	r1, #128	; 0x80
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 ffba 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e039      	b.n	800be6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d10b      	bne.n	800be16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	881a      	ldrh	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be0a:	b292      	uxth	r2, r2
 800be0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	3302      	adds	r3, #2
 800be12:	61bb      	str	r3, [r7, #24]
 800be14:	e008      	b.n	800be28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	781a      	ldrb	r2, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	b292      	uxth	r2, r2
 800be20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	3301      	adds	r3, #1
 800be26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800be2e:	b29b      	uxth	r3, r3
 800be30:	3b01      	subs	r3, #1
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800be40:	b29b      	uxth	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1cb      	bne.n	800bdde <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	9300      	str	r3, [sp, #0]
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2200      	movs	r2, #0
 800be4e:	2140      	movs	r1, #64	; 0x40
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	f000 ff86 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d001      	beq.n	800be60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800be5c:	2303      	movs	r3, #3
 800be5e:	e005      	b.n	800be6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2220      	movs	r2, #32
 800be64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	e000      	b.n	800be6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800be6a:	2302      	movs	r3, #2
  }
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3720      	adds	r7, #32
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b08a      	sub	sp, #40	; 0x28
 800be78:	af02      	add	r7, sp, #8
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	603b      	str	r3, [r7, #0]
 800be80:	4613      	mov	r3, r2
 800be82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be88:	2b20      	cmp	r3, #32
 800be8a:	f040 80bf 	bne.w	800c00c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <HAL_UART_Receive+0x26>
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e0b7      	b.n	800c00e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d101      	bne.n	800beac <HAL_UART_Receive+0x38>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e0b0      	b.n	800c00e <HAL_UART_Receive+0x19a>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2222      	movs	r2, #34	; 0x22
 800bec0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bec8:	f7f8 fea4 	bl	8004c14 <HAL_GetTick>
 800becc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	88fa      	ldrh	r2, [r7, #6]
 800bed2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee6:	d10e      	bne.n	800bf06 <HAL_UART_Receive+0x92>
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <HAL_UART_Receive+0x88>
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800befa:	e02d      	b.n	800bf58 <HAL_UART_Receive+0xe4>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	22ff      	movs	r2, #255	; 0xff
 800bf00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf04:	e028      	b.n	800bf58 <HAL_UART_Receive+0xe4>
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d10d      	bne.n	800bf2a <HAL_UART_Receive+0xb6>
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	691b      	ldr	r3, [r3, #16]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d104      	bne.n	800bf20 <HAL_UART_Receive+0xac>
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	22ff      	movs	r2, #255	; 0xff
 800bf1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf1e:	e01b      	b.n	800bf58 <HAL_UART_Receive+0xe4>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	227f      	movs	r2, #127	; 0x7f
 800bf24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf28:	e016      	b.n	800bf58 <HAL_UART_Receive+0xe4>
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf32:	d10d      	bne.n	800bf50 <HAL_UART_Receive+0xdc>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d104      	bne.n	800bf46 <HAL_UART_Receive+0xd2>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	227f      	movs	r2, #127	; 0x7f
 800bf40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf44:	e008      	b.n	800bf58 <HAL_UART_Receive+0xe4>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	223f      	movs	r2, #63	; 0x3f
 800bf4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bf4e:	e003      	b.n	800bf58 <HAL_UART_Receive+0xe4>
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf5e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	d108      	bne.n	800bf7c <HAL_UART_Receive+0x108>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d104      	bne.n	800bf7c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	61bb      	str	r3, [r7, #24]
 800bf7a:	e003      	b.n	800bf84 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bf8c:	e033      	b.n	800bff6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2200      	movs	r2, #0
 800bf96:	2120      	movs	r1, #32
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 fee2 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e032      	b.n	800c00e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10c      	bne.n	800bfc8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfb4:	b29a      	uxth	r2, r3
 800bfb6:	8a7b      	ldrh	r3, [r7, #18]
 800bfb8:	4013      	ands	r3, r2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	69bb      	ldr	r3, [r7, #24]
 800bfbe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	3302      	adds	r3, #2
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	e00d      	b.n	800bfe4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	b2da      	uxtb	r2, r3
 800bfd2:	8a7b      	ldrh	r3, [r7, #18]
 800bfd4:	b2db      	uxtb	r3, r3
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	3301      	adds	r3, #1
 800bfe2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1c5      	bne.n	800bf8e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2220      	movs	r2, #32
 800c006:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c008:	2300      	movs	r3, #0
 800c00a:	e000      	b.n	800c00e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800c00c:	2302      	movs	r3, #2
  }
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3720      	adds	r7, #32
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
	...

0800c018 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b0ba      	sub	sp, #232	; 0xe8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c03e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c042:	f640 030f 	movw	r3, #2063	; 0x80f
 800c046:	4013      	ands	r3, r2
 800c048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c04c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c050:	2b00      	cmp	r3, #0
 800c052:	d115      	bne.n	800c080 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c058:	f003 0320 	and.w	r3, r3, #32
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00f      	beq.n	800c080 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c070:	2b00      	cmp	r3, #0
 800c072:	f000 82a6 	beq.w	800c5c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	4798      	blx	r3
      }
      return;
 800c07e:	e2a0      	b.n	800c5c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c080:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 8117 	beq.w	800c2b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c08a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c08e:	f003 0301 	and.w	r3, r3, #1
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c096:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c09a:	4b85      	ldr	r3, [pc, #532]	; (800c2b0 <HAL_UART_IRQHandler+0x298>)
 800c09c:	4013      	ands	r3, r2
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 810a 	beq.w	800c2b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a8:	f003 0301 	and.w	r3, r3, #1
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d011      	beq.n	800c0d4 <HAL_UART_IRQHandler+0xbc>
 800c0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0ca:	f043 0201 	orr.w	r2, r3, #1
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0d8:	f003 0302 	and.w	r3, r3, #2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d011      	beq.n	800c104 <HAL_UART_IRQHandler+0xec>
 800c0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0e4:	f003 0301 	and.w	r3, r3, #1
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d00b      	beq.n	800c104 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0fa:	f043 0204 	orr.w	r2, r3, #4
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d011      	beq.n	800c134 <HAL_UART_IRQHandler+0x11c>
 800c110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2204      	movs	r2, #4
 800c122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c12a:	f043 0202 	orr.w	r2, r3, #2
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c138:	f003 0308 	and.w	r3, r3, #8
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d017      	beq.n	800c170 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c144:	f003 0320 	and.w	r3, r3, #32
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d105      	bne.n	800c158 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c14c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c150:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00b      	beq.n	800c170 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2208      	movs	r2, #8
 800c15e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c166:	f043 0208 	orr.w	r2, r3, #8
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c174:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d012      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x18a>
 800c17c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c180:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00c      	beq.n	800c1a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c198:	f043 0220 	orr.w	r2, r3, #32
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 820c 	beq.w	800c5c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b2:	f003 0320 	and.w	r3, r3, #32
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00d      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c1ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1be:	f003 0320 	and.w	r3, r3, #32
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d007      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1ea:	2b40      	cmp	r3, #64	; 0x40
 800c1ec:	d005      	beq.n	800c1fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c1ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d04f      	beq.n	800c29a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fe75 	bl	800ceea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c20a:	2b40      	cmp	r3, #64	; 0x40
 800c20c:	d141      	bne.n	800c292 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3308      	adds	r3, #8
 800c214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c21c:	e853 3f00 	ldrex	r3, [r3]
 800c220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c22c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3308      	adds	r3, #8
 800c236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c23a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c23e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1d9      	bne.n	800c20e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d013      	beq.n	800c28a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c266:	4a13      	ldr	r2, [pc, #76]	; (800c2b4 <HAL_UART_IRQHandler+0x29c>)
 800c268:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fa fc03 	bl	8006a7a <HAL_DMA_Abort_IT>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d017      	beq.n	800c2aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c284:	4610      	mov	r0, r2
 800c286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c288:	e00f      	b.n	800c2aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f9b0 	bl	800c5f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c290:	e00b      	b.n	800c2aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f9ac 	bl	800c5f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c298:	e007      	b.n	800c2aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f9a8 	bl	800c5f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c2a8:	e18d      	b.n	800c5c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2aa:	bf00      	nop
    return;
 800c2ac:	e18b      	b.n	800c5c6 <HAL_UART_IRQHandler+0x5ae>
 800c2ae:	bf00      	nop
 800c2b0:	04000120 	.word	0x04000120
 800c2b4:	0800cfb1 	.word	0x0800cfb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	f040 8146 	bne.w	800c54e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c6:	f003 0310 	and.w	r3, r3, #16
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 813f 	beq.w	800c54e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d4:	f003 0310 	and.w	r3, r3, #16
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 8138 	beq.w	800c54e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2210      	movs	r2, #16
 800c2e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f0:	2b40      	cmp	r3, #64	; 0x40
 800c2f2:	f040 80b4 	bne.w	800c45e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c302:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 815f 	beq.w	800c5ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c316:	429a      	cmp	r2, r3
 800c318:	f080 8157 	bcs.w	800c5ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c322:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0320 	and.w	r3, r3, #32
 800c332:	2b00      	cmp	r3, #0
 800c334:	f040 8085 	bne.w	800c442 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c344:	e853 3f00 	ldrex	r3, [r3]
 800c348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c34c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c366:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c36e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c37a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1da      	bne.n	800c338 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3308      	adds	r3, #8
 800c388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c38c:	e853 3f00 	ldrex	r3, [r3]
 800c390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c394:	f023 0301 	bic.w	r3, r3, #1
 800c398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c3a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c3aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c3ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c3b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e1      	bne.n	800c382 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3308      	adds	r3, #8
 800c3c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c3ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	3308      	adds	r3, #8
 800c3de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c3e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c3e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c3e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e3      	bne.n	800c3be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c40a:	e853 3f00 	ldrex	r3, [r3]
 800c40e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c412:	f023 0310 	bic.w	r3, r3, #16
 800c416:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	461a      	mov	r2, r3
 800c420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c424:	65bb      	str	r3, [r7, #88]	; 0x58
 800c426:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c428:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c42a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c42c:	e841 2300 	strex	r3, r2, [r1]
 800c430:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e4      	bne.n	800c402 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7fa fade 	bl	80069fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c44e:	b29b      	uxth	r3, r3
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	b29b      	uxth	r3, r3
 800c454:	4619      	mov	r1, r3
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f8d4 	bl	800c604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c45c:	e0b5      	b.n	800c5ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c478:	b29b      	uxth	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	f000 80a7 	beq.w	800c5ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 80a2 	beq.w	800c5ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c49a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c49e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c4ac:	647b      	str	r3, [r7, #68]	; 0x44
 800c4ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c4b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c4ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e4      	bne.n	800c48a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	3308      	adds	r3, #8
 800c4c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	e853 3f00 	ldrex	r3, [r3]
 800c4ce:	623b      	str	r3, [r7, #32]
   return(result);
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	f023 0301 	bic.w	r3, r3, #1
 800c4d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c4e4:	633a      	str	r2, [r7, #48]	; 0x30
 800c4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ec:	e841 2300 	strex	r3, r2, [r1]
 800c4f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1e3      	bne.n	800c4c0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2220      	movs	r2, #32
 800c4fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	e853 3f00 	ldrex	r3, [r3]
 800c516:	60fb      	str	r3, [r7, #12]
   return(result);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f023 0310 	bic.w	r3, r3, #16
 800c51e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c52c:	61fb      	str	r3, [r7, #28]
 800c52e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c530:	69b9      	ldr	r1, [r7, #24]
 800c532:	69fa      	ldr	r2, [r7, #28]
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	617b      	str	r3, [r7, #20]
   return(result);
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e4      	bne.n	800c50a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f85c 	bl	800c604 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c54c:	e03f      	b.n	800c5ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00e      	beq.n	800c578 <HAL_UART_IRQHandler+0x560>
 800c55a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c55e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d008      	beq.n	800c578 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c56e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fd5d 	bl	800d030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c576:	e02d      	b.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00e      	beq.n	800c5a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01c      	beq.n	800c5d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	4798      	blx	r3
    }
    return;
 800c5a0:	e017      	b.n	800c5d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d012      	beq.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
 800c5ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00c      	beq.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fd0e 	bl	800cfdc <UART_EndTransmit_IT>
    return;
 800c5c0:	e008      	b.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c5c2:	bf00      	nop
 800c5c4:	e006      	b.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c5c6:	bf00      	nop
 800c5c8:	e004      	b.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c5ca:	bf00      	nop
 800c5cc:	e002      	b.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c5ce:	bf00      	nop
 800c5d0:	e000      	b.n	800c5d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c5d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c5d4:	37e8      	adds	r7, #232	; 0xe8
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop

0800c5dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c61c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c620:	b08a      	sub	sp, #40	; 0x28
 800c622:	af00      	add	r7, sp, #0
 800c624:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c626:	2300      	movs	r3, #0
 800c628:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	691b      	ldr	r3, [r3, #16]
 800c634:	431a      	orrs	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	69db      	ldr	r3, [r3, #28]
 800c640:	4313      	orrs	r3, r2
 800c642:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	4ba4      	ldr	r3, [pc, #656]	; (800c8dc <UART_SetConfig+0x2c0>)
 800c64c:	4013      	ands	r3, r2
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	6812      	ldr	r2, [r2, #0]
 800c652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c654:	430b      	orrs	r3, r1
 800c656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	68da      	ldr	r2, [r3, #12]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	430a      	orrs	r2, r1
 800c66c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a99      	ldr	r2, [pc, #612]	; (800c8e0 <UART_SetConfig+0x2c4>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d004      	beq.n	800c688 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6a1b      	ldr	r3, [r3, #32]
 800c682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c684:	4313      	orrs	r3, r2
 800c686:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c698:	430a      	orrs	r2, r1
 800c69a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a90      	ldr	r2, [pc, #576]	; (800c8e4 <UART_SetConfig+0x2c8>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d126      	bne.n	800c6f4 <UART_SetConfig+0xd8>
 800c6a6:	4b90      	ldr	r3, [pc, #576]	; (800c8e8 <UART_SetConfig+0x2cc>)
 800c6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6ac:	f003 0303 	and.w	r3, r3, #3
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d81b      	bhi.n	800c6ec <UART_SetConfig+0xd0>
 800c6b4:	a201      	add	r2, pc, #4	; (adr r2, 800c6bc <UART_SetConfig+0xa0>)
 800c6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ba:	bf00      	nop
 800c6bc:	0800c6cd 	.word	0x0800c6cd
 800c6c0:	0800c6dd 	.word	0x0800c6dd
 800c6c4:	0800c6d5 	.word	0x0800c6d5
 800c6c8:	0800c6e5 	.word	0x0800c6e5
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6d2:	e116      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6da:	e112      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c6dc:	2304      	movs	r3, #4
 800c6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6e2:	e10e      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c6e4:	2308      	movs	r3, #8
 800c6e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6ea:	e10a      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6f2:	e106      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a7c      	ldr	r2, [pc, #496]	; (800c8ec <UART_SetConfig+0x2d0>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d138      	bne.n	800c770 <UART_SetConfig+0x154>
 800c6fe:	4b7a      	ldr	r3, [pc, #488]	; (800c8e8 <UART_SetConfig+0x2cc>)
 800c700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c704:	f003 030c 	and.w	r3, r3, #12
 800c708:	2b0c      	cmp	r3, #12
 800c70a:	d82d      	bhi.n	800c768 <UART_SetConfig+0x14c>
 800c70c:	a201      	add	r2, pc, #4	; (adr r2, 800c714 <UART_SetConfig+0xf8>)
 800c70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c712:	bf00      	nop
 800c714:	0800c749 	.word	0x0800c749
 800c718:	0800c769 	.word	0x0800c769
 800c71c:	0800c769 	.word	0x0800c769
 800c720:	0800c769 	.word	0x0800c769
 800c724:	0800c759 	.word	0x0800c759
 800c728:	0800c769 	.word	0x0800c769
 800c72c:	0800c769 	.word	0x0800c769
 800c730:	0800c769 	.word	0x0800c769
 800c734:	0800c751 	.word	0x0800c751
 800c738:	0800c769 	.word	0x0800c769
 800c73c:	0800c769 	.word	0x0800c769
 800c740:	0800c769 	.word	0x0800c769
 800c744:	0800c761 	.word	0x0800c761
 800c748:	2300      	movs	r3, #0
 800c74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c74e:	e0d8      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c750:	2302      	movs	r3, #2
 800c752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c756:	e0d4      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c758:	2304      	movs	r3, #4
 800c75a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c75e:	e0d0      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c760:	2308      	movs	r3, #8
 800c762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c766:	e0cc      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c768:	2310      	movs	r3, #16
 800c76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c76e:	e0c8      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a5e      	ldr	r2, [pc, #376]	; (800c8f0 <UART_SetConfig+0x2d4>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d125      	bne.n	800c7c6 <UART_SetConfig+0x1aa>
 800c77a:	4b5b      	ldr	r3, [pc, #364]	; (800c8e8 <UART_SetConfig+0x2cc>)
 800c77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c780:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c784:	2b30      	cmp	r3, #48	; 0x30
 800c786:	d016      	beq.n	800c7b6 <UART_SetConfig+0x19a>
 800c788:	2b30      	cmp	r3, #48	; 0x30
 800c78a:	d818      	bhi.n	800c7be <UART_SetConfig+0x1a2>
 800c78c:	2b20      	cmp	r3, #32
 800c78e:	d00a      	beq.n	800c7a6 <UART_SetConfig+0x18a>
 800c790:	2b20      	cmp	r3, #32
 800c792:	d814      	bhi.n	800c7be <UART_SetConfig+0x1a2>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <UART_SetConfig+0x182>
 800c798:	2b10      	cmp	r3, #16
 800c79a:	d008      	beq.n	800c7ae <UART_SetConfig+0x192>
 800c79c:	e00f      	b.n	800c7be <UART_SetConfig+0x1a2>
 800c79e:	2300      	movs	r3, #0
 800c7a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7a4:	e0ad      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7ac:	e0a9      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c7ae:	2304      	movs	r3, #4
 800c7b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7b4:	e0a5      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c7b6:	2308      	movs	r3, #8
 800c7b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7bc:	e0a1      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c7be:	2310      	movs	r3, #16
 800c7c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7c4:	e09d      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a4a      	ldr	r2, [pc, #296]	; (800c8f4 <UART_SetConfig+0x2d8>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d125      	bne.n	800c81c <UART_SetConfig+0x200>
 800c7d0:	4b45      	ldr	r3, [pc, #276]	; (800c8e8 <UART_SetConfig+0x2cc>)
 800c7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c7da:	2bc0      	cmp	r3, #192	; 0xc0
 800c7dc:	d016      	beq.n	800c80c <UART_SetConfig+0x1f0>
 800c7de:	2bc0      	cmp	r3, #192	; 0xc0
 800c7e0:	d818      	bhi.n	800c814 <UART_SetConfig+0x1f8>
 800c7e2:	2b80      	cmp	r3, #128	; 0x80
 800c7e4:	d00a      	beq.n	800c7fc <UART_SetConfig+0x1e0>
 800c7e6:	2b80      	cmp	r3, #128	; 0x80
 800c7e8:	d814      	bhi.n	800c814 <UART_SetConfig+0x1f8>
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d002      	beq.n	800c7f4 <UART_SetConfig+0x1d8>
 800c7ee:	2b40      	cmp	r3, #64	; 0x40
 800c7f0:	d008      	beq.n	800c804 <UART_SetConfig+0x1e8>
 800c7f2:	e00f      	b.n	800c814 <UART_SetConfig+0x1f8>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c7fa:	e082      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c802:	e07e      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c804:	2304      	movs	r3, #4
 800c806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c80a:	e07a      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c80c:	2308      	movs	r3, #8
 800c80e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c812:	e076      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c814:	2310      	movs	r3, #16
 800c816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c81a:	e072      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4a35      	ldr	r2, [pc, #212]	; (800c8f8 <UART_SetConfig+0x2dc>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d12a      	bne.n	800c87c <UART_SetConfig+0x260>
 800c826:	4b30      	ldr	r3, [pc, #192]	; (800c8e8 <UART_SetConfig+0x2cc>)
 800c828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c82c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c834:	d01a      	beq.n	800c86c <UART_SetConfig+0x250>
 800c836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c83a:	d81b      	bhi.n	800c874 <UART_SetConfig+0x258>
 800c83c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c840:	d00c      	beq.n	800c85c <UART_SetConfig+0x240>
 800c842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c846:	d815      	bhi.n	800c874 <UART_SetConfig+0x258>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <UART_SetConfig+0x238>
 800c84c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c850:	d008      	beq.n	800c864 <UART_SetConfig+0x248>
 800c852:	e00f      	b.n	800c874 <UART_SetConfig+0x258>
 800c854:	2300      	movs	r3, #0
 800c856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c85a:	e052      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c85c:	2302      	movs	r3, #2
 800c85e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c862:	e04e      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c864:	2304      	movs	r3, #4
 800c866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c86a:	e04a      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c86c:	2308      	movs	r3, #8
 800c86e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c872:	e046      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c874:	2310      	movs	r3, #16
 800c876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c87a:	e042      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a17      	ldr	r2, [pc, #92]	; (800c8e0 <UART_SetConfig+0x2c4>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d13a      	bne.n	800c8fc <UART_SetConfig+0x2e0>
 800c886:	4b18      	ldr	r3, [pc, #96]	; (800c8e8 <UART_SetConfig+0x2cc>)
 800c888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c88c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c894:	d01a      	beq.n	800c8cc <UART_SetConfig+0x2b0>
 800c896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c89a:	d81b      	bhi.n	800c8d4 <UART_SetConfig+0x2b8>
 800c89c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8a0:	d00c      	beq.n	800c8bc <UART_SetConfig+0x2a0>
 800c8a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c8a6:	d815      	bhi.n	800c8d4 <UART_SetConfig+0x2b8>
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d003      	beq.n	800c8b4 <UART_SetConfig+0x298>
 800c8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c8b0:	d008      	beq.n	800c8c4 <UART_SetConfig+0x2a8>
 800c8b2:	e00f      	b.n	800c8d4 <UART_SetConfig+0x2b8>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8ba:	e022      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c8bc:	2302      	movs	r3, #2
 800c8be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8c2:	e01e      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c8c4:	2304      	movs	r3, #4
 800c8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8ca:	e01a      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c8cc:	2308      	movs	r3, #8
 800c8ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8d2:	e016      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c8d4:	2310      	movs	r3, #16
 800c8d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c8da:	e012      	b.n	800c902 <UART_SetConfig+0x2e6>
 800c8dc:	efff69f3 	.word	0xefff69f3
 800c8e0:	40008000 	.word	0x40008000
 800c8e4:	40013800 	.word	0x40013800
 800c8e8:	40021000 	.word	0x40021000
 800c8ec:	40004400 	.word	0x40004400
 800c8f0:	40004800 	.word	0x40004800
 800c8f4:	40004c00 	.word	0x40004c00
 800c8f8:	40005000 	.word	0x40005000
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a9f      	ldr	r2, [pc, #636]	; (800cb84 <UART_SetConfig+0x568>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d17a      	bne.n	800ca02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c90c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c910:	2b08      	cmp	r3, #8
 800c912:	d824      	bhi.n	800c95e <UART_SetConfig+0x342>
 800c914:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <UART_SetConfig+0x300>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c941 	.word	0x0800c941
 800c920:	0800c95f 	.word	0x0800c95f
 800c924:	0800c949 	.word	0x0800c949
 800c928:	0800c95f 	.word	0x0800c95f
 800c92c:	0800c94f 	.word	0x0800c94f
 800c930:	0800c95f 	.word	0x0800c95f
 800c934:	0800c95f 	.word	0x0800c95f
 800c938:	0800c95f 	.word	0x0800c95f
 800c93c:	0800c957 	.word	0x0800c957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c940:	f7fb fe9a 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800c944:	61f8      	str	r0, [r7, #28]
        break;
 800c946:	e010      	b.n	800c96a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c948:	4b8f      	ldr	r3, [pc, #572]	; (800cb88 <UART_SetConfig+0x56c>)
 800c94a:	61fb      	str	r3, [r7, #28]
        break;
 800c94c:	e00d      	b.n	800c96a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c94e:	f7fb fdfb 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 800c952:	61f8      	str	r0, [r7, #28]
        break;
 800c954:	e009      	b.n	800c96a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c95a:	61fb      	str	r3, [r7, #28]
        break;
 800c95c:	e005      	b.n	800c96a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c962:	2301      	movs	r3, #1
 800c964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c968:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f000 80fb 	beq.w	800cb68 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4613      	mov	r3, r2
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	4413      	add	r3, r2
 800c97c:	69fa      	ldr	r2, [r7, #28]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d305      	bcc.n	800c98e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c988:	69fa      	ldr	r2, [r7, #28]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d903      	bls.n	800c996 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c994:	e0e8      	b.n	800cb68 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	2200      	movs	r2, #0
 800c99a:	461c      	mov	r4, r3
 800c99c:	4615      	mov	r5, r2
 800c99e:	f04f 0200 	mov.w	r2, #0
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	022b      	lsls	r3, r5, #8
 800c9a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c9ac:	0222      	lsls	r2, r4, #8
 800c9ae:	68f9      	ldr	r1, [r7, #12]
 800c9b0:	6849      	ldr	r1, [r1, #4]
 800c9b2:	0849      	lsrs	r1, r1, #1
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	4688      	mov	r8, r1
 800c9b8:	4681      	mov	r9, r0
 800c9ba:	eb12 0a08 	adds.w	sl, r2, r8
 800c9be:	eb43 0b09 	adc.w	fp, r3, r9
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	603b      	str	r3, [r7, #0]
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	4659      	mov	r1, fp
 800c9d4:	f7f4 f968 	bl	8000ca8 <__aeabi_uldivmod>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4613      	mov	r3, r2
 800c9de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9e6:	d308      	bcc.n	800c9fa <UART_SetConfig+0x3de>
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c9ee:	d204      	bcs.n	800c9fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	69ba      	ldr	r2, [r7, #24]
 800c9f6:	60da      	str	r2, [r3, #12]
 800c9f8:	e0b6      	b.n	800cb68 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ca00:	e0b2      	b.n	800cb68 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca0a:	d15e      	bne.n	800caca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ca0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d828      	bhi.n	800ca66 <UART_SetConfig+0x44a>
 800ca14:	a201      	add	r2, pc, #4	; (adr r2, 800ca1c <UART_SetConfig+0x400>)
 800ca16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca1a:	bf00      	nop
 800ca1c:	0800ca41 	.word	0x0800ca41
 800ca20:	0800ca49 	.word	0x0800ca49
 800ca24:	0800ca51 	.word	0x0800ca51
 800ca28:	0800ca67 	.word	0x0800ca67
 800ca2c:	0800ca57 	.word	0x0800ca57
 800ca30:	0800ca67 	.word	0x0800ca67
 800ca34:	0800ca67 	.word	0x0800ca67
 800ca38:	0800ca67 	.word	0x0800ca67
 800ca3c:	0800ca5f 	.word	0x0800ca5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca40:	f7fb fe1a 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800ca44:	61f8      	str	r0, [r7, #28]
        break;
 800ca46:	e014      	b.n	800ca72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca48:	f7fb fe2c 	bl	80086a4 <HAL_RCC_GetPCLK2Freq>
 800ca4c:	61f8      	str	r0, [r7, #28]
        break;
 800ca4e:	e010      	b.n	800ca72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca50:	4b4d      	ldr	r3, [pc, #308]	; (800cb88 <UART_SetConfig+0x56c>)
 800ca52:	61fb      	str	r3, [r7, #28]
        break;
 800ca54:	e00d      	b.n	800ca72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca56:	f7fb fd77 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 800ca5a:	61f8      	str	r0, [r7, #28]
        break;
 800ca5c:	e009      	b.n	800ca72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca62:	61fb      	str	r3, [r7, #28]
        break;
 800ca64:	e005      	b.n	800ca72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ca66:	2300      	movs	r3, #0
 800ca68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ca70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d077      	beq.n	800cb68 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	005a      	lsls	r2, r3, #1
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	085b      	lsrs	r3, r3, #1
 800ca82:	441a      	add	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	2b0f      	cmp	r3, #15
 800ca92:	d916      	bls.n	800cac2 <UART_SetConfig+0x4a6>
 800ca94:	69bb      	ldr	r3, [r7, #24]
 800ca96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca9a:	d212      	bcs.n	800cac2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	f023 030f 	bic.w	r3, r3, #15
 800caa4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	085b      	lsrs	r3, r3, #1
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f003 0307 	and.w	r3, r3, #7
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	8afb      	ldrh	r3, [r7, #22]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	8afa      	ldrh	r2, [r7, #22]
 800cabe:	60da      	str	r2, [r3, #12]
 800cac0:	e052      	b.n	800cb68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800cac8:	e04e      	b.n	800cb68 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800caca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cace:	2b08      	cmp	r3, #8
 800cad0:	d827      	bhi.n	800cb22 <UART_SetConfig+0x506>
 800cad2:	a201      	add	r2, pc, #4	; (adr r2, 800cad8 <UART_SetConfig+0x4bc>)
 800cad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad8:	0800cafd 	.word	0x0800cafd
 800cadc:	0800cb05 	.word	0x0800cb05
 800cae0:	0800cb0d 	.word	0x0800cb0d
 800cae4:	0800cb23 	.word	0x0800cb23
 800cae8:	0800cb13 	.word	0x0800cb13
 800caec:	0800cb23 	.word	0x0800cb23
 800caf0:	0800cb23 	.word	0x0800cb23
 800caf4:	0800cb23 	.word	0x0800cb23
 800caf8:	0800cb1b 	.word	0x0800cb1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cafc:	f7fb fdbc 	bl	8008678 <HAL_RCC_GetPCLK1Freq>
 800cb00:	61f8      	str	r0, [r7, #28]
        break;
 800cb02:	e014      	b.n	800cb2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb04:	f7fb fdce 	bl	80086a4 <HAL_RCC_GetPCLK2Freq>
 800cb08:	61f8      	str	r0, [r7, #28]
        break;
 800cb0a:	e010      	b.n	800cb2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb0c:	4b1e      	ldr	r3, [pc, #120]	; (800cb88 <UART_SetConfig+0x56c>)
 800cb0e:	61fb      	str	r3, [r7, #28]
        break;
 800cb10:	e00d      	b.n	800cb2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb12:	f7fb fd19 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 800cb16:	61f8      	str	r0, [r7, #28]
        break;
 800cb18:	e009      	b.n	800cb2e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb1e:	61fb      	str	r3, [r7, #28]
        break;
 800cb20:	e005      	b.n	800cb2e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800cb22:	2300      	movs	r3, #0
 800cb24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800cb2c:	bf00      	nop
    }

    if (pclk != 0U)
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d019      	beq.n	800cb68 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	085a      	lsrs	r2, r3, #1
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	441a      	add	r2, r3
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb46:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	2b0f      	cmp	r3, #15
 800cb4c:	d909      	bls.n	800cb62 <UART_SetConfig+0x546>
 800cb4e:	69bb      	ldr	r3, [r7, #24]
 800cb50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb54:	d205      	bcs.n	800cb62 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	60da      	str	r2, [r3, #12]
 800cb60:	e002      	b.n	800cb68 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800cb74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3728      	adds	r7, #40	; 0x28
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb82:	bf00      	nop
 800cb84:	40008000 	.word	0x40008000
 800cb88:	00f42400 	.word	0x00f42400

0800cb8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb98:	f003 0301 	and.w	r3, r3, #1
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00a      	beq.n	800cbb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbba:	f003 0302 	and.w	r3, r3, #2
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbdc:	f003 0304 	and.w	r3, r3, #4
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00a      	beq.n	800cbfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfe:	f003 0308 	and.w	r3, r3, #8
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00a      	beq.n	800cc1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	430a      	orrs	r2, r1
 800cc1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc20:	f003 0310 	and.w	r3, r3, #16
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00a      	beq.n	800cc3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	430a      	orrs	r2, r1
 800cc3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc42:	f003 0320 	and.w	r3, r3, #32
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d00a      	beq.n	800cc60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	430a      	orrs	r2, r1
 800cc5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d01a      	beq.n	800cca2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	430a      	orrs	r2, r1
 800cc80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc8a:	d10a      	bne.n	800cca2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00a      	beq.n	800ccc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	430a      	orrs	r2, r1
 800ccc2:	605a      	str	r2, [r3, #4]
  }
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af02      	add	r7, sp, #8
 800ccd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cce0:	f7f7 ff98 	bl	8004c14 <HAL_GetTick>
 800cce4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f003 0308 	and.w	r3, r3, #8
 800ccf0:	2b08      	cmp	r3, #8
 800ccf2:	d10e      	bne.n	800cd12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccf8:	9300      	str	r3, [sp, #0]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f82d 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e023      	b.n	800cd5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	f003 0304 	and.w	r3, r3, #4
 800cd1c:	2b04      	cmp	r3, #4
 800cd1e:	d10e      	bne.n	800cd3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cd20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f817 	bl	800cd62 <UART_WaitOnFlagUntilTimeout>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e00d      	b.n	800cd5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2220      	movs	r2, #32
 800cd42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2220      	movs	r2, #32
 800cd48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b09c      	sub	sp, #112	; 0x70
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	60f8      	str	r0, [r7, #12]
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	603b      	str	r3, [r7, #0]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd72:	e0a5      	b.n	800cec0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd7a:	f000 80a1 	beq.w	800cec0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd7e:	f7f7 ff49 	bl	8004c14 <HAL_GetTick>
 800cd82:	4602      	mov	r2, r0
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d302      	bcc.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x32>
 800cd8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d13e      	bne.n	800ce12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd9c:	e853 3f00 	ldrex	r3, [r3]
 800cda0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cda2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cda4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cda8:	667b      	str	r3, [r7, #100]	; 0x64
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	461a      	mov	r2, r3
 800cdb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cdb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cdba:	e841 2300 	strex	r3, r2, [r1]
 800cdbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cdc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1e6      	bne.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3308      	adds	r3, #8
 800cdcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd0:	e853 3f00 	ldrex	r3, [r3]
 800cdd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd8:	f023 0301 	bic.w	r3, r3, #1
 800cddc:	663b      	str	r3, [r7, #96]	; 0x60
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	3308      	adds	r3, #8
 800cde4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cde6:	64ba      	str	r2, [r7, #72]	; 0x48
 800cde8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdee:	e841 2300 	strex	r3, r2, [r1]
 800cdf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1e5      	bne.n	800cdc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2220      	movs	r2, #32
 800cdfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2220      	movs	r2, #32
 800ce04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e067      	b.n	800cee2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 0304 	and.w	r3, r3, #4
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d04f      	beq.n	800cec0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	69db      	ldr	r3, [r3, #28]
 800ce26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce2e:	d147      	bne.n	800cec0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce42:	e853 3f00 	ldrex	r3, [r3]
 800ce46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	461a      	mov	r2, r3
 800ce56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce58:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce60:	e841 2300 	strex	r3, r2, [r1]
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1e6      	bne.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	3308      	adds	r3, #8
 800ce72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	e853 3f00 	ldrex	r3, [r3]
 800ce7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f023 0301 	bic.w	r3, r3, #1
 800ce82:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3308      	adds	r3, #8
 800ce8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce8c:	623a      	str	r2, [r7, #32]
 800ce8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce90:	69f9      	ldr	r1, [r7, #28]
 800ce92:	6a3a      	ldr	r2, [r7, #32]
 800ce94:	e841 2300 	strex	r3, r2, [r1]
 800ce98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e5      	bne.n	800ce6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2220      	movs	r2, #32
 800cea4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2220      	movs	r2, #32
 800ceaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2220      	movs	r2, #32
 800ceb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cebc:	2303      	movs	r3, #3
 800cebe:	e010      	b.n	800cee2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	69da      	ldr	r2, [r3, #28]
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	4013      	ands	r3, r2
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	429a      	cmp	r2, r3
 800cece:	bf0c      	ite	eq
 800ced0:	2301      	moveq	r3, #1
 800ced2:	2300      	movne	r3, #0
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	461a      	mov	r2, r3
 800ced8:	79fb      	ldrb	r3, [r7, #7]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	f43f af4a 	beq.w	800cd74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3770      	adds	r7, #112	; 0x70
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ceea:	b480      	push	{r7}
 800ceec:	b095      	sub	sp, #84	; 0x54
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefa:	e853 3f00 	ldrex	r3, [r3]
 800cefe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf10:	643b      	str	r3, [r7, #64]	; 0x40
 800cf12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf18:	e841 2300 	strex	r3, r2, [r1]
 800cf1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1e6      	bne.n	800cef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	3308      	adds	r3, #8
 800cf2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
 800cf2e:	e853 3f00 	ldrex	r3, [r3]
 800cf32:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	f023 0301 	bic.w	r3, r3, #1
 800cf3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3308      	adds	r3, #8
 800cf42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf4c:	e841 2300 	strex	r3, r2, [r1]
 800cf50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d1e5      	bne.n	800cf24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d118      	bne.n	800cf92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	e853 3f00 	ldrex	r3, [r3]
 800cf6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	f023 0310 	bic.w	r3, r3, #16
 800cf74:	647b      	str	r3, [r7, #68]	; 0x44
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf7e:	61bb      	str	r3, [r7, #24]
 800cf80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf82:	6979      	ldr	r1, [r7, #20]
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	e841 2300 	strex	r3, r2, [r1]
 800cf8a:	613b      	str	r3, [r7, #16]
   return(result);
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1e6      	bne.n	800cf60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2220      	movs	r2, #32
 800cf96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cfa4:	bf00      	nop
 800cfa6:	3754      	adds	r7, #84	; 0x54
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfce:	68f8      	ldr	r0, [r7, #12]
 800cfd0:	f7ff fb0e 	bl	800c5f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfd4:	bf00      	nop
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b088      	sub	sp, #32
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	e853 3f00 	ldrex	r3, [r3]
 800cff0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cff8:	61fb      	str	r3, [r7, #28]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	461a      	mov	r2, r3
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	61bb      	str	r3, [r7, #24]
 800d004:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d006:	6979      	ldr	r1, [r7, #20]
 800d008:	69ba      	ldr	r2, [r7, #24]
 800d00a:	e841 2300 	strex	r3, r2, [r1]
 800d00e:	613b      	str	r3, [r7, #16]
   return(result);
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d1e6      	bne.n	800cfe4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2220      	movs	r2, #32
 800d01a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7ff fada 	bl	800c5dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d028:	bf00      	nop
 800d02a:	3720      	adds	r7, #32
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	881a      	ldrh	r2, [r3, #0]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	799b      	ldrb	r3, [r3, #6]
 800d056:	08db      	lsrs	r3, r3, #3
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	b29b      	uxth	r3, r3
 800d05c:	fb12 f303 	smulbb	r3, r2, r3
 800d060:	b29a      	uxth	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	889b      	ldrh	r3, [r3, #4]
 800d06a:	461a      	mov	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	885b      	ldrh	r3, [r3, #2]
 800d070:	fb02 f303 	mul.w	r3, r2, r3
 800d074:	461a      	mov	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	60da      	str	r2, [r3, #12]
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	3306      	adds	r3, #6
 800d09c:	2208      	movs	r2, #8
 800d09e:	4619      	mov	r1, r3
 800d0a0:	f000 fcaa 	bl	800d9f8 <memcpy>
    meta->width = font[FONTX_WIDTH];
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	7b9a      	ldrb	r2, [r3, #14]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	7bda      	ldrb	r2, [r3, #15]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	7c1a      	ldrb	r2, [r3, #16]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	72da      	strb	r2, [r3, #11]

    return 0;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b08e      	sub	sp, #56	; 0x38
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	60f8      	str	r0, [r7, #12]
 800d0ce:	60b9      	str	r1, [r7, #8]
 800d0d0:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800d0d2:	f107 0314 	add.w	r3, r7, #20
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff ffd7 	bl	800d08c <fontx_meta>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 800d0e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <fontx_glyph+0x2c>
        return status;
 800d0ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d0f0:	e077      	b.n	800d1e2 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800d0f2:	7f7a      	ldrb	r2, [r7, #29]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 800d0f8:	7fba      	ldrb	r2, [r7, #30]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800d0fe:	7f7b      	ldrb	r3, [r7, #29]
 800d100:	3307      	adds	r3, #7
 800d102:	2b00      	cmp	r3, #0
 800d104:	da00      	bge.n	800d108 <fontx_glyph+0x42>
 800d106:	3307      	adds	r3, #7
 800d108:	10db      	asrs	r3, r3, #3
 800d10a:	b2da      	uxtb	r2, r3
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	78da      	ldrb	r2, [r3, #3]
 800d114:	7fbb      	ldrb	r3, [r7, #30]
 800d116:	fb12 f303 	smulbb	r3, r2, r3
 800d11a:	b2da      	uxtb	r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800d120:	7ffb      	ldrb	r3, [r7, #31]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10f      	bne.n	800d146 <fontx_glyph+0x80>
        if (code < 0x100) {
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2bff      	cmp	r3, #255	; 0xff
 800d12a:	d859      	bhi.n	800d1e0 <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	789b      	ldrb	r3, [r3, #2]
 800d130:	461a      	mov	r2, r3
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	fb02 f303 	mul.w	r3, r2, r3
 800d138:	3311      	adds	r3, #17
 800d13a:	687a      	ldr	r2, [r7, #4]
 800d13c:	441a      	add	r2, r3
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	e04d      	b.n	800d1e2 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3312      	adds	r3, #18
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	3311      	adds	r3, #17
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 800d158:	e03d      	b.n	800d1d6 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	3301      	adds	r3, #1
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	021b      	lsls	r3, r3, #8
 800d168:	4413      	add	r3, r2
 800d16a:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	3302      	adds	r3, #2
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	461a      	mov	r2, r3
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	3303      	adds	r3, #3
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	021b      	lsls	r3, r3, #8
 800d17c:	4413      	add	r3, r2
 800d17e:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	429a      	cmp	r2, r3
 800d186:	d31c      	bcc.n	800d1c2 <fontx_glyph+0xfc>
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	6a3b      	ldr	r3, [r7, #32]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d818      	bhi.n	800d1c2 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800d190:	68ba      	ldr	r2, [r7, #8]
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d198:	4413      	add	r3, r2
 800d19a:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3311      	adds	r3, #17
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	461a      	mov	r2, r3
                    nc * glyph->size
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	789b      	ldrb	r3, [r3, #2]
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ae:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800d1b2:	4413      	add	r3, r2
 800d1b4:	3312      	adds	r3, #18
                glyph->buffer = &font[
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	441a      	add	r2, r3
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	e00f      	b.n	800d1e2 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 800d1c2:	6a3a      	ldr	r2, [r7, #32]
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c6:	1ad2      	subs	r2, r2, r3
 800d1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ca:	4413      	add	r3, r2
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 800d1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d2:	3304      	adds	r3, #4
 800d1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 800d1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d8:	1e5a      	subs	r2, r3, #1
 800d1da:	633a      	str	r2, [r7, #48]	; 0x30
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1bc      	bne.n	800d15a <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3738      	adds	r7, #56	; 0x38
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	80fb      	strh	r3, [r7, #6]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	80bb      	strh	r3, [r7, #4]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800d1fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d202:	4a12      	ldr	r2, [pc, #72]	; (800d24c <hagl_put_pixel+0x60>)
 800d204:	8812      	ldrh	r2, [r2, #0]
 800d206:	4293      	cmp	r3, r2
 800d208:	db1a      	blt.n	800d240 <hagl_put_pixel+0x54>
 800d20a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d20e:	4a0f      	ldr	r2, [pc, #60]	; (800d24c <hagl_put_pixel+0x60>)
 800d210:	8852      	ldrh	r2, [r2, #2]
 800d212:	4293      	cmp	r3, r2
 800d214:	db14      	blt.n	800d240 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800d216:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d21a:	4a0c      	ldr	r2, [pc, #48]	; (800d24c <hagl_put_pixel+0x60>)
 800d21c:	8892      	ldrh	r2, [r2, #4]
 800d21e:	4293      	cmp	r3, r2
 800d220:	dc10      	bgt.n	800d244 <hagl_put_pixel+0x58>
 800d222:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d226:	4a09      	ldr	r2, [pc, #36]	; (800d24c <hagl_put_pixel+0x60>)
 800d228:	88d2      	ldrh	r2, [r2, #6]
 800d22a:	4293      	cmp	r3, r2
 800d22c:	dc0a      	bgt.n	800d244 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 800d22e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d232:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d236:	887a      	ldrh	r2, [r7, #2]
 800d238:	4618      	mov	r0, r3
 800d23a:	f7f5 f8c1 	bl	80023c0 <lcd_put_pixel>
 800d23e:	e002      	b.n	800d246 <hagl_put_pixel+0x5a>
        return;
 800d240:	bf00      	nop
 800d242:	e000      	b.n	800d246 <hagl_put_pixel+0x5a>
        return;
 800d244:	bf00      	nop
}
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	20000148 	.word	0x20000148

0800d250 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 800d250:	b590      	push	{r4, r7, lr}
 800d252:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800d25e:	f844 0c24 	str.w	r0, [r4, #-36]
 800d262:	460c      	mov	r4, r1
 800d264:	4610      	mov	r0, r2
 800d266:	4619      	mov	r1, r3
 800d268:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d26c:	4622      	mov	r2, r4
 800d26e:	f823 2c26 	strh.w	r2, [r3, #-38]
 800d272:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d276:	4602      	mov	r2, r0
 800d278:	f823 2c28 	strh.w	r2, [r3, #-40]
 800d27c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d280:	460a      	mov	r2, r1
 800d282:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 800d286:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d28a:	4619      	mov	r1, r3
 800d28c:	f107 0310 	add.w	r3, r7, #16
 800d290:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800d294:	6812      	ldr	r2, [r2, #0]
 800d296:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff ff13 	bl	800d0c6 <fontx_glyph>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d2a6:	f102 0209 	add.w	r2, r2, #9
 800d2aa:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800d2ac:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d2b0:	f103 0309 	add.w	r3, r3, #9
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d001      	beq.n	800d2be <hagl_put_char+0x6e>
        return 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e0c0      	b.n	800d440 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 800d2be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2cc:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 800d2d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2d4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2de:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 800d2e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2e6:	2210      	movs	r2, #16
 800d2e8:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800d2ec:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d2f0:	3a08      	subs	r2, #8
 800d2f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d2f6:	3b18      	subs	r3, #24
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fea2 	bl	800d044 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 800d300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d304:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800d308:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d30c:	f102 020c 	add.w	r2, r2, #12
 800d310:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 800d312:	2300      	movs	r3, #0
 800d314:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d318:	f102 020b 	add.w	r2, r2, #11
 800d31c:	7013      	strb	r3, [r2, #0]
 800d31e:	e071      	b.n	800d404 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800d320:	2300      	movs	r3, #0
 800d322:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d326:	f102 020a 	add.w	r2, r2, #10
 800d32a:	7013      	strb	r3, [r2, #0]
 800d32c:	e047      	b.n	800d3be <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800d32e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d332:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	b25a      	sxtb	r2, r3
 800d33a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d33e:	f103 030a 	add.w	r3, r3, #10
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	f003 0307 	and.w	r3, r3, #7
 800d348:	2180      	movs	r1, #128	; 0x80
 800d34a:	fa41 f303 	asr.w	r3, r1, r3
 800d34e:	b25b      	sxtb	r3, r3
 800d350:	4013      	ands	r3, r2
 800d352:	b25b      	sxtb	r3, r3
 800d354:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d358:	f102 0208 	add.w	r2, r2, #8
 800d35c:	7013      	strb	r3, [r2, #0]
            if (set) {
 800d35e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d362:	f103 0308 	add.w	r3, r3, #8
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d010      	beq.n	800d38e <hagl_put_char+0x13e>
                *(ptr++) = color;
 800d36c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d370:	f103 030c 	add.w	r3, r3, #12
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	1c9a      	adds	r2, r3, #2
 800d378:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800d37c:	f101 010c 	add.w	r1, r1, #12
 800d380:	600a      	str	r2, [r1, #0]
 800d382:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d386:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 800d38a:	801a      	strh	r2, [r3, #0]
 800d38c:	e00c      	b.n	800d3a8 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 800d38e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d392:	f103 030c 	add.w	r3, r3, #12
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	1c9a      	adds	r2, r3, #2
 800d39a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800d39e:	f101 010c 	add.w	r1, r1, #12
 800d3a2:	600a      	str	r2, [r1, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 800d3a8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d3ac:	f103 030a 	add.w	r3, r3, #10
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d3b8:	f102 020a 	add.w	r2, r2, #10
 800d3bc:	7013      	strb	r3, [r2, #0]
 800d3be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3c2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800d3c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d3ca:	f102 020a 	add.w	r2, r2, #10
 800d3ce:	7812      	ldrb	r2, [r2, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d3ac      	bcc.n	800d32e <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 800d3d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d3d8:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800d3dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3e0:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d3ea:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 800d3ee:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d3f2:	f103 030b 	add.w	r3, r3, #11
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d3fe:	f102 020b 	add.w	r2, r2, #11
 800d402:	7013      	strb	r3, [r2, #0]
 800d404:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d408:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 800d40c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800d410:	f102 020b 	add.w	r2, r2, #11
 800d414:	7812      	ldrb	r2, [r2, #0]
 800d416:	429a      	cmp	r2, r3
 800d418:	d382      	bcc.n	800d320 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 800d41a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d41e:	3b18      	subs	r3, #24
 800d420:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d424:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 800d428:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d42c:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 800d430:	461a      	mov	r2, r3
 800d432:	f000 f85a 	bl	800d4ea <hagl_blit>

    return bitmap.width;
 800d436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d43a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800d43e:	b2db      	uxtb	r3, r3
}
 800d440:	4618      	mov	r0, r3
 800d442:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd90      	pop	{r4, r7, pc}

0800d44c <hagl_put_text>:
  * Funkcja używana do wyświetlania tekstu na ekranie LCD, gdzie argumenty to:
  * tekst,pozycja x,pozycja y,kolor,czcionka
  * @retval None
  */
uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08c      	sub	sp, #48	; 0x30
 800d450:	af02      	add	r7, sp, #8
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	4608      	mov	r0, r1
 800d456:	4611      	mov	r1, r2
 800d458:	461a      	mov	r2, r3
 800d45a:	4603      	mov	r3, r0
 800d45c:	817b      	strh	r3, [r7, #10]
 800d45e:	460b      	mov	r3, r1
 800d460:	813b      	strh	r3, [r7, #8]
 800d462:	4613      	mov	r3, r2
 800d464:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 800d466:	897b      	ldrh	r3, [r7, #10]
 800d468:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800d46a:	f107 0314 	add.w	r3, r7, #20
 800d46e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fe0b 	bl	800d08c <fontx_meta>
 800d476:	4603      	mov	r3, r0
 800d478:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 800d47c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <hagl_put_text+0x3c>
        return 0;
 800d484:	2300      	movs	r3, #0
 800d486:	e02c      	b.n	800d4e2 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	1d1a      	adds	r2, r3, #4
 800d48c:	60fa      	str	r2, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	2b0d      	cmp	r3, #13
 800d496:	d002      	beq.n	800d49e <hagl_put_text+0x52>
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	2b0a      	cmp	r3, #10
 800d49c:	d108      	bne.n	800d4b0 <hagl_put_text+0x64>
            x0 = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 800d4a2:	7fbb      	ldrb	r3, [r7, #30]
 800d4a4:	b29a      	uxth	r2, r3
 800d4a6:	893b      	ldrh	r3, [r7, #8]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	813b      	strh	r3, [r7, #8]
 800d4ae:	e010      	b.n	800d4d2 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 800d4b0:	88f8      	ldrh	r0, [r7, #6]
 800d4b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d4b6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	4603      	mov	r3, r0
 800d4c0:	6a38      	ldr	r0, [r7, #32]
 800d4c2:	f7ff fec5 	bl	800d250 <hagl_put_char>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	897b      	ldrh	r3, [r7, #10]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1d6      	bne.n	800d488 <hagl_put_text+0x3c>

    return x0 - original;
 800d4da:	897a      	ldrh	r2, [r7, #10]
 800d4dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4de:	1ad3      	subs	r3, r2, r3
 800d4e0:	b29b      	uxth	r3, r3
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3728      	adds	r7, #40	; 0x28
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}

0800d4ea <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800d4ea:	b580      	push	{r7, lr}
 800d4ec:	b086      	sub	sp, #24
 800d4ee:	af00      	add	r7, sp, #0
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	603a      	str	r2, [r7, #0]
 800d4f4:	80fb      	strh	r3, [r7, #6]
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 800d500:	2300      	movs	r3, #0
 800d502:	827b      	strh	r3, [r7, #18]
 800d504:	e020      	b.n	800d548 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 800d506:	2300      	movs	r3, #0
 800d508:	823b      	strh	r3, [r7, #16]
 800d50a:	e015      	b.n	800d538 <hagl_blit+0x4e>
            color = *(ptr++);
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	1c9a      	adds	r2, r3, #2
 800d510:	617a      	str	r2, [r7, #20]
 800d512:	881b      	ldrh	r3, [r3, #0]
 800d514:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 800d516:	88fa      	ldrh	r2, [r7, #6]
 800d518:	8a3b      	ldrh	r3, [r7, #16]
 800d51a:	4413      	add	r3, r2
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	b218      	sxth	r0, r3
 800d520:	88ba      	ldrh	r2, [r7, #4]
 800d522:	8a7b      	ldrh	r3, [r7, #18]
 800d524:	4413      	add	r3, r2
 800d526:	b29b      	uxth	r3, r3
 800d528:	b21b      	sxth	r3, r3
 800d52a:	89fa      	ldrh	r2, [r7, #14]
 800d52c:	4619      	mov	r1, r3
 800d52e:	f7ff fe5d 	bl	800d1ec <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800d532:	8a3b      	ldrh	r3, [r7, #16]
 800d534:	3301      	adds	r3, #1
 800d536:	823b      	strh	r3, [r7, #16]
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	881b      	ldrh	r3, [r3, #0]
 800d53c:	8a3a      	ldrh	r2, [r7, #16]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d3e4      	bcc.n	800d50c <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 800d542:	8a7b      	ldrh	r3, [r7, #18]
 800d544:	3301      	adds	r3, #1
 800d546:	827b      	strh	r3, [r7, #18]
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	885b      	ldrh	r3, [r3, #2]
 800d54c:	8a7a      	ldrh	r2, [r7, #18]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d3d9      	bcc.n	800d506 <hagl_blit+0x1c>
        }
    }
#endif
};
 800d552:	bf00      	nop
 800d554:	bf00      	nop
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <atoi>:
 800d55c:	220a      	movs	r2, #10
 800d55e:	2100      	movs	r1, #0
 800d560:	f002 b9ba 	b.w	800f8d8 <strtol>

0800d564 <__errno>:
 800d564:	4b01      	ldr	r3, [pc, #4]	; (800d56c <__errno+0x8>)
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	4770      	bx	lr
 800d56a:	bf00      	nop
 800d56c:	20000150 	.word	0x20000150

0800d570 <__sflush_r>:
 800d570:	898a      	ldrh	r2, [r1, #12]
 800d572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d576:	4605      	mov	r5, r0
 800d578:	0710      	lsls	r0, r2, #28
 800d57a:	460c      	mov	r4, r1
 800d57c:	d458      	bmi.n	800d630 <__sflush_r+0xc0>
 800d57e:	684b      	ldr	r3, [r1, #4]
 800d580:	2b00      	cmp	r3, #0
 800d582:	dc05      	bgt.n	800d590 <__sflush_r+0x20>
 800d584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d586:	2b00      	cmp	r3, #0
 800d588:	dc02      	bgt.n	800d590 <__sflush_r+0x20>
 800d58a:	2000      	movs	r0, #0
 800d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d592:	2e00      	cmp	r6, #0
 800d594:	d0f9      	beq.n	800d58a <__sflush_r+0x1a>
 800d596:	2300      	movs	r3, #0
 800d598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d59c:	682f      	ldr	r7, [r5, #0]
 800d59e:	602b      	str	r3, [r5, #0]
 800d5a0:	d032      	beq.n	800d608 <__sflush_r+0x98>
 800d5a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5a4:	89a3      	ldrh	r3, [r4, #12]
 800d5a6:	075a      	lsls	r2, r3, #29
 800d5a8:	d505      	bpl.n	800d5b6 <__sflush_r+0x46>
 800d5aa:	6863      	ldr	r3, [r4, #4]
 800d5ac:	1ac0      	subs	r0, r0, r3
 800d5ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5b0:	b10b      	cbz	r3, 800d5b6 <__sflush_r+0x46>
 800d5b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5b4:	1ac0      	subs	r0, r0, r3
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5bc:	6a21      	ldr	r1, [r4, #32]
 800d5be:	4628      	mov	r0, r5
 800d5c0:	47b0      	blx	r6
 800d5c2:	1c43      	adds	r3, r0, #1
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	d106      	bne.n	800d5d6 <__sflush_r+0x66>
 800d5c8:	6829      	ldr	r1, [r5, #0]
 800d5ca:	291d      	cmp	r1, #29
 800d5cc:	d82c      	bhi.n	800d628 <__sflush_r+0xb8>
 800d5ce:	4a2a      	ldr	r2, [pc, #168]	; (800d678 <__sflush_r+0x108>)
 800d5d0:	40ca      	lsrs	r2, r1
 800d5d2:	07d6      	lsls	r6, r2, #31
 800d5d4:	d528      	bpl.n	800d628 <__sflush_r+0xb8>
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	6062      	str	r2, [r4, #4]
 800d5da:	04d9      	lsls	r1, r3, #19
 800d5dc:	6922      	ldr	r2, [r4, #16]
 800d5de:	6022      	str	r2, [r4, #0]
 800d5e0:	d504      	bpl.n	800d5ec <__sflush_r+0x7c>
 800d5e2:	1c42      	adds	r2, r0, #1
 800d5e4:	d101      	bne.n	800d5ea <__sflush_r+0x7a>
 800d5e6:	682b      	ldr	r3, [r5, #0]
 800d5e8:	b903      	cbnz	r3, 800d5ec <__sflush_r+0x7c>
 800d5ea:	6560      	str	r0, [r4, #84]	; 0x54
 800d5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5ee:	602f      	str	r7, [r5, #0]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	d0ca      	beq.n	800d58a <__sflush_r+0x1a>
 800d5f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5f8:	4299      	cmp	r1, r3
 800d5fa:	d002      	beq.n	800d602 <__sflush_r+0x92>
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f000 fa11 	bl	800da24 <_free_r>
 800d602:	2000      	movs	r0, #0
 800d604:	6360      	str	r0, [r4, #52]	; 0x34
 800d606:	e7c1      	b.n	800d58c <__sflush_r+0x1c>
 800d608:	6a21      	ldr	r1, [r4, #32]
 800d60a:	2301      	movs	r3, #1
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b0      	blx	r6
 800d610:	1c41      	adds	r1, r0, #1
 800d612:	d1c7      	bne.n	800d5a4 <__sflush_r+0x34>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0c4      	beq.n	800d5a4 <__sflush_r+0x34>
 800d61a:	2b1d      	cmp	r3, #29
 800d61c:	d001      	beq.n	800d622 <__sflush_r+0xb2>
 800d61e:	2b16      	cmp	r3, #22
 800d620:	d101      	bne.n	800d626 <__sflush_r+0xb6>
 800d622:	602f      	str	r7, [r5, #0]
 800d624:	e7b1      	b.n	800d58a <__sflush_r+0x1a>
 800d626:	89a3      	ldrh	r3, [r4, #12]
 800d628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d62c:	81a3      	strh	r3, [r4, #12]
 800d62e:	e7ad      	b.n	800d58c <__sflush_r+0x1c>
 800d630:	690f      	ldr	r7, [r1, #16]
 800d632:	2f00      	cmp	r7, #0
 800d634:	d0a9      	beq.n	800d58a <__sflush_r+0x1a>
 800d636:	0793      	lsls	r3, r2, #30
 800d638:	680e      	ldr	r6, [r1, #0]
 800d63a:	bf08      	it	eq
 800d63c:	694b      	ldreq	r3, [r1, #20]
 800d63e:	600f      	str	r7, [r1, #0]
 800d640:	bf18      	it	ne
 800d642:	2300      	movne	r3, #0
 800d644:	eba6 0807 	sub.w	r8, r6, r7
 800d648:	608b      	str	r3, [r1, #8]
 800d64a:	f1b8 0f00 	cmp.w	r8, #0
 800d64e:	dd9c      	ble.n	800d58a <__sflush_r+0x1a>
 800d650:	6a21      	ldr	r1, [r4, #32]
 800d652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d654:	4643      	mov	r3, r8
 800d656:	463a      	mov	r2, r7
 800d658:	4628      	mov	r0, r5
 800d65a:	47b0      	blx	r6
 800d65c:	2800      	cmp	r0, #0
 800d65e:	dc06      	bgt.n	800d66e <__sflush_r+0xfe>
 800d660:	89a3      	ldrh	r3, [r4, #12]
 800d662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d666:	81a3      	strh	r3, [r4, #12]
 800d668:	f04f 30ff 	mov.w	r0, #4294967295
 800d66c:	e78e      	b.n	800d58c <__sflush_r+0x1c>
 800d66e:	4407      	add	r7, r0
 800d670:	eba8 0800 	sub.w	r8, r8, r0
 800d674:	e7e9      	b.n	800d64a <__sflush_r+0xda>
 800d676:	bf00      	nop
 800d678:	20400001 	.word	0x20400001

0800d67c <_fflush_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	690b      	ldr	r3, [r1, #16]
 800d680:	4605      	mov	r5, r0
 800d682:	460c      	mov	r4, r1
 800d684:	b913      	cbnz	r3, 800d68c <_fflush_r+0x10>
 800d686:	2500      	movs	r5, #0
 800d688:	4628      	mov	r0, r5
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	b118      	cbz	r0, 800d696 <_fflush_r+0x1a>
 800d68e:	6983      	ldr	r3, [r0, #24]
 800d690:	b90b      	cbnz	r3, 800d696 <_fflush_r+0x1a>
 800d692:	f000 f887 	bl	800d7a4 <__sinit>
 800d696:	4b14      	ldr	r3, [pc, #80]	; (800d6e8 <_fflush_r+0x6c>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	d11b      	bne.n	800d6d4 <_fflush_r+0x58>
 800d69c:	686c      	ldr	r4, [r5, #4]
 800d69e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d0ef      	beq.n	800d686 <_fflush_r+0xa>
 800d6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6a8:	07d0      	lsls	r0, r2, #31
 800d6aa:	d404      	bmi.n	800d6b6 <_fflush_r+0x3a>
 800d6ac:	0599      	lsls	r1, r3, #22
 800d6ae:	d402      	bmi.n	800d6b6 <_fflush_r+0x3a>
 800d6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6b2:	f000 f93a 	bl	800d92a <__retarget_lock_acquire_recursive>
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f7ff ff59 	bl	800d570 <__sflush_r>
 800d6be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6c0:	07da      	lsls	r2, r3, #31
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	d4e0      	bmi.n	800d688 <_fflush_r+0xc>
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	059b      	lsls	r3, r3, #22
 800d6ca:	d4dd      	bmi.n	800d688 <_fflush_r+0xc>
 800d6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ce:	f000 f92d 	bl	800d92c <__retarget_lock_release_recursive>
 800d6d2:	e7d9      	b.n	800d688 <_fflush_r+0xc>
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <_fflush_r+0x70>)
 800d6d6:	429c      	cmp	r4, r3
 800d6d8:	d101      	bne.n	800d6de <_fflush_r+0x62>
 800d6da:	68ac      	ldr	r4, [r5, #8]
 800d6dc:	e7df      	b.n	800d69e <_fflush_r+0x22>
 800d6de:	4b04      	ldr	r3, [pc, #16]	; (800d6f0 <_fflush_r+0x74>)
 800d6e0:	429c      	cmp	r4, r3
 800d6e2:	bf08      	it	eq
 800d6e4:	68ec      	ldreq	r4, [r5, #12]
 800d6e6:	e7da      	b.n	800d69e <_fflush_r+0x22>
 800d6e8:	080168d4 	.word	0x080168d4
 800d6ec:	080168f4 	.word	0x080168f4
 800d6f0:	080168b4 	.word	0x080168b4

0800d6f4 <std>:
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	b510      	push	{r4, lr}
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	e9c0 3300 	strd	r3, r3, [r0]
 800d6fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d702:	6083      	str	r3, [r0, #8]
 800d704:	8181      	strh	r1, [r0, #12]
 800d706:	6643      	str	r3, [r0, #100]	; 0x64
 800d708:	81c2      	strh	r2, [r0, #14]
 800d70a:	6183      	str	r3, [r0, #24]
 800d70c:	4619      	mov	r1, r3
 800d70e:	2208      	movs	r2, #8
 800d710:	305c      	adds	r0, #92	; 0x5c
 800d712:	f000 f97f 	bl	800da14 <memset>
 800d716:	4b05      	ldr	r3, [pc, #20]	; (800d72c <std+0x38>)
 800d718:	6263      	str	r3, [r4, #36]	; 0x24
 800d71a:	4b05      	ldr	r3, [pc, #20]	; (800d730 <std+0x3c>)
 800d71c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d71e:	4b05      	ldr	r3, [pc, #20]	; (800d734 <std+0x40>)
 800d720:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d722:	4b05      	ldr	r3, [pc, #20]	; (800d738 <std+0x44>)
 800d724:	6224      	str	r4, [r4, #32]
 800d726:	6323      	str	r3, [r4, #48]	; 0x30
 800d728:	bd10      	pop	{r4, pc}
 800d72a:	bf00      	nop
 800d72c:	0800eaf5 	.word	0x0800eaf5
 800d730:	0800eb17 	.word	0x0800eb17
 800d734:	0800eb4f 	.word	0x0800eb4f
 800d738:	0800eb73 	.word	0x0800eb73

0800d73c <_cleanup_r>:
 800d73c:	4901      	ldr	r1, [pc, #4]	; (800d744 <_cleanup_r+0x8>)
 800d73e:	f000 b8af 	b.w	800d8a0 <_fwalk_reent>
 800d742:	bf00      	nop
 800d744:	0800d67d 	.word	0x0800d67d

0800d748 <__sfmoreglue>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	2268      	movs	r2, #104	; 0x68
 800d74c:	1e4d      	subs	r5, r1, #1
 800d74e:	4355      	muls	r5, r2
 800d750:	460e      	mov	r6, r1
 800d752:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d756:	f000 f9d1 	bl	800dafc <_malloc_r>
 800d75a:	4604      	mov	r4, r0
 800d75c:	b140      	cbz	r0, 800d770 <__sfmoreglue+0x28>
 800d75e:	2100      	movs	r1, #0
 800d760:	e9c0 1600 	strd	r1, r6, [r0]
 800d764:	300c      	adds	r0, #12
 800d766:	60a0      	str	r0, [r4, #8]
 800d768:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d76c:	f000 f952 	bl	800da14 <memset>
 800d770:	4620      	mov	r0, r4
 800d772:	bd70      	pop	{r4, r5, r6, pc}

0800d774 <__sfp_lock_acquire>:
 800d774:	4801      	ldr	r0, [pc, #4]	; (800d77c <__sfp_lock_acquire+0x8>)
 800d776:	f000 b8d8 	b.w	800d92a <__retarget_lock_acquire_recursive>
 800d77a:	bf00      	nop
 800d77c:	2000a8a1 	.word	0x2000a8a1

0800d780 <__sfp_lock_release>:
 800d780:	4801      	ldr	r0, [pc, #4]	; (800d788 <__sfp_lock_release+0x8>)
 800d782:	f000 b8d3 	b.w	800d92c <__retarget_lock_release_recursive>
 800d786:	bf00      	nop
 800d788:	2000a8a1 	.word	0x2000a8a1

0800d78c <__sinit_lock_acquire>:
 800d78c:	4801      	ldr	r0, [pc, #4]	; (800d794 <__sinit_lock_acquire+0x8>)
 800d78e:	f000 b8cc 	b.w	800d92a <__retarget_lock_acquire_recursive>
 800d792:	bf00      	nop
 800d794:	2000a8a2 	.word	0x2000a8a2

0800d798 <__sinit_lock_release>:
 800d798:	4801      	ldr	r0, [pc, #4]	; (800d7a0 <__sinit_lock_release+0x8>)
 800d79a:	f000 b8c7 	b.w	800d92c <__retarget_lock_release_recursive>
 800d79e:	bf00      	nop
 800d7a0:	2000a8a2 	.word	0x2000a8a2

0800d7a4 <__sinit>:
 800d7a4:	b510      	push	{r4, lr}
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	f7ff fff0 	bl	800d78c <__sinit_lock_acquire>
 800d7ac:	69a3      	ldr	r3, [r4, #24]
 800d7ae:	b11b      	cbz	r3, 800d7b8 <__sinit+0x14>
 800d7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7b4:	f7ff bff0 	b.w	800d798 <__sinit_lock_release>
 800d7b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d7bc:	6523      	str	r3, [r4, #80]	; 0x50
 800d7be:	4b13      	ldr	r3, [pc, #76]	; (800d80c <__sinit+0x68>)
 800d7c0:	4a13      	ldr	r2, [pc, #76]	; (800d810 <__sinit+0x6c>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d7c6:	42a3      	cmp	r3, r4
 800d7c8:	bf04      	itt	eq
 800d7ca:	2301      	moveq	r3, #1
 800d7cc:	61a3      	streq	r3, [r4, #24]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 f820 	bl	800d814 <__sfp>
 800d7d4:	6060      	str	r0, [r4, #4]
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 f81c 	bl	800d814 <__sfp>
 800d7dc:	60a0      	str	r0, [r4, #8]
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f000 f818 	bl	800d814 <__sfp>
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	60e0      	str	r0, [r4, #12]
 800d7e8:	2104      	movs	r1, #4
 800d7ea:	6860      	ldr	r0, [r4, #4]
 800d7ec:	f7ff ff82 	bl	800d6f4 <std>
 800d7f0:	68a0      	ldr	r0, [r4, #8]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	2109      	movs	r1, #9
 800d7f6:	f7ff ff7d 	bl	800d6f4 <std>
 800d7fa:	68e0      	ldr	r0, [r4, #12]
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	2112      	movs	r1, #18
 800d800:	f7ff ff78 	bl	800d6f4 <std>
 800d804:	2301      	movs	r3, #1
 800d806:	61a3      	str	r3, [r4, #24]
 800d808:	e7d2      	b.n	800d7b0 <__sinit+0xc>
 800d80a:	bf00      	nop
 800d80c:	08016914 	.word	0x08016914
 800d810:	0800d73d 	.word	0x0800d73d

0800d814 <__sfp>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	4607      	mov	r7, r0
 800d818:	f7ff ffac 	bl	800d774 <__sfp_lock_acquire>
 800d81c:	4b1e      	ldr	r3, [pc, #120]	; (800d898 <__sfp+0x84>)
 800d81e:	681e      	ldr	r6, [r3, #0]
 800d820:	69b3      	ldr	r3, [r6, #24]
 800d822:	b913      	cbnz	r3, 800d82a <__sfp+0x16>
 800d824:	4630      	mov	r0, r6
 800d826:	f7ff ffbd 	bl	800d7a4 <__sinit>
 800d82a:	3648      	adds	r6, #72	; 0x48
 800d82c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d830:	3b01      	subs	r3, #1
 800d832:	d503      	bpl.n	800d83c <__sfp+0x28>
 800d834:	6833      	ldr	r3, [r6, #0]
 800d836:	b30b      	cbz	r3, 800d87c <__sfp+0x68>
 800d838:	6836      	ldr	r6, [r6, #0]
 800d83a:	e7f7      	b.n	800d82c <__sfp+0x18>
 800d83c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d840:	b9d5      	cbnz	r5, 800d878 <__sfp+0x64>
 800d842:	4b16      	ldr	r3, [pc, #88]	; (800d89c <__sfp+0x88>)
 800d844:	60e3      	str	r3, [r4, #12]
 800d846:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d84a:	6665      	str	r5, [r4, #100]	; 0x64
 800d84c:	f000 f86c 	bl	800d928 <__retarget_lock_init_recursive>
 800d850:	f7ff ff96 	bl	800d780 <__sfp_lock_release>
 800d854:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d858:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d85c:	6025      	str	r5, [r4, #0]
 800d85e:	61a5      	str	r5, [r4, #24]
 800d860:	2208      	movs	r2, #8
 800d862:	4629      	mov	r1, r5
 800d864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d868:	f000 f8d4 	bl	800da14 <memset>
 800d86c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d874:	4620      	mov	r0, r4
 800d876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d878:	3468      	adds	r4, #104	; 0x68
 800d87a:	e7d9      	b.n	800d830 <__sfp+0x1c>
 800d87c:	2104      	movs	r1, #4
 800d87e:	4638      	mov	r0, r7
 800d880:	f7ff ff62 	bl	800d748 <__sfmoreglue>
 800d884:	4604      	mov	r4, r0
 800d886:	6030      	str	r0, [r6, #0]
 800d888:	2800      	cmp	r0, #0
 800d88a:	d1d5      	bne.n	800d838 <__sfp+0x24>
 800d88c:	f7ff ff78 	bl	800d780 <__sfp_lock_release>
 800d890:	230c      	movs	r3, #12
 800d892:	603b      	str	r3, [r7, #0]
 800d894:	e7ee      	b.n	800d874 <__sfp+0x60>
 800d896:	bf00      	nop
 800d898:	08016914 	.word	0x08016914
 800d89c:	ffff0001 	.word	0xffff0001

0800d8a0 <_fwalk_reent>:
 800d8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	4688      	mov	r8, r1
 800d8a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8ac:	2700      	movs	r7, #0
 800d8ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8b2:	f1b9 0901 	subs.w	r9, r9, #1
 800d8b6:	d505      	bpl.n	800d8c4 <_fwalk_reent+0x24>
 800d8b8:	6824      	ldr	r4, [r4, #0]
 800d8ba:	2c00      	cmp	r4, #0
 800d8bc:	d1f7      	bne.n	800d8ae <_fwalk_reent+0xe>
 800d8be:	4638      	mov	r0, r7
 800d8c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c4:	89ab      	ldrh	r3, [r5, #12]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d907      	bls.n	800d8da <_fwalk_reent+0x3a>
 800d8ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	d003      	beq.n	800d8da <_fwalk_reent+0x3a>
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	47c0      	blx	r8
 800d8d8:	4307      	orrs	r7, r0
 800d8da:	3568      	adds	r5, #104	; 0x68
 800d8dc:	e7e9      	b.n	800d8b2 <_fwalk_reent+0x12>
	...

0800d8e0 <__libc_init_array>:
 800d8e0:	b570      	push	{r4, r5, r6, lr}
 800d8e2:	4d0d      	ldr	r5, [pc, #52]	; (800d918 <__libc_init_array+0x38>)
 800d8e4:	4c0d      	ldr	r4, [pc, #52]	; (800d91c <__libc_init_array+0x3c>)
 800d8e6:	1b64      	subs	r4, r4, r5
 800d8e8:	10a4      	asrs	r4, r4, #2
 800d8ea:	2600      	movs	r6, #0
 800d8ec:	42a6      	cmp	r6, r4
 800d8ee:	d109      	bne.n	800d904 <__libc_init_array+0x24>
 800d8f0:	4d0b      	ldr	r5, [pc, #44]	; (800d920 <__libc_init_array+0x40>)
 800d8f2:	4c0c      	ldr	r4, [pc, #48]	; (800d924 <__libc_init_array+0x44>)
 800d8f4:	f005 fa82 	bl	8012dfc <_init>
 800d8f8:	1b64      	subs	r4, r4, r5
 800d8fa:	10a4      	asrs	r4, r4, #2
 800d8fc:	2600      	movs	r6, #0
 800d8fe:	42a6      	cmp	r6, r4
 800d900:	d105      	bne.n	800d90e <__libc_init_array+0x2e>
 800d902:	bd70      	pop	{r4, r5, r6, pc}
 800d904:	f855 3b04 	ldr.w	r3, [r5], #4
 800d908:	4798      	blx	r3
 800d90a:	3601      	adds	r6, #1
 800d90c:	e7ee      	b.n	800d8ec <__libc_init_array+0xc>
 800d90e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d912:	4798      	blx	r3
 800d914:	3601      	adds	r6, #1
 800d916:	e7f2      	b.n	800d8fe <__libc_init_array+0x1e>
 800d918:	08016f10 	.word	0x08016f10
 800d91c:	08016f10 	.word	0x08016f10
 800d920:	08016f10 	.word	0x08016f10
 800d924:	08016f14 	.word	0x08016f14

0800d928 <__retarget_lock_init_recursive>:
 800d928:	4770      	bx	lr

0800d92a <__retarget_lock_acquire_recursive>:
 800d92a:	4770      	bx	lr

0800d92c <__retarget_lock_release_recursive>:
 800d92c:	4770      	bx	lr

0800d92e <__swhatbuf_r>:
 800d92e:	b570      	push	{r4, r5, r6, lr}
 800d930:	460e      	mov	r6, r1
 800d932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d936:	2900      	cmp	r1, #0
 800d938:	b096      	sub	sp, #88	; 0x58
 800d93a:	4614      	mov	r4, r2
 800d93c:	461d      	mov	r5, r3
 800d93e:	da08      	bge.n	800d952 <__swhatbuf_r+0x24>
 800d940:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d944:	2200      	movs	r2, #0
 800d946:	602a      	str	r2, [r5, #0]
 800d948:	061a      	lsls	r2, r3, #24
 800d94a:	d410      	bmi.n	800d96e <__swhatbuf_r+0x40>
 800d94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d950:	e00e      	b.n	800d970 <__swhatbuf_r+0x42>
 800d952:	466a      	mov	r2, sp
 800d954:	f002 ff5a 	bl	801080c <_fstat_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	dbf1      	blt.n	800d940 <__swhatbuf_r+0x12>
 800d95c:	9a01      	ldr	r2, [sp, #4]
 800d95e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d962:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d966:	425a      	negs	r2, r3
 800d968:	415a      	adcs	r2, r3
 800d96a:	602a      	str	r2, [r5, #0]
 800d96c:	e7ee      	b.n	800d94c <__swhatbuf_r+0x1e>
 800d96e:	2340      	movs	r3, #64	; 0x40
 800d970:	2000      	movs	r0, #0
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	b016      	add	sp, #88	; 0x58
 800d976:	bd70      	pop	{r4, r5, r6, pc}

0800d978 <__smakebuf_r>:
 800d978:	898b      	ldrh	r3, [r1, #12]
 800d97a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d97c:	079d      	lsls	r5, r3, #30
 800d97e:	4606      	mov	r6, r0
 800d980:	460c      	mov	r4, r1
 800d982:	d507      	bpl.n	800d994 <__smakebuf_r+0x1c>
 800d984:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	6123      	str	r3, [r4, #16]
 800d98c:	2301      	movs	r3, #1
 800d98e:	6163      	str	r3, [r4, #20]
 800d990:	b002      	add	sp, #8
 800d992:	bd70      	pop	{r4, r5, r6, pc}
 800d994:	ab01      	add	r3, sp, #4
 800d996:	466a      	mov	r2, sp
 800d998:	f7ff ffc9 	bl	800d92e <__swhatbuf_r>
 800d99c:	9900      	ldr	r1, [sp, #0]
 800d99e:	4605      	mov	r5, r0
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f000 f8ab 	bl	800dafc <_malloc_r>
 800d9a6:	b948      	cbnz	r0, 800d9bc <__smakebuf_r+0x44>
 800d9a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9ac:	059a      	lsls	r2, r3, #22
 800d9ae:	d4ef      	bmi.n	800d990 <__smakebuf_r+0x18>
 800d9b0:	f023 0303 	bic.w	r3, r3, #3
 800d9b4:	f043 0302 	orr.w	r3, r3, #2
 800d9b8:	81a3      	strh	r3, [r4, #12]
 800d9ba:	e7e3      	b.n	800d984 <__smakebuf_r+0xc>
 800d9bc:	4b0d      	ldr	r3, [pc, #52]	; (800d9f4 <__smakebuf_r+0x7c>)
 800d9be:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	6020      	str	r0, [r4, #0]
 800d9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9c8:	81a3      	strh	r3, [r4, #12]
 800d9ca:	9b00      	ldr	r3, [sp, #0]
 800d9cc:	6163      	str	r3, [r4, #20]
 800d9ce:	9b01      	ldr	r3, [sp, #4]
 800d9d0:	6120      	str	r0, [r4, #16]
 800d9d2:	b15b      	cbz	r3, 800d9ec <__smakebuf_r+0x74>
 800d9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9d8:	4630      	mov	r0, r6
 800d9da:	f003 fa99 	bl	8010f10 <_isatty_r>
 800d9de:	b128      	cbz	r0, 800d9ec <__smakebuf_r+0x74>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	f023 0303 	bic.w	r3, r3, #3
 800d9e6:	f043 0301 	orr.w	r3, r3, #1
 800d9ea:	81a3      	strh	r3, [r4, #12]
 800d9ec:	89a0      	ldrh	r0, [r4, #12]
 800d9ee:	4305      	orrs	r5, r0
 800d9f0:	81a5      	strh	r5, [r4, #12]
 800d9f2:	e7cd      	b.n	800d990 <__smakebuf_r+0x18>
 800d9f4:	0800d73d 	.word	0x0800d73d

0800d9f8 <memcpy>:
 800d9f8:	440a      	add	r2, r1
 800d9fa:	4291      	cmp	r1, r2
 800d9fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800da00:	d100      	bne.n	800da04 <memcpy+0xc>
 800da02:	4770      	bx	lr
 800da04:	b510      	push	{r4, lr}
 800da06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da0e:	4291      	cmp	r1, r2
 800da10:	d1f9      	bne.n	800da06 <memcpy+0xe>
 800da12:	bd10      	pop	{r4, pc}

0800da14 <memset>:
 800da14:	4402      	add	r2, r0
 800da16:	4603      	mov	r3, r0
 800da18:	4293      	cmp	r3, r2
 800da1a:	d100      	bne.n	800da1e <memset+0xa>
 800da1c:	4770      	bx	lr
 800da1e:	f803 1b01 	strb.w	r1, [r3], #1
 800da22:	e7f9      	b.n	800da18 <memset+0x4>

0800da24 <_free_r>:
 800da24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da26:	2900      	cmp	r1, #0
 800da28:	d044      	beq.n	800dab4 <_free_r+0x90>
 800da2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da2e:	9001      	str	r0, [sp, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	f1a1 0404 	sub.w	r4, r1, #4
 800da36:	bfb8      	it	lt
 800da38:	18e4      	addlt	r4, r4, r3
 800da3a:	f003 faa9 	bl	8010f90 <__malloc_lock>
 800da3e:	4a1e      	ldr	r2, [pc, #120]	; (800dab8 <_free_r+0x94>)
 800da40:	9801      	ldr	r0, [sp, #4]
 800da42:	6813      	ldr	r3, [r2, #0]
 800da44:	b933      	cbnz	r3, 800da54 <_free_r+0x30>
 800da46:	6063      	str	r3, [r4, #4]
 800da48:	6014      	str	r4, [r2, #0]
 800da4a:	b003      	add	sp, #12
 800da4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da50:	f003 baa4 	b.w	8010f9c <__malloc_unlock>
 800da54:	42a3      	cmp	r3, r4
 800da56:	d908      	bls.n	800da6a <_free_r+0x46>
 800da58:	6825      	ldr	r5, [r4, #0]
 800da5a:	1961      	adds	r1, r4, r5
 800da5c:	428b      	cmp	r3, r1
 800da5e:	bf01      	itttt	eq
 800da60:	6819      	ldreq	r1, [r3, #0]
 800da62:	685b      	ldreq	r3, [r3, #4]
 800da64:	1949      	addeq	r1, r1, r5
 800da66:	6021      	streq	r1, [r4, #0]
 800da68:	e7ed      	b.n	800da46 <_free_r+0x22>
 800da6a:	461a      	mov	r2, r3
 800da6c:	685b      	ldr	r3, [r3, #4]
 800da6e:	b10b      	cbz	r3, 800da74 <_free_r+0x50>
 800da70:	42a3      	cmp	r3, r4
 800da72:	d9fa      	bls.n	800da6a <_free_r+0x46>
 800da74:	6811      	ldr	r1, [r2, #0]
 800da76:	1855      	adds	r5, r2, r1
 800da78:	42a5      	cmp	r5, r4
 800da7a:	d10b      	bne.n	800da94 <_free_r+0x70>
 800da7c:	6824      	ldr	r4, [r4, #0]
 800da7e:	4421      	add	r1, r4
 800da80:	1854      	adds	r4, r2, r1
 800da82:	42a3      	cmp	r3, r4
 800da84:	6011      	str	r1, [r2, #0]
 800da86:	d1e0      	bne.n	800da4a <_free_r+0x26>
 800da88:	681c      	ldr	r4, [r3, #0]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	6053      	str	r3, [r2, #4]
 800da8e:	4421      	add	r1, r4
 800da90:	6011      	str	r1, [r2, #0]
 800da92:	e7da      	b.n	800da4a <_free_r+0x26>
 800da94:	d902      	bls.n	800da9c <_free_r+0x78>
 800da96:	230c      	movs	r3, #12
 800da98:	6003      	str	r3, [r0, #0]
 800da9a:	e7d6      	b.n	800da4a <_free_r+0x26>
 800da9c:	6825      	ldr	r5, [r4, #0]
 800da9e:	1961      	adds	r1, r4, r5
 800daa0:	428b      	cmp	r3, r1
 800daa2:	bf04      	itt	eq
 800daa4:	6819      	ldreq	r1, [r3, #0]
 800daa6:	685b      	ldreq	r3, [r3, #4]
 800daa8:	6063      	str	r3, [r4, #4]
 800daaa:	bf04      	itt	eq
 800daac:	1949      	addeq	r1, r1, r5
 800daae:	6021      	streq	r1, [r4, #0]
 800dab0:	6054      	str	r4, [r2, #4]
 800dab2:	e7ca      	b.n	800da4a <_free_r+0x26>
 800dab4:	b003      	add	sp, #12
 800dab6:	bd30      	pop	{r4, r5, pc}
 800dab8:	2000a8a4 	.word	0x2000a8a4

0800dabc <sbrk_aligned>:
 800dabc:	b570      	push	{r4, r5, r6, lr}
 800dabe:	4e0e      	ldr	r6, [pc, #56]	; (800daf8 <sbrk_aligned+0x3c>)
 800dac0:	460c      	mov	r4, r1
 800dac2:	6831      	ldr	r1, [r6, #0]
 800dac4:	4605      	mov	r5, r0
 800dac6:	b911      	cbnz	r1, 800dace <sbrk_aligned+0x12>
 800dac8:	f000 ffaa 	bl	800ea20 <_sbrk_r>
 800dacc:	6030      	str	r0, [r6, #0]
 800dace:	4621      	mov	r1, r4
 800dad0:	4628      	mov	r0, r5
 800dad2:	f000 ffa5 	bl	800ea20 <_sbrk_r>
 800dad6:	1c43      	adds	r3, r0, #1
 800dad8:	d00a      	beq.n	800daf0 <sbrk_aligned+0x34>
 800dada:	1cc4      	adds	r4, r0, #3
 800dadc:	f024 0403 	bic.w	r4, r4, #3
 800dae0:	42a0      	cmp	r0, r4
 800dae2:	d007      	beq.n	800daf4 <sbrk_aligned+0x38>
 800dae4:	1a21      	subs	r1, r4, r0
 800dae6:	4628      	mov	r0, r5
 800dae8:	f000 ff9a 	bl	800ea20 <_sbrk_r>
 800daec:	3001      	adds	r0, #1
 800daee:	d101      	bne.n	800daf4 <sbrk_aligned+0x38>
 800daf0:	f04f 34ff 	mov.w	r4, #4294967295
 800daf4:	4620      	mov	r0, r4
 800daf6:	bd70      	pop	{r4, r5, r6, pc}
 800daf8:	2000a8a8 	.word	0x2000a8a8

0800dafc <_malloc_r>:
 800dafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db00:	1ccd      	adds	r5, r1, #3
 800db02:	f025 0503 	bic.w	r5, r5, #3
 800db06:	3508      	adds	r5, #8
 800db08:	2d0c      	cmp	r5, #12
 800db0a:	bf38      	it	cc
 800db0c:	250c      	movcc	r5, #12
 800db0e:	2d00      	cmp	r5, #0
 800db10:	4607      	mov	r7, r0
 800db12:	db01      	blt.n	800db18 <_malloc_r+0x1c>
 800db14:	42a9      	cmp	r1, r5
 800db16:	d905      	bls.n	800db24 <_malloc_r+0x28>
 800db18:	230c      	movs	r3, #12
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	2600      	movs	r6, #0
 800db1e:	4630      	mov	r0, r6
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db24:	4e2e      	ldr	r6, [pc, #184]	; (800dbe0 <_malloc_r+0xe4>)
 800db26:	f003 fa33 	bl	8010f90 <__malloc_lock>
 800db2a:	6833      	ldr	r3, [r6, #0]
 800db2c:	461c      	mov	r4, r3
 800db2e:	bb34      	cbnz	r4, 800db7e <_malloc_r+0x82>
 800db30:	4629      	mov	r1, r5
 800db32:	4638      	mov	r0, r7
 800db34:	f7ff ffc2 	bl	800dabc <sbrk_aligned>
 800db38:	1c43      	adds	r3, r0, #1
 800db3a:	4604      	mov	r4, r0
 800db3c:	d14d      	bne.n	800dbda <_malloc_r+0xde>
 800db3e:	6834      	ldr	r4, [r6, #0]
 800db40:	4626      	mov	r6, r4
 800db42:	2e00      	cmp	r6, #0
 800db44:	d140      	bne.n	800dbc8 <_malloc_r+0xcc>
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	4631      	mov	r1, r6
 800db4a:	4638      	mov	r0, r7
 800db4c:	eb04 0803 	add.w	r8, r4, r3
 800db50:	f000 ff66 	bl	800ea20 <_sbrk_r>
 800db54:	4580      	cmp	r8, r0
 800db56:	d13a      	bne.n	800dbce <_malloc_r+0xd2>
 800db58:	6821      	ldr	r1, [r4, #0]
 800db5a:	3503      	adds	r5, #3
 800db5c:	1a6d      	subs	r5, r5, r1
 800db5e:	f025 0503 	bic.w	r5, r5, #3
 800db62:	3508      	adds	r5, #8
 800db64:	2d0c      	cmp	r5, #12
 800db66:	bf38      	it	cc
 800db68:	250c      	movcc	r5, #12
 800db6a:	4629      	mov	r1, r5
 800db6c:	4638      	mov	r0, r7
 800db6e:	f7ff ffa5 	bl	800dabc <sbrk_aligned>
 800db72:	3001      	adds	r0, #1
 800db74:	d02b      	beq.n	800dbce <_malloc_r+0xd2>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	442b      	add	r3, r5
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	e00e      	b.n	800db9c <_malloc_r+0xa0>
 800db7e:	6822      	ldr	r2, [r4, #0]
 800db80:	1b52      	subs	r2, r2, r5
 800db82:	d41e      	bmi.n	800dbc2 <_malloc_r+0xc6>
 800db84:	2a0b      	cmp	r2, #11
 800db86:	d916      	bls.n	800dbb6 <_malloc_r+0xba>
 800db88:	1961      	adds	r1, r4, r5
 800db8a:	42a3      	cmp	r3, r4
 800db8c:	6025      	str	r5, [r4, #0]
 800db8e:	bf18      	it	ne
 800db90:	6059      	strne	r1, [r3, #4]
 800db92:	6863      	ldr	r3, [r4, #4]
 800db94:	bf08      	it	eq
 800db96:	6031      	streq	r1, [r6, #0]
 800db98:	5162      	str	r2, [r4, r5]
 800db9a:	604b      	str	r3, [r1, #4]
 800db9c:	4638      	mov	r0, r7
 800db9e:	f104 060b 	add.w	r6, r4, #11
 800dba2:	f003 f9fb 	bl	8010f9c <__malloc_unlock>
 800dba6:	f026 0607 	bic.w	r6, r6, #7
 800dbaa:	1d23      	adds	r3, r4, #4
 800dbac:	1af2      	subs	r2, r6, r3
 800dbae:	d0b6      	beq.n	800db1e <_malloc_r+0x22>
 800dbb0:	1b9b      	subs	r3, r3, r6
 800dbb2:	50a3      	str	r3, [r4, r2]
 800dbb4:	e7b3      	b.n	800db1e <_malloc_r+0x22>
 800dbb6:	6862      	ldr	r2, [r4, #4]
 800dbb8:	42a3      	cmp	r3, r4
 800dbba:	bf0c      	ite	eq
 800dbbc:	6032      	streq	r2, [r6, #0]
 800dbbe:	605a      	strne	r2, [r3, #4]
 800dbc0:	e7ec      	b.n	800db9c <_malloc_r+0xa0>
 800dbc2:	4623      	mov	r3, r4
 800dbc4:	6864      	ldr	r4, [r4, #4]
 800dbc6:	e7b2      	b.n	800db2e <_malloc_r+0x32>
 800dbc8:	4634      	mov	r4, r6
 800dbca:	6876      	ldr	r6, [r6, #4]
 800dbcc:	e7b9      	b.n	800db42 <_malloc_r+0x46>
 800dbce:	230c      	movs	r3, #12
 800dbd0:	603b      	str	r3, [r7, #0]
 800dbd2:	4638      	mov	r0, r7
 800dbd4:	f003 f9e2 	bl	8010f9c <__malloc_unlock>
 800dbd8:	e7a1      	b.n	800db1e <_malloc_r+0x22>
 800dbda:	6025      	str	r5, [r4, #0]
 800dbdc:	e7de      	b.n	800db9c <_malloc_r+0xa0>
 800dbde:	bf00      	nop
 800dbe0:	2000a8a4 	.word	0x2000a8a4

0800dbe4 <__cvt>:
 800dbe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe8:	ec55 4b10 	vmov	r4, r5, d0
 800dbec:	2d00      	cmp	r5, #0
 800dbee:	460e      	mov	r6, r1
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	bfbb      	ittet	lt
 800dbf6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dbfa:	461d      	movlt	r5, r3
 800dbfc:	2300      	movge	r3, #0
 800dbfe:	232d      	movlt	r3, #45	; 0x2d
 800dc00:	700b      	strb	r3, [r1, #0]
 800dc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dc08:	4691      	mov	r9, r2
 800dc0a:	f023 0820 	bic.w	r8, r3, #32
 800dc0e:	bfbc      	itt	lt
 800dc10:	4622      	movlt	r2, r4
 800dc12:	4614      	movlt	r4, r2
 800dc14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc18:	d005      	beq.n	800dc26 <__cvt+0x42>
 800dc1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc1e:	d100      	bne.n	800dc22 <__cvt+0x3e>
 800dc20:	3601      	adds	r6, #1
 800dc22:	2102      	movs	r1, #2
 800dc24:	e000      	b.n	800dc28 <__cvt+0x44>
 800dc26:	2103      	movs	r1, #3
 800dc28:	ab03      	add	r3, sp, #12
 800dc2a:	9301      	str	r3, [sp, #4]
 800dc2c:	ab02      	add	r3, sp, #8
 800dc2e:	9300      	str	r3, [sp, #0]
 800dc30:	ec45 4b10 	vmov	d0, r4, r5
 800dc34:	4653      	mov	r3, sl
 800dc36:	4632      	mov	r2, r6
 800dc38:	f001 fffa 	bl	800fc30 <_dtoa_r>
 800dc3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc40:	4607      	mov	r7, r0
 800dc42:	d102      	bne.n	800dc4a <__cvt+0x66>
 800dc44:	f019 0f01 	tst.w	r9, #1
 800dc48:	d022      	beq.n	800dc90 <__cvt+0xac>
 800dc4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc4e:	eb07 0906 	add.w	r9, r7, r6
 800dc52:	d110      	bne.n	800dc76 <__cvt+0x92>
 800dc54:	783b      	ldrb	r3, [r7, #0]
 800dc56:	2b30      	cmp	r3, #48	; 0x30
 800dc58:	d10a      	bne.n	800dc70 <__cvt+0x8c>
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4620      	mov	r0, r4
 800dc60:	4629      	mov	r1, r5
 800dc62:	f7f2 ff41 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc66:	b918      	cbnz	r0, 800dc70 <__cvt+0x8c>
 800dc68:	f1c6 0601 	rsb	r6, r6, #1
 800dc6c:	f8ca 6000 	str.w	r6, [sl]
 800dc70:	f8da 3000 	ldr.w	r3, [sl]
 800dc74:	4499      	add	r9, r3
 800dc76:	2200      	movs	r2, #0
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	f7f2 ff33 	bl	8000ae8 <__aeabi_dcmpeq>
 800dc82:	b108      	cbz	r0, 800dc88 <__cvt+0xa4>
 800dc84:	f8cd 900c 	str.w	r9, [sp, #12]
 800dc88:	2230      	movs	r2, #48	; 0x30
 800dc8a:	9b03      	ldr	r3, [sp, #12]
 800dc8c:	454b      	cmp	r3, r9
 800dc8e:	d307      	bcc.n	800dca0 <__cvt+0xbc>
 800dc90:	9b03      	ldr	r3, [sp, #12]
 800dc92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dc94:	1bdb      	subs	r3, r3, r7
 800dc96:	4638      	mov	r0, r7
 800dc98:	6013      	str	r3, [r2, #0]
 800dc9a:	b004      	add	sp, #16
 800dc9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca0:	1c59      	adds	r1, r3, #1
 800dca2:	9103      	str	r1, [sp, #12]
 800dca4:	701a      	strb	r2, [r3, #0]
 800dca6:	e7f0      	b.n	800dc8a <__cvt+0xa6>

0800dca8 <__exponent>:
 800dca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2900      	cmp	r1, #0
 800dcae:	bfb8      	it	lt
 800dcb0:	4249      	neglt	r1, r1
 800dcb2:	f803 2b02 	strb.w	r2, [r3], #2
 800dcb6:	bfb4      	ite	lt
 800dcb8:	222d      	movlt	r2, #45	; 0x2d
 800dcba:	222b      	movge	r2, #43	; 0x2b
 800dcbc:	2909      	cmp	r1, #9
 800dcbe:	7042      	strb	r2, [r0, #1]
 800dcc0:	dd2a      	ble.n	800dd18 <__exponent+0x70>
 800dcc2:	f10d 0407 	add.w	r4, sp, #7
 800dcc6:	46a4      	mov	ip, r4
 800dcc8:	270a      	movs	r7, #10
 800dcca:	46a6      	mov	lr, r4
 800dccc:	460a      	mov	r2, r1
 800dcce:	fb91 f6f7 	sdiv	r6, r1, r7
 800dcd2:	fb07 1516 	mls	r5, r7, r6, r1
 800dcd6:	3530      	adds	r5, #48	; 0x30
 800dcd8:	2a63      	cmp	r2, #99	; 0x63
 800dcda:	f104 34ff 	add.w	r4, r4, #4294967295
 800dcde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dce2:	4631      	mov	r1, r6
 800dce4:	dcf1      	bgt.n	800dcca <__exponent+0x22>
 800dce6:	3130      	adds	r1, #48	; 0x30
 800dce8:	f1ae 0502 	sub.w	r5, lr, #2
 800dcec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dcf0:	1c44      	adds	r4, r0, #1
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	4561      	cmp	r1, ip
 800dcf6:	d30a      	bcc.n	800dd0e <__exponent+0x66>
 800dcf8:	f10d 0209 	add.w	r2, sp, #9
 800dcfc:	eba2 020e 	sub.w	r2, r2, lr
 800dd00:	4565      	cmp	r5, ip
 800dd02:	bf88      	it	hi
 800dd04:	2200      	movhi	r2, #0
 800dd06:	4413      	add	r3, r2
 800dd08:	1a18      	subs	r0, r3, r0
 800dd0a:	b003      	add	sp, #12
 800dd0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd12:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dd16:	e7ed      	b.n	800dcf4 <__exponent+0x4c>
 800dd18:	2330      	movs	r3, #48	; 0x30
 800dd1a:	3130      	adds	r1, #48	; 0x30
 800dd1c:	7083      	strb	r3, [r0, #2]
 800dd1e:	70c1      	strb	r1, [r0, #3]
 800dd20:	1d03      	adds	r3, r0, #4
 800dd22:	e7f1      	b.n	800dd08 <__exponent+0x60>

0800dd24 <_printf_float>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	ed2d 8b02 	vpush	{d8}
 800dd2c:	b08d      	sub	sp, #52	; 0x34
 800dd2e:	460c      	mov	r4, r1
 800dd30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dd34:	4616      	mov	r6, r2
 800dd36:	461f      	mov	r7, r3
 800dd38:	4605      	mov	r5, r0
 800dd3a:	f003 f8f9 	bl	8010f30 <_localeconv_r>
 800dd3e:	f8d0 a000 	ldr.w	sl, [r0]
 800dd42:	4650      	mov	r0, sl
 800dd44:	f7f2 fa4e 	bl	80001e4 <strlen>
 800dd48:	2300      	movs	r3, #0
 800dd4a:	930a      	str	r3, [sp, #40]	; 0x28
 800dd4c:	6823      	ldr	r3, [r4, #0]
 800dd4e:	9305      	str	r3, [sp, #20]
 800dd50:	f8d8 3000 	ldr.w	r3, [r8]
 800dd54:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dd58:	3307      	adds	r3, #7
 800dd5a:	f023 0307 	bic.w	r3, r3, #7
 800dd5e:	f103 0208 	add.w	r2, r3, #8
 800dd62:	f8c8 2000 	str.w	r2, [r8]
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dd6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dd72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dd76:	9307      	str	r3, [sp, #28]
 800dd78:	f8cd 8018 	str.w	r8, [sp, #24]
 800dd7c:	ee08 0a10 	vmov	s16, r0
 800dd80:	4b9f      	ldr	r3, [pc, #636]	; (800e000 <_printf_float+0x2dc>)
 800dd82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd86:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8a:	f7f2 fedf 	bl	8000b4c <__aeabi_dcmpun>
 800dd8e:	bb88      	cbnz	r0, 800ddf4 <_printf_float+0xd0>
 800dd90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dd94:	4b9a      	ldr	r3, [pc, #616]	; (800e000 <_printf_float+0x2dc>)
 800dd96:	f04f 32ff 	mov.w	r2, #4294967295
 800dd9a:	f7f2 feb9 	bl	8000b10 <__aeabi_dcmple>
 800dd9e:	bb48      	cbnz	r0, 800ddf4 <_printf_float+0xd0>
 800dda0:	2200      	movs	r2, #0
 800dda2:	2300      	movs	r3, #0
 800dda4:	4640      	mov	r0, r8
 800dda6:	4649      	mov	r1, r9
 800dda8:	f7f2 fea8 	bl	8000afc <__aeabi_dcmplt>
 800ddac:	b110      	cbz	r0, 800ddb4 <_printf_float+0x90>
 800ddae:	232d      	movs	r3, #45	; 0x2d
 800ddb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddb4:	4b93      	ldr	r3, [pc, #588]	; (800e004 <_printf_float+0x2e0>)
 800ddb6:	4894      	ldr	r0, [pc, #592]	; (800e008 <_printf_float+0x2e4>)
 800ddb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ddbc:	bf94      	ite	ls
 800ddbe:	4698      	movls	r8, r3
 800ddc0:	4680      	movhi	r8, r0
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	6123      	str	r3, [r4, #16]
 800ddc6:	9b05      	ldr	r3, [sp, #20]
 800ddc8:	f023 0204 	bic.w	r2, r3, #4
 800ddcc:	6022      	str	r2, [r4, #0]
 800ddce:	f04f 0900 	mov.w	r9, #0
 800ddd2:	9700      	str	r7, [sp, #0]
 800ddd4:	4633      	mov	r3, r6
 800ddd6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ddd8:	4621      	mov	r1, r4
 800ddda:	4628      	mov	r0, r5
 800dddc:	f000 f9d8 	bl	800e190 <_printf_common>
 800dde0:	3001      	adds	r0, #1
 800dde2:	f040 8090 	bne.w	800df06 <_printf_float+0x1e2>
 800dde6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddea:	b00d      	add	sp, #52	; 0x34
 800ddec:	ecbd 8b02 	vpop	{d8}
 800ddf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddf4:	4642      	mov	r2, r8
 800ddf6:	464b      	mov	r3, r9
 800ddf8:	4640      	mov	r0, r8
 800ddfa:	4649      	mov	r1, r9
 800ddfc:	f7f2 fea6 	bl	8000b4c <__aeabi_dcmpun>
 800de00:	b140      	cbz	r0, 800de14 <_printf_float+0xf0>
 800de02:	464b      	mov	r3, r9
 800de04:	2b00      	cmp	r3, #0
 800de06:	bfbc      	itt	lt
 800de08:	232d      	movlt	r3, #45	; 0x2d
 800de0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de0e:	487f      	ldr	r0, [pc, #508]	; (800e00c <_printf_float+0x2e8>)
 800de10:	4b7f      	ldr	r3, [pc, #508]	; (800e010 <_printf_float+0x2ec>)
 800de12:	e7d1      	b.n	800ddb8 <_printf_float+0x94>
 800de14:	6863      	ldr	r3, [r4, #4]
 800de16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800de1a:	9206      	str	r2, [sp, #24]
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	d13f      	bne.n	800dea0 <_printf_float+0x17c>
 800de20:	2306      	movs	r3, #6
 800de22:	6063      	str	r3, [r4, #4]
 800de24:	9b05      	ldr	r3, [sp, #20]
 800de26:	6861      	ldr	r1, [r4, #4]
 800de28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800de2c:	2300      	movs	r3, #0
 800de2e:	9303      	str	r3, [sp, #12]
 800de30:	ab0a      	add	r3, sp, #40	; 0x28
 800de32:	e9cd b301 	strd	fp, r3, [sp, #4]
 800de36:	ab09      	add	r3, sp, #36	; 0x24
 800de38:	ec49 8b10 	vmov	d0, r8, r9
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	6022      	str	r2, [r4, #0]
 800de40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800de44:	4628      	mov	r0, r5
 800de46:	f7ff fecd 	bl	800dbe4 <__cvt>
 800de4a:	9b06      	ldr	r3, [sp, #24]
 800de4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de4e:	2b47      	cmp	r3, #71	; 0x47
 800de50:	4680      	mov	r8, r0
 800de52:	d108      	bne.n	800de66 <_printf_float+0x142>
 800de54:	1cc8      	adds	r0, r1, #3
 800de56:	db02      	blt.n	800de5e <_printf_float+0x13a>
 800de58:	6863      	ldr	r3, [r4, #4]
 800de5a:	4299      	cmp	r1, r3
 800de5c:	dd41      	ble.n	800dee2 <_printf_float+0x1be>
 800de5e:	f1ab 0b02 	sub.w	fp, fp, #2
 800de62:	fa5f fb8b 	uxtb.w	fp, fp
 800de66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de6a:	d820      	bhi.n	800deae <_printf_float+0x18a>
 800de6c:	3901      	subs	r1, #1
 800de6e:	465a      	mov	r2, fp
 800de70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de74:	9109      	str	r1, [sp, #36]	; 0x24
 800de76:	f7ff ff17 	bl	800dca8 <__exponent>
 800de7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de7c:	1813      	adds	r3, r2, r0
 800de7e:	2a01      	cmp	r2, #1
 800de80:	4681      	mov	r9, r0
 800de82:	6123      	str	r3, [r4, #16]
 800de84:	dc02      	bgt.n	800de8c <_printf_float+0x168>
 800de86:	6822      	ldr	r2, [r4, #0]
 800de88:	07d2      	lsls	r2, r2, #31
 800de8a:	d501      	bpl.n	800de90 <_printf_float+0x16c>
 800de8c:	3301      	adds	r3, #1
 800de8e:	6123      	str	r3, [r4, #16]
 800de90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800de94:	2b00      	cmp	r3, #0
 800de96:	d09c      	beq.n	800ddd2 <_printf_float+0xae>
 800de98:	232d      	movs	r3, #45	; 0x2d
 800de9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de9e:	e798      	b.n	800ddd2 <_printf_float+0xae>
 800dea0:	9a06      	ldr	r2, [sp, #24]
 800dea2:	2a47      	cmp	r2, #71	; 0x47
 800dea4:	d1be      	bne.n	800de24 <_printf_float+0x100>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1bc      	bne.n	800de24 <_printf_float+0x100>
 800deaa:	2301      	movs	r3, #1
 800deac:	e7b9      	b.n	800de22 <_printf_float+0xfe>
 800deae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800deb2:	d118      	bne.n	800dee6 <_printf_float+0x1c2>
 800deb4:	2900      	cmp	r1, #0
 800deb6:	6863      	ldr	r3, [r4, #4]
 800deb8:	dd0b      	ble.n	800ded2 <_printf_float+0x1ae>
 800deba:	6121      	str	r1, [r4, #16]
 800debc:	b913      	cbnz	r3, 800dec4 <_printf_float+0x1a0>
 800debe:	6822      	ldr	r2, [r4, #0]
 800dec0:	07d0      	lsls	r0, r2, #31
 800dec2:	d502      	bpl.n	800deca <_printf_float+0x1a6>
 800dec4:	3301      	adds	r3, #1
 800dec6:	440b      	add	r3, r1
 800dec8:	6123      	str	r3, [r4, #16]
 800deca:	65a1      	str	r1, [r4, #88]	; 0x58
 800decc:	f04f 0900 	mov.w	r9, #0
 800ded0:	e7de      	b.n	800de90 <_printf_float+0x16c>
 800ded2:	b913      	cbnz	r3, 800deda <_printf_float+0x1b6>
 800ded4:	6822      	ldr	r2, [r4, #0]
 800ded6:	07d2      	lsls	r2, r2, #31
 800ded8:	d501      	bpl.n	800dede <_printf_float+0x1ba>
 800deda:	3302      	adds	r3, #2
 800dedc:	e7f4      	b.n	800dec8 <_printf_float+0x1a4>
 800dede:	2301      	movs	r3, #1
 800dee0:	e7f2      	b.n	800dec8 <_printf_float+0x1a4>
 800dee2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee8:	4299      	cmp	r1, r3
 800deea:	db05      	blt.n	800def8 <_printf_float+0x1d4>
 800deec:	6823      	ldr	r3, [r4, #0]
 800deee:	6121      	str	r1, [r4, #16]
 800def0:	07d8      	lsls	r0, r3, #31
 800def2:	d5ea      	bpl.n	800deca <_printf_float+0x1a6>
 800def4:	1c4b      	adds	r3, r1, #1
 800def6:	e7e7      	b.n	800dec8 <_printf_float+0x1a4>
 800def8:	2900      	cmp	r1, #0
 800defa:	bfd4      	ite	le
 800defc:	f1c1 0202 	rsble	r2, r1, #2
 800df00:	2201      	movgt	r2, #1
 800df02:	4413      	add	r3, r2
 800df04:	e7e0      	b.n	800dec8 <_printf_float+0x1a4>
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	055a      	lsls	r2, r3, #21
 800df0a:	d407      	bmi.n	800df1c <_printf_float+0x1f8>
 800df0c:	6923      	ldr	r3, [r4, #16]
 800df0e:	4642      	mov	r2, r8
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	d12c      	bne.n	800df74 <_printf_float+0x250>
 800df1a:	e764      	b.n	800dde6 <_printf_float+0xc2>
 800df1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df20:	f240 80e0 	bls.w	800e0e4 <_printf_float+0x3c0>
 800df24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df28:	2200      	movs	r2, #0
 800df2a:	2300      	movs	r3, #0
 800df2c:	f7f2 fddc 	bl	8000ae8 <__aeabi_dcmpeq>
 800df30:	2800      	cmp	r0, #0
 800df32:	d034      	beq.n	800df9e <_printf_float+0x27a>
 800df34:	4a37      	ldr	r2, [pc, #220]	; (800e014 <_printf_float+0x2f0>)
 800df36:	2301      	movs	r3, #1
 800df38:	4631      	mov	r1, r6
 800df3a:	4628      	mov	r0, r5
 800df3c:	47b8      	blx	r7
 800df3e:	3001      	adds	r0, #1
 800df40:	f43f af51 	beq.w	800dde6 <_printf_float+0xc2>
 800df44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df48:	429a      	cmp	r2, r3
 800df4a:	db02      	blt.n	800df52 <_printf_float+0x22e>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	07d8      	lsls	r0, r3, #31
 800df50:	d510      	bpl.n	800df74 <_printf_float+0x250>
 800df52:	ee18 3a10 	vmov	r3, s16
 800df56:	4652      	mov	r2, sl
 800df58:	4631      	mov	r1, r6
 800df5a:	4628      	mov	r0, r5
 800df5c:	47b8      	blx	r7
 800df5e:	3001      	adds	r0, #1
 800df60:	f43f af41 	beq.w	800dde6 <_printf_float+0xc2>
 800df64:	f04f 0800 	mov.w	r8, #0
 800df68:	f104 091a 	add.w	r9, r4, #26
 800df6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df6e:	3b01      	subs	r3, #1
 800df70:	4543      	cmp	r3, r8
 800df72:	dc09      	bgt.n	800df88 <_printf_float+0x264>
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	079b      	lsls	r3, r3, #30
 800df78:	f100 8105 	bmi.w	800e186 <_printf_float+0x462>
 800df7c:	68e0      	ldr	r0, [r4, #12]
 800df7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df80:	4298      	cmp	r0, r3
 800df82:	bfb8      	it	lt
 800df84:	4618      	movlt	r0, r3
 800df86:	e730      	b.n	800ddea <_printf_float+0xc6>
 800df88:	2301      	movs	r3, #1
 800df8a:	464a      	mov	r2, r9
 800df8c:	4631      	mov	r1, r6
 800df8e:	4628      	mov	r0, r5
 800df90:	47b8      	blx	r7
 800df92:	3001      	adds	r0, #1
 800df94:	f43f af27 	beq.w	800dde6 <_printf_float+0xc2>
 800df98:	f108 0801 	add.w	r8, r8, #1
 800df9c:	e7e6      	b.n	800df6c <_printf_float+0x248>
 800df9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	dc39      	bgt.n	800e018 <_printf_float+0x2f4>
 800dfa4:	4a1b      	ldr	r2, [pc, #108]	; (800e014 <_printf_float+0x2f0>)
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	4631      	mov	r1, r6
 800dfaa:	4628      	mov	r0, r5
 800dfac:	47b8      	blx	r7
 800dfae:	3001      	adds	r0, #1
 800dfb0:	f43f af19 	beq.w	800dde6 <_printf_float+0xc2>
 800dfb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	d102      	bne.n	800dfc2 <_printf_float+0x29e>
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	07d9      	lsls	r1, r3, #31
 800dfc0:	d5d8      	bpl.n	800df74 <_printf_float+0x250>
 800dfc2:	ee18 3a10 	vmov	r3, s16
 800dfc6:	4652      	mov	r2, sl
 800dfc8:	4631      	mov	r1, r6
 800dfca:	4628      	mov	r0, r5
 800dfcc:	47b8      	blx	r7
 800dfce:	3001      	adds	r0, #1
 800dfd0:	f43f af09 	beq.w	800dde6 <_printf_float+0xc2>
 800dfd4:	f04f 0900 	mov.w	r9, #0
 800dfd8:	f104 0a1a 	add.w	sl, r4, #26
 800dfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfde:	425b      	negs	r3, r3
 800dfe0:	454b      	cmp	r3, r9
 800dfe2:	dc01      	bgt.n	800dfe8 <_printf_float+0x2c4>
 800dfe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfe6:	e792      	b.n	800df0e <_printf_float+0x1ea>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	4652      	mov	r2, sl
 800dfec:	4631      	mov	r1, r6
 800dfee:	4628      	mov	r0, r5
 800dff0:	47b8      	blx	r7
 800dff2:	3001      	adds	r0, #1
 800dff4:	f43f aef7 	beq.w	800dde6 <_printf_float+0xc2>
 800dff8:	f109 0901 	add.w	r9, r9, #1
 800dffc:	e7ee      	b.n	800dfdc <_printf_float+0x2b8>
 800dffe:	bf00      	nop
 800e000:	7fefffff 	.word	0x7fefffff
 800e004:	08016918 	.word	0x08016918
 800e008:	0801691c 	.word	0x0801691c
 800e00c:	08016924 	.word	0x08016924
 800e010:	08016920 	.word	0x08016920
 800e014:	08016928 	.word	0x08016928
 800e018:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e01a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e01c:	429a      	cmp	r2, r3
 800e01e:	bfa8      	it	ge
 800e020:	461a      	movge	r2, r3
 800e022:	2a00      	cmp	r2, #0
 800e024:	4691      	mov	r9, r2
 800e026:	dc37      	bgt.n	800e098 <_printf_float+0x374>
 800e028:	f04f 0b00 	mov.w	fp, #0
 800e02c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e030:	f104 021a 	add.w	r2, r4, #26
 800e034:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e036:	9305      	str	r3, [sp, #20]
 800e038:	eba3 0309 	sub.w	r3, r3, r9
 800e03c:	455b      	cmp	r3, fp
 800e03e:	dc33      	bgt.n	800e0a8 <_printf_float+0x384>
 800e040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e044:	429a      	cmp	r2, r3
 800e046:	db3b      	blt.n	800e0c0 <_printf_float+0x39c>
 800e048:	6823      	ldr	r3, [r4, #0]
 800e04a:	07da      	lsls	r2, r3, #31
 800e04c:	d438      	bmi.n	800e0c0 <_printf_float+0x39c>
 800e04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e050:	9a05      	ldr	r2, [sp, #20]
 800e052:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e054:	1a9a      	subs	r2, r3, r2
 800e056:	eba3 0901 	sub.w	r9, r3, r1
 800e05a:	4591      	cmp	r9, r2
 800e05c:	bfa8      	it	ge
 800e05e:	4691      	movge	r9, r2
 800e060:	f1b9 0f00 	cmp.w	r9, #0
 800e064:	dc35      	bgt.n	800e0d2 <_printf_float+0x3ae>
 800e066:	f04f 0800 	mov.w	r8, #0
 800e06a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e06e:	f104 0a1a 	add.w	sl, r4, #26
 800e072:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e076:	1a9b      	subs	r3, r3, r2
 800e078:	eba3 0309 	sub.w	r3, r3, r9
 800e07c:	4543      	cmp	r3, r8
 800e07e:	f77f af79 	ble.w	800df74 <_printf_float+0x250>
 800e082:	2301      	movs	r3, #1
 800e084:	4652      	mov	r2, sl
 800e086:	4631      	mov	r1, r6
 800e088:	4628      	mov	r0, r5
 800e08a:	47b8      	blx	r7
 800e08c:	3001      	adds	r0, #1
 800e08e:	f43f aeaa 	beq.w	800dde6 <_printf_float+0xc2>
 800e092:	f108 0801 	add.w	r8, r8, #1
 800e096:	e7ec      	b.n	800e072 <_printf_float+0x34e>
 800e098:	4613      	mov	r3, r2
 800e09a:	4631      	mov	r1, r6
 800e09c:	4642      	mov	r2, r8
 800e09e:	4628      	mov	r0, r5
 800e0a0:	47b8      	blx	r7
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	d1c0      	bne.n	800e028 <_printf_float+0x304>
 800e0a6:	e69e      	b.n	800dde6 <_printf_float+0xc2>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	9205      	str	r2, [sp, #20]
 800e0b0:	47b8      	blx	r7
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	f43f ae97 	beq.w	800dde6 <_printf_float+0xc2>
 800e0b8:	9a05      	ldr	r2, [sp, #20]
 800e0ba:	f10b 0b01 	add.w	fp, fp, #1
 800e0be:	e7b9      	b.n	800e034 <_printf_float+0x310>
 800e0c0:	ee18 3a10 	vmov	r3, s16
 800e0c4:	4652      	mov	r2, sl
 800e0c6:	4631      	mov	r1, r6
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	47b8      	blx	r7
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d1be      	bne.n	800e04e <_printf_float+0x32a>
 800e0d0:	e689      	b.n	800dde6 <_printf_float+0xc2>
 800e0d2:	9a05      	ldr	r2, [sp, #20]
 800e0d4:	464b      	mov	r3, r9
 800e0d6:	4442      	add	r2, r8
 800e0d8:	4631      	mov	r1, r6
 800e0da:	4628      	mov	r0, r5
 800e0dc:	47b8      	blx	r7
 800e0de:	3001      	adds	r0, #1
 800e0e0:	d1c1      	bne.n	800e066 <_printf_float+0x342>
 800e0e2:	e680      	b.n	800dde6 <_printf_float+0xc2>
 800e0e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0e6:	2a01      	cmp	r2, #1
 800e0e8:	dc01      	bgt.n	800e0ee <_printf_float+0x3ca>
 800e0ea:	07db      	lsls	r3, r3, #31
 800e0ec:	d538      	bpl.n	800e160 <_printf_float+0x43c>
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	4642      	mov	r2, r8
 800e0f2:	4631      	mov	r1, r6
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	47b8      	blx	r7
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	f43f ae74 	beq.w	800dde6 <_printf_float+0xc2>
 800e0fe:	ee18 3a10 	vmov	r3, s16
 800e102:	4652      	mov	r2, sl
 800e104:	4631      	mov	r1, r6
 800e106:	4628      	mov	r0, r5
 800e108:	47b8      	blx	r7
 800e10a:	3001      	adds	r0, #1
 800e10c:	f43f ae6b 	beq.w	800dde6 <_printf_float+0xc2>
 800e110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e114:	2200      	movs	r2, #0
 800e116:	2300      	movs	r3, #0
 800e118:	f7f2 fce6 	bl	8000ae8 <__aeabi_dcmpeq>
 800e11c:	b9d8      	cbnz	r0, 800e156 <_printf_float+0x432>
 800e11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e120:	f108 0201 	add.w	r2, r8, #1
 800e124:	3b01      	subs	r3, #1
 800e126:	4631      	mov	r1, r6
 800e128:	4628      	mov	r0, r5
 800e12a:	47b8      	blx	r7
 800e12c:	3001      	adds	r0, #1
 800e12e:	d10e      	bne.n	800e14e <_printf_float+0x42a>
 800e130:	e659      	b.n	800dde6 <_printf_float+0xc2>
 800e132:	2301      	movs	r3, #1
 800e134:	4652      	mov	r2, sl
 800e136:	4631      	mov	r1, r6
 800e138:	4628      	mov	r0, r5
 800e13a:	47b8      	blx	r7
 800e13c:	3001      	adds	r0, #1
 800e13e:	f43f ae52 	beq.w	800dde6 <_printf_float+0xc2>
 800e142:	f108 0801 	add.w	r8, r8, #1
 800e146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e148:	3b01      	subs	r3, #1
 800e14a:	4543      	cmp	r3, r8
 800e14c:	dcf1      	bgt.n	800e132 <_printf_float+0x40e>
 800e14e:	464b      	mov	r3, r9
 800e150:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e154:	e6dc      	b.n	800df10 <_printf_float+0x1ec>
 800e156:	f04f 0800 	mov.w	r8, #0
 800e15a:	f104 0a1a 	add.w	sl, r4, #26
 800e15e:	e7f2      	b.n	800e146 <_printf_float+0x422>
 800e160:	2301      	movs	r3, #1
 800e162:	4642      	mov	r2, r8
 800e164:	e7df      	b.n	800e126 <_printf_float+0x402>
 800e166:	2301      	movs	r3, #1
 800e168:	464a      	mov	r2, r9
 800e16a:	4631      	mov	r1, r6
 800e16c:	4628      	mov	r0, r5
 800e16e:	47b8      	blx	r7
 800e170:	3001      	adds	r0, #1
 800e172:	f43f ae38 	beq.w	800dde6 <_printf_float+0xc2>
 800e176:	f108 0801 	add.w	r8, r8, #1
 800e17a:	68e3      	ldr	r3, [r4, #12]
 800e17c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e17e:	1a5b      	subs	r3, r3, r1
 800e180:	4543      	cmp	r3, r8
 800e182:	dcf0      	bgt.n	800e166 <_printf_float+0x442>
 800e184:	e6fa      	b.n	800df7c <_printf_float+0x258>
 800e186:	f04f 0800 	mov.w	r8, #0
 800e18a:	f104 0919 	add.w	r9, r4, #25
 800e18e:	e7f4      	b.n	800e17a <_printf_float+0x456>

0800e190 <_printf_common>:
 800e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	4616      	mov	r6, r2
 800e196:	4699      	mov	r9, r3
 800e198:	688a      	ldr	r2, [r1, #8]
 800e19a:	690b      	ldr	r3, [r1, #16]
 800e19c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	bfb8      	it	lt
 800e1a4:	4613      	movlt	r3, r2
 800e1a6:	6033      	str	r3, [r6, #0]
 800e1a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	460c      	mov	r4, r1
 800e1b0:	b10a      	cbz	r2, 800e1b6 <_printf_common+0x26>
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	6033      	str	r3, [r6, #0]
 800e1b6:	6823      	ldr	r3, [r4, #0]
 800e1b8:	0699      	lsls	r1, r3, #26
 800e1ba:	bf42      	ittt	mi
 800e1bc:	6833      	ldrmi	r3, [r6, #0]
 800e1be:	3302      	addmi	r3, #2
 800e1c0:	6033      	strmi	r3, [r6, #0]
 800e1c2:	6825      	ldr	r5, [r4, #0]
 800e1c4:	f015 0506 	ands.w	r5, r5, #6
 800e1c8:	d106      	bne.n	800e1d8 <_printf_common+0x48>
 800e1ca:	f104 0a19 	add.w	sl, r4, #25
 800e1ce:	68e3      	ldr	r3, [r4, #12]
 800e1d0:	6832      	ldr	r2, [r6, #0]
 800e1d2:	1a9b      	subs	r3, r3, r2
 800e1d4:	42ab      	cmp	r3, r5
 800e1d6:	dc26      	bgt.n	800e226 <_printf_common+0x96>
 800e1d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1dc:	1e13      	subs	r3, r2, #0
 800e1de:	6822      	ldr	r2, [r4, #0]
 800e1e0:	bf18      	it	ne
 800e1e2:	2301      	movne	r3, #1
 800e1e4:	0692      	lsls	r2, r2, #26
 800e1e6:	d42b      	bmi.n	800e240 <_printf_common+0xb0>
 800e1e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1ec:	4649      	mov	r1, r9
 800e1ee:	4638      	mov	r0, r7
 800e1f0:	47c0      	blx	r8
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	d01e      	beq.n	800e234 <_printf_common+0xa4>
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	68e5      	ldr	r5, [r4, #12]
 800e1fa:	6832      	ldr	r2, [r6, #0]
 800e1fc:	f003 0306 	and.w	r3, r3, #6
 800e200:	2b04      	cmp	r3, #4
 800e202:	bf08      	it	eq
 800e204:	1aad      	subeq	r5, r5, r2
 800e206:	68a3      	ldr	r3, [r4, #8]
 800e208:	6922      	ldr	r2, [r4, #16]
 800e20a:	bf0c      	ite	eq
 800e20c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e210:	2500      	movne	r5, #0
 800e212:	4293      	cmp	r3, r2
 800e214:	bfc4      	itt	gt
 800e216:	1a9b      	subgt	r3, r3, r2
 800e218:	18ed      	addgt	r5, r5, r3
 800e21a:	2600      	movs	r6, #0
 800e21c:	341a      	adds	r4, #26
 800e21e:	42b5      	cmp	r5, r6
 800e220:	d11a      	bne.n	800e258 <_printf_common+0xc8>
 800e222:	2000      	movs	r0, #0
 800e224:	e008      	b.n	800e238 <_printf_common+0xa8>
 800e226:	2301      	movs	r3, #1
 800e228:	4652      	mov	r2, sl
 800e22a:	4649      	mov	r1, r9
 800e22c:	4638      	mov	r0, r7
 800e22e:	47c0      	blx	r8
 800e230:	3001      	adds	r0, #1
 800e232:	d103      	bne.n	800e23c <_printf_common+0xac>
 800e234:	f04f 30ff 	mov.w	r0, #4294967295
 800e238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e23c:	3501      	adds	r5, #1
 800e23e:	e7c6      	b.n	800e1ce <_printf_common+0x3e>
 800e240:	18e1      	adds	r1, r4, r3
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	2030      	movs	r0, #48	; 0x30
 800e246:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e24a:	4422      	add	r2, r4
 800e24c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e250:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e254:	3302      	adds	r3, #2
 800e256:	e7c7      	b.n	800e1e8 <_printf_common+0x58>
 800e258:	2301      	movs	r3, #1
 800e25a:	4622      	mov	r2, r4
 800e25c:	4649      	mov	r1, r9
 800e25e:	4638      	mov	r0, r7
 800e260:	47c0      	blx	r8
 800e262:	3001      	adds	r0, #1
 800e264:	d0e6      	beq.n	800e234 <_printf_common+0xa4>
 800e266:	3601      	adds	r6, #1
 800e268:	e7d9      	b.n	800e21e <_printf_common+0x8e>
	...

0800e26c <_printf_i>:
 800e26c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e270:	7e0f      	ldrb	r7, [r1, #24]
 800e272:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e274:	2f78      	cmp	r7, #120	; 0x78
 800e276:	4691      	mov	r9, r2
 800e278:	4680      	mov	r8, r0
 800e27a:	460c      	mov	r4, r1
 800e27c:	469a      	mov	sl, r3
 800e27e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e282:	d807      	bhi.n	800e294 <_printf_i+0x28>
 800e284:	2f62      	cmp	r7, #98	; 0x62
 800e286:	d80a      	bhi.n	800e29e <_printf_i+0x32>
 800e288:	2f00      	cmp	r7, #0
 800e28a:	f000 80d8 	beq.w	800e43e <_printf_i+0x1d2>
 800e28e:	2f58      	cmp	r7, #88	; 0x58
 800e290:	f000 80a3 	beq.w	800e3da <_printf_i+0x16e>
 800e294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e298:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e29c:	e03a      	b.n	800e314 <_printf_i+0xa8>
 800e29e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2a2:	2b15      	cmp	r3, #21
 800e2a4:	d8f6      	bhi.n	800e294 <_printf_i+0x28>
 800e2a6:	a101      	add	r1, pc, #4	; (adr r1, 800e2ac <_printf_i+0x40>)
 800e2a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e2ac:	0800e305 	.word	0x0800e305
 800e2b0:	0800e319 	.word	0x0800e319
 800e2b4:	0800e295 	.word	0x0800e295
 800e2b8:	0800e295 	.word	0x0800e295
 800e2bc:	0800e295 	.word	0x0800e295
 800e2c0:	0800e295 	.word	0x0800e295
 800e2c4:	0800e319 	.word	0x0800e319
 800e2c8:	0800e295 	.word	0x0800e295
 800e2cc:	0800e295 	.word	0x0800e295
 800e2d0:	0800e295 	.word	0x0800e295
 800e2d4:	0800e295 	.word	0x0800e295
 800e2d8:	0800e425 	.word	0x0800e425
 800e2dc:	0800e349 	.word	0x0800e349
 800e2e0:	0800e407 	.word	0x0800e407
 800e2e4:	0800e295 	.word	0x0800e295
 800e2e8:	0800e295 	.word	0x0800e295
 800e2ec:	0800e447 	.word	0x0800e447
 800e2f0:	0800e295 	.word	0x0800e295
 800e2f4:	0800e349 	.word	0x0800e349
 800e2f8:	0800e295 	.word	0x0800e295
 800e2fc:	0800e295 	.word	0x0800e295
 800e300:	0800e40f 	.word	0x0800e40f
 800e304:	682b      	ldr	r3, [r5, #0]
 800e306:	1d1a      	adds	r2, r3, #4
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	602a      	str	r2, [r5, #0]
 800e30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e314:	2301      	movs	r3, #1
 800e316:	e0a3      	b.n	800e460 <_printf_i+0x1f4>
 800e318:	6820      	ldr	r0, [r4, #0]
 800e31a:	6829      	ldr	r1, [r5, #0]
 800e31c:	0606      	lsls	r6, r0, #24
 800e31e:	f101 0304 	add.w	r3, r1, #4
 800e322:	d50a      	bpl.n	800e33a <_printf_i+0xce>
 800e324:	680e      	ldr	r6, [r1, #0]
 800e326:	602b      	str	r3, [r5, #0]
 800e328:	2e00      	cmp	r6, #0
 800e32a:	da03      	bge.n	800e334 <_printf_i+0xc8>
 800e32c:	232d      	movs	r3, #45	; 0x2d
 800e32e:	4276      	negs	r6, r6
 800e330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e334:	485e      	ldr	r0, [pc, #376]	; (800e4b0 <_printf_i+0x244>)
 800e336:	230a      	movs	r3, #10
 800e338:	e019      	b.n	800e36e <_printf_i+0x102>
 800e33a:	680e      	ldr	r6, [r1, #0]
 800e33c:	602b      	str	r3, [r5, #0]
 800e33e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e342:	bf18      	it	ne
 800e344:	b236      	sxthne	r6, r6
 800e346:	e7ef      	b.n	800e328 <_printf_i+0xbc>
 800e348:	682b      	ldr	r3, [r5, #0]
 800e34a:	6820      	ldr	r0, [r4, #0]
 800e34c:	1d19      	adds	r1, r3, #4
 800e34e:	6029      	str	r1, [r5, #0]
 800e350:	0601      	lsls	r1, r0, #24
 800e352:	d501      	bpl.n	800e358 <_printf_i+0xec>
 800e354:	681e      	ldr	r6, [r3, #0]
 800e356:	e002      	b.n	800e35e <_printf_i+0xf2>
 800e358:	0646      	lsls	r6, r0, #25
 800e35a:	d5fb      	bpl.n	800e354 <_printf_i+0xe8>
 800e35c:	881e      	ldrh	r6, [r3, #0]
 800e35e:	4854      	ldr	r0, [pc, #336]	; (800e4b0 <_printf_i+0x244>)
 800e360:	2f6f      	cmp	r7, #111	; 0x6f
 800e362:	bf0c      	ite	eq
 800e364:	2308      	moveq	r3, #8
 800e366:	230a      	movne	r3, #10
 800e368:	2100      	movs	r1, #0
 800e36a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e36e:	6865      	ldr	r5, [r4, #4]
 800e370:	60a5      	str	r5, [r4, #8]
 800e372:	2d00      	cmp	r5, #0
 800e374:	bfa2      	ittt	ge
 800e376:	6821      	ldrge	r1, [r4, #0]
 800e378:	f021 0104 	bicge.w	r1, r1, #4
 800e37c:	6021      	strge	r1, [r4, #0]
 800e37e:	b90e      	cbnz	r6, 800e384 <_printf_i+0x118>
 800e380:	2d00      	cmp	r5, #0
 800e382:	d04d      	beq.n	800e420 <_printf_i+0x1b4>
 800e384:	4615      	mov	r5, r2
 800e386:	fbb6 f1f3 	udiv	r1, r6, r3
 800e38a:	fb03 6711 	mls	r7, r3, r1, r6
 800e38e:	5dc7      	ldrb	r7, [r0, r7]
 800e390:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e394:	4637      	mov	r7, r6
 800e396:	42bb      	cmp	r3, r7
 800e398:	460e      	mov	r6, r1
 800e39a:	d9f4      	bls.n	800e386 <_printf_i+0x11a>
 800e39c:	2b08      	cmp	r3, #8
 800e39e:	d10b      	bne.n	800e3b8 <_printf_i+0x14c>
 800e3a0:	6823      	ldr	r3, [r4, #0]
 800e3a2:	07de      	lsls	r6, r3, #31
 800e3a4:	d508      	bpl.n	800e3b8 <_printf_i+0x14c>
 800e3a6:	6923      	ldr	r3, [r4, #16]
 800e3a8:	6861      	ldr	r1, [r4, #4]
 800e3aa:	4299      	cmp	r1, r3
 800e3ac:	bfde      	ittt	le
 800e3ae:	2330      	movle	r3, #48	; 0x30
 800e3b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e3b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e3b8:	1b52      	subs	r2, r2, r5
 800e3ba:	6122      	str	r2, [r4, #16]
 800e3bc:	f8cd a000 	str.w	sl, [sp]
 800e3c0:	464b      	mov	r3, r9
 800e3c2:	aa03      	add	r2, sp, #12
 800e3c4:	4621      	mov	r1, r4
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	f7ff fee2 	bl	800e190 <_printf_common>
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	d14c      	bne.n	800e46a <_printf_i+0x1fe>
 800e3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d4:	b004      	add	sp, #16
 800e3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3da:	4835      	ldr	r0, [pc, #212]	; (800e4b0 <_printf_i+0x244>)
 800e3dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e3e0:	6829      	ldr	r1, [r5, #0]
 800e3e2:	6823      	ldr	r3, [r4, #0]
 800e3e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3e8:	6029      	str	r1, [r5, #0]
 800e3ea:	061d      	lsls	r5, r3, #24
 800e3ec:	d514      	bpl.n	800e418 <_printf_i+0x1ac>
 800e3ee:	07df      	lsls	r7, r3, #31
 800e3f0:	bf44      	itt	mi
 800e3f2:	f043 0320 	orrmi.w	r3, r3, #32
 800e3f6:	6023      	strmi	r3, [r4, #0]
 800e3f8:	b91e      	cbnz	r6, 800e402 <_printf_i+0x196>
 800e3fa:	6823      	ldr	r3, [r4, #0]
 800e3fc:	f023 0320 	bic.w	r3, r3, #32
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	2310      	movs	r3, #16
 800e404:	e7b0      	b.n	800e368 <_printf_i+0xfc>
 800e406:	6823      	ldr	r3, [r4, #0]
 800e408:	f043 0320 	orr.w	r3, r3, #32
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	2378      	movs	r3, #120	; 0x78
 800e410:	4828      	ldr	r0, [pc, #160]	; (800e4b4 <_printf_i+0x248>)
 800e412:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e416:	e7e3      	b.n	800e3e0 <_printf_i+0x174>
 800e418:	0659      	lsls	r1, r3, #25
 800e41a:	bf48      	it	mi
 800e41c:	b2b6      	uxthmi	r6, r6
 800e41e:	e7e6      	b.n	800e3ee <_printf_i+0x182>
 800e420:	4615      	mov	r5, r2
 800e422:	e7bb      	b.n	800e39c <_printf_i+0x130>
 800e424:	682b      	ldr	r3, [r5, #0]
 800e426:	6826      	ldr	r6, [r4, #0]
 800e428:	6961      	ldr	r1, [r4, #20]
 800e42a:	1d18      	adds	r0, r3, #4
 800e42c:	6028      	str	r0, [r5, #0]
 800e42e:	0635      	lsls	r5, r6, #24
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	d501      	bpl.n	800e438 <_printf_i+0x1cc>
 800e434:	6019      	str	r1, [r3, #0]
 800e436:	e002      	b.n	800e43e <_printf_i+0x1d2>
 800e438:	0670      	lsls	r0, r6, #25
 800e43a:	d5fb      	bpl.n	800e434 <_printf_i+0x1c8>
 800e43c:	8019      	strh	r1, [r3, #0]
 800e43e:	2300      	movs	r3, #0
 800e440:	6123      	str	r3, [r4, #16]
 800e442:	4615      	mov	r5, r2
 800e444:	e7ba      	b.n	800e3bc <_printf_i+0x150>
 800e446:	682b      	ldr	r3, [r5, #0]
 800e448:	1d1a      	adds	r2, r3, #4
 800e44a:	602a      	str	r2, [r5, #0]
 800e44c:	681d      	ldr	r5, [r3, #0]
 800e44e:	6862      	ldr	r2, [r4, #4]
 800e450:	2100      	movs	r1, #0
 800e452:	4628      	mov	r0, r5
 800e454:	f7f1 fed4 	bl	8000200 <memchr>
 800e458:	b108      	cbz	r0, 800e45e <_printf_i+0x1f2>
 800e45a:	1b40      	subs	r0, r0, r5
 800e45c:	6060      	str	r0, [r4, #4]
 800e45e:	6863      	ldr	r3, [r4, #4]
 800e460:	6123      	str	r3, [r4, #16]
 800e462:	2300      	movs	r3, #0
 800e464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e468:	e7a8      	b.n	800e3bc <_printf_i+0x150>
 800e46a:	6923      	ldr	r3, [r4, #16]
 800e46c:	462a      	mov	r2, r5
 800e46e:	4649      	mov	r1, r9
 800e470:	4640      	mov	r0, r8
 800e472:	47d0      	blx	sl
 800e474:	3001      	adds	r0, #1
 800e476:	d0ab      	beq.n	800e3d0 <_printf_i+0x164>
 800e478:	6823      	ldr	r3, [r4, #0]
 800e47a:	079b      	lsls	r3, r3, #30
 800e47c:	d413      	bmi.n	800e4a6 <_printf_i+0x23a>
 800e47e:	68e0      	ldr	r0, [r4, #12]
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	4298      	cmp	r0, r3
 800e484:	bfb8      	it	lt
 800e486:	4618      	movlt	r0, r3
 800e488:	e7a4      	b.n	800e3d4 <_printf_i+0x168>
 800e48a:	2301      	movs	r3, #1
 800e48c:	4632      	mov	r2, r6
 800e48e:	4649      	mov	r1, r9
 800e490:	4640      	mov	r0, r8
 800e492:	47d0      	blx	sl
 800e494:	3001      	adds	r0, #1
 800e496:	d09b      	beq.n	800e3d0 <_printf_i+0x164>
 800e498:	3501      	adds	r5, #1
 800e49a:	68e3      	ldr	r3, [r4, #12]
 800e49c:	9903      	ldr	r1, [sp, #12]
 800e49e:	1a5b      	subs	r3, r3, r1
 800e4a0:	42ab      	cmp	r3, r5
 800e4a2:	dcf2      	bgt.n	800e48a <_printf_i+0x21e>
 800e4a4:	e7eb      	b.n	800e47e <_printf_i+0x212>
 800e4a6:	2500      	movs	r5, #0
 800e4a8:	f104 0619 	add.w	r6, r4, #25
 800e4ac:	e7f5      	b.n	800e49a <_printf_i+0x22e>
 800e4ae:	bf00      	nop
 800e4b0:	0801692a 	.word	0x0801692a
 800e4b4:	0801693b 	.word	0x0801693b

0800e4b8 <_scanf_float>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	b087      	sub	sp, #28
 800e4be:	4617      	mov	r7, r2
 800e4c0:	9303      	str	r3, [sp, #12]
 800e4c2:	688b      	ldr	r3, [r1, #8]
 800e4c4:	1e5a      	subs	r2, r3, #1
 800e4c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e4ca:	bf83      	ittte	hi
 800e4cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e4d0:	195b      	addhi	r3, r3, r5
 800e4d2:	9302      	strhi	r3, [sp, #8]
 800e4d4:	2300      	movls	r3, #0
 800e4d6:	bf86      	itte	hi
 800e4d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e4dc:	608b      	strhi	r3, [r1, #8]
 800e4de:	9302      	strls	r3, [sp, #8]
 800e4e0:	680b      	ldr	r3, [r1, #0]
 800e4e2:	468b      	mov	fp, r1
 800e4e4:	2500      	movs	r5, #0
 800e4e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e4ea:	f84b 3b1c 	str.w	r3, [fp], #28
 800e4ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e4f2:	4680      	mov	r8, r0
 800e4f4:	460c      	mov	r4, r1
 800e4f6:	465e      	mov	r6, fp
 800e4f8:	46aa      	mov	sl, r5
 800e4fa:	46a9      	mov	r9, r5
 800e4fc:	9501      	str	r5, [sp, #4]
 800e4fe:	68a2      	ldr	r2, [r4, #8]
 800e500:	b152      	cbz	r2, 800e518 <_scanf_float+0x60>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b4e      	cmp	r3, #78	; 0x4e
 800e508:	d864      	bhi.n	800e5d4 <_scanf_float+0x11c>
 800e50a:	2b40      	cmp	r3, #64	; 0x40
 800e50c:	d83c      	bhi.n	800e588 <_scanf_float+0xd0>
 800e50e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e512:	b2c8      	uxtb	r0, r1
 800e514:	280e      	cmp	r0, #14
 800e516:	d93a      	bls.n	800e58e <_scanf_float+0xd6>
 800e518:	f1b9 0f00 	cmp.w	r9, #0
 800e51c:	d003      	beq.n	800e526 <_scanf_float+0x6e>
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e52a:	f1ba 0f01 	cmp.w	sl, #1
 800e52e:	f200 8113 	bhi.w	800e758 <_scanf_float+0x2a0>
 800e532:	455e      	cmp	r6, fp
 800e534:	f200 8105 	bhi.w	800e742 <_scanf_float+0x28a>
 800e538:	2501      	movs	r5, #1
 800e53a:	4628      	mov	r0, r5
 800e53c:	b007      	add	sp, #28
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e546:	2a0d      	cmp	r2, #13
 800e548:	d8e6      	bhi.n	800e518 <_scanf_float+0x60>
 800e54a:	a101      	add	r1, pc, #4	; (adr r1, 800e550 <_scanf_float+0x98>)
 800e54c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e550:	0800e68f 	.word	0x0800e68f
 800e554:	0800e519 	.word	0x0800e519
 800e558:	0800e519 	.word	0x0800e519
 800e55c:	0800e519 	.word	0x0800e519
 800e560:	0800e6ef 	.word	0x0800e6ef
 800e564:	0800e6c7 	.word	0x0800e6c7
 800e568:	0800e519 	.word	0x0800e519
 800e56c:	0800e519 	.word	0x0800e519
 800e570:	0800e69d 	.word	0x0800e69d
 800e574:	0800e519 	.word	0x0800e519
 800e578:	0800e519 	.word	0x0800e519
 800e57c:	0800e519 	.word	0x0800e519
 800e580:	0800e519 	.word	0x0800e519
 800e584:	0800e655 	.word	0x0800e655
 800e588:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e58c:	e7db      	b.n	800e546 <_scanf_float+0x8e>
 800e58e:	290e      	cmp	r1, #14
 800e590:	d8c2      	bhi.n	800e518 <_scanf_float+0x60>
 800e592:	a001      	add	r0, pc, #4	; (adr r0, 800e598 <_scanf_float+0xe0>)
 800e594:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e598:	0800e647 	.word	0x0800e647
 800e59c:	0800e519 	.word	0x0800e519
 800e5a0:	0800e647 	.word	0x0800e647
 800e5a4:	0800e6db 	.word	0x0800e6db
 800e5a8:	0800e519 	.word	0x0800e519
 800e5ac:	0800e5f5 	.word	0x0800e5f5
 800e5b0:	0800e631 	.word	0x0800e631
 800e5b4:	0800e631 	.word	0x0800e631
 800e5b8:	0800e631 	.word	0x0800e631
 800e5bc:	0800e631 	.word	0x0800e631
 800e5c0:	0800e631 	.word	0x0800e631
 800e5c4:	0800e631 	.word	0x0800e631
 800e5c8:	0800e631 	.word	0x0800e631
 800e5cc:	0800e631 	.word	0x0800e631
 800e5d0:	0800e631 	.word	0x0800e631
 800e5d4:	2b6e      	cmp	r3, #110	; 0x6e
 800e5d6:	d809      	bhi.n	800e5ec <_scanf_float+0x134>
 800e5d8:	2b60      	cmp	r3, #96	; 0x60
 800e5da:	d8b2      	bhi.n	800e542 <_scanf_float+0x8a>
 800e5dc:	2b54      	cmp	r3, #84	; 0x54
 800e5de:	d077      	beq.n	800e6d0 <_scanf_float+0x218>
 800e5e0:	2b59      	cmp	r3, #89	; 0x59
 800e5e2:	d199      	bne.n	800e518 <_scanf_float+0x60>
 800e5e4:	2d07      	cmp	r5, #7
 800e5e6:	d197      	bne.n	800e518 <_scanf_float+0x60>
 800e5e8:	2508      	movs	r5, #8
 800e5ea:	e029      	b.n	800e640 <_scanf_float+0x188>
 800e5ec:	2b74      	cmp	r3, #116	; 0x74
 800e5ee:	d06f      	beq.n	800e6d0 <_scanf_float+0x218>
 800e5f0:	2b79      	cmp	r3, #121	; 0x79
 800e5f2:	e7f6      	b.n	800e5e2 <_scanf_float+0x12a>
 800e5f4:	6821      	ldr	r1, [r4, #0]
 800e5f6:	05c8      	lsls	r0, r1, #23
 800e5f8:	d51a      	bpl.n	800e630 <_scanf_float+0x178>
 800e5fa:	9b02      	ldr	r3, [sp, #8]
 800e5fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e600:	6021      	str	r1, [r4, #0]
 800e602:	f109 0901 	add.w	r9, r9, #1
 800e606:	b11b      	cbz	r3, 800e610 <_scanf_float+0x158>
 800e608:	3b01      	subs	r3, #1
 800e60a:	3201      	adds	r2, #1
 800e60c:	9302      	str	r3, [sp, #8]
 800e60e:	60a2      	str	r2, [r4, #8]
 800e610:	68a3      	ldr	r3, [r4, #8]
 800e612:	3b01      	subs	r3, #1
 800e614:	60a3      	str	r3, [r4, #8]
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	3301      	adds	r3, #1
 800e61a:	6123      	str	r3, [r4, #16]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3b01      	subs	r3, #1
 800e620:	2b00      	cmp	r3, #0
 800e622:	607b      	str	r3, [r7, #4]
 800e624:	f340 8084 	ble.w	800e730 <_scanf_float+0x278>
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	3301      	adds	r3, #1
 800e62c:	603b      	str	r3, [r7, #0]
 800e62e:	e766      	b.n	800e4fe <_scanf_float+0x46>
 800e630:	eb1a 0f05 	cmn.w	sl, r5
 800e634:	f47f af70 	bne.w	800e518 <_scanf_float+0x60>
 800e638:	6822      	ldr	r2, [r4, #0]
 800e63a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e63e:	6022      	str	r2, [r4, #0]
 800e640:	f806 3b01 	strb.w	r3, [r6], #1
 800e644:	e7e4      	b.n	800e610 <_scanf_float+0x158>
 800e646:	6822      	ldr	r2, [r4, #0]
 800e648:	0610      	lsls	r0, r2, #24
 800e64a:	f57f af65 	bpl.w	800e518 <_scanf_float+0x60>
 800e64e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e652:	e7f4      	b.n	800e63e <_scanf_float+0x186>
 800e654:	f1ba 0f00 	cmp.w	sl, #0
 800e658:	d10e      	bne.n	800e678 <_scanf_float+0x1c0>
 800e65a:	f1b9 0f00 	cmp.w	r9, #0
 800e65e:	d10e      	bne.n	800e67e <_scanf_float+0x1c6>
 800e660:	6822      	ldr	r2, [r4, #0]
 800e662:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e666:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e66a:	d108      	bne.n	800e67e <_scanf_float+0x1c6>
 800e66c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e670:	6022      	str	r2, [r4, #0]
 800e672:	f04f 0a01 	mov.w	sl, #1
 800e676:	e7e3      	b.n	800e640 <_scanf_float+0x188>
 800e678:	f1ba 0f02 	cmp.w	sl, #2
 800e67c:	d055      	beq.n	800e72a <_scanf_float+0x272>
 800e67e:	2d01      	cmp	r5, #1
 800e680:	d002      	beq.n	800e688 <_scanf_float+0x1d0>
 800e682:	2d04      	cmp	r5, #4
 800e684:	f47f af48 	bne.w	800e518 <_scanf_float+0x60>
 800e688:	3501      	adds	r5, #1
 800e68a:	b2ed      	uxtb	r5, r5
 800e68c:	e7d8      	b.n	800e640 <_scanf_float+0x188>
 800e68e:	f1ba 0f01 	cmp.w	sl, #1
 800e692:	f47f af41 	bne.w	800e518 <_scanf_float+0x60>
 800e696:	f04f 0a02 	mov.w	sl, #2
 800e69a:	e7d1      	b.n	800e640 <_scanf_float+0x188>
 800e69c:	b97d      	cbnz	r5, 800e6be <_scanf_float+0x206>
 800e69e:	f1b9 0f00 	cmp.w	r9, #0
 800e6a2:	f47f af3c 	bne.w	800e51e <_scanf_float+0x66>
 800e6a6:	6822      	ldr	r2, [r4, #0]
 800e6a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e6ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e6b0:	f47f af39 	bne.w	800e526 <_scanf_float+0x6e>
 800e6b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e6b8:	6022      	str	r2, [r4, #0]
 800e6ba:	2501      	movs	r5, #1
 800e6bc:	e7c0      	b.n	800e640 <_scanf_float+0x188>
 800e6be:	2d03      	cmp	r5, #3
 800e6c0:	d0e2      	beq.n	800e688 <_scanf_float+0x1d0>
 800e6c2:	2d05      	cmp	r5, #5
 800e6c4:	e7de      	b.n	800e684 <_scanf_float+0x1cc>
 800e6c6:	2d02      	cmp	r5, #2
 800e6c8:	f47f af26 	bne.w	800e518 <_scanf_float+0x60>
 800e6cc:	2503      	movs	r5, #3
 800e6ce:	e7b7      	b.n	800e640 <_scanf_float+0x188>
 800e6d0:	2d06      	cmp	r5, #6
 800e6d2:	f47f af21 	bne.w	800e518 <_scanf_float+0x60>
 800e6d6:	2507      	movs	r5, #7
 800e6d8:	e7b2      	b.n	800e640 <_scanf_float+0x188>
 800e6da:	6822      	ldr	r2, [r4, #0]
 800e6dc:	0591      	lsls	r1, r2, #22
 800e6de:	f57f af1b 	bpl.w	800e518 <_scanf_float+0x60>
 800e6e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e6e6:	6022      	str	r2, [r4, #0]
 800e6e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800e6ec:	e7a8      	b.n	800e640 <_scanf_float+0x188>
 800e6ee:	6822      	ldr	r2, [r4, #0]
 800e6f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e6f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e6f8:	d006      	beq.n	800e708 <_scanf_float+0x250>
 800e6fa:	0550      	lsls	r0, r2, #21
 800e6fc:	f57f af0c 	bpl.w	800e518 <_scanf_float+0x60>
 800e700:	f1b9 0f00 	cmp.w	r9, #0
 800e704:	f43f af0f 	beq.w	800e526 <_scanf_float+0x6e>
 800e708:	0591      	lsls	r1, r2, #22
 800e70a:	bf58      	it	pl
 800e70c:	9901      	ldrpl	r1, [sp, #4]
 800e70e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e712:	bf58      	it	pl
 800e714:	eba9 0101 	subpl.w	r1, r9, r1
 800e718:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e71c:	bf58      	it	pl
 800e71e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e722:	6022      	str	r2, [r4, #0]
 800e724:	f04f 0900 	mov.w	r9, #0
 800e728:	e78a      	b.n	800e640 <_scanf_float+0x188>
 800e72a:	f04f 0a03 	mov.w	sl, #3
 800e72e:	e787      	b.n	800e640 <_scanf_float+0x188>
 800e730:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e734:	4639      	mov	r1, r7
 800e736:	4640      	mov	r0, r8
 800e738:	4798      	blx	r3
 800e73a:	2800      	cmp	r0, #0
 800e73c:	f43f aedf 	beq.w	800e4fe <_scanf_float+0x46>
 800e740:	e6ea      	b.n	800e518 <_scanf_float+0x60>
 800e742:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e746:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e74a:	463a      	mov	r2, r7
 800e74c:	4640      	mov	r0, r8
 800e74e:	4798      	blx	r3
 800e750:	6923      	ldr	r3, [r4, #16]
 800e752:	3b01      	subs	r3, #1
 800e754:	6123      	str	r3, [r4, #16]
 800e756:	e6ec      	b.n	800e532 <_scanf_float+0x7a>
 800e758:	1e6b      	subs	r3, r5, #1
 800e75a:	2b06      	cmp	r3, #6
 800e75c:	d825      	bhi.n	800e7aa <_scanf_float+0x2f2>
 800e75e:	2d02      	cmp	r5, #2
 800e760:	d836      	bhi.n	800e7d0 <_scanf_float+0x318>
 800e762:	455e      	cmp	r6, fp
 800e764:	f67f aee8 	bls.w	800e538 <_scanf_float+0x80>
 800e768:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e76c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e770:	463a      	mov	r2, r7
 800e772:	4640      	mov	r0, r8
 800e774:	4798      	blx	r3
 800e776:	6923      	ldr	r3, [r4, #16]
 800e778:	3b01      	subs	r3, #1
 800e77a:	6123      	str	r3, [r4, #16]
 800e77c:	e7f1      	b.n	800e762 <_scanf_float+0x2aa>
 800e77e:	9802      	ldr	r0, [sp, #8]
 800e780:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e784:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e788:	9002      	str	r0, [sp, #8]
 800e78a:	463a      	mov	r2, r7
 800e78c:	4640      	mov	r0, r8
 800e78e:	4798      	blx	r3
 800e790:	6923      	ldr	r3, [r4, #16]
 800e792:	3b01      	subs	r3, #1
 800e794:	6123      	str	r3, [r4, #16]
 800e796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e79a:	fa5f fa8a 	uxtb.w	sl, sl
 800e79e:	f1ba 0f02 	cmp.w	sl, #2
 800e7a2:	d1ec      	bne.n	800e77e <_scanf_float+0x2c6>
 800e7a4:	3d03      	subs	r5, #3
 800e7a6:	b2ed      	uxtb	r5, r5
 800e7a8:	1b76      	subs	r6, r6, r5
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	05da      	lsls	r2, r3, #23
 800e7ae:	d52f      	bpl.n	800e810 <_scanf_float+0x358>
 800e7b0:	055b      	lsls	r3, r3, #21
 800e7b2:	d510      	bpl.n	800e7d6 <_scanf_float+0x31e>
 800e7b4:	455e      	cmp	r6, fp
 800e7b6:	f67f aebf 	bls.w	800e538 <_scanf_float+0x80>
 800e7ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e7be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e7c2:	463a      	mov	r2, r7
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	4798      	blx	r3
 800e7c8:	6923      	ldr	r3, [r4, #16]
 800e7ca:	3b01      	subs	r3, #1
 800e7cc:	6123      	str	r3, [r4, #16]
 800e7ce:	e7f1      	b.n	800e7b4 <_scanf_float+0x2fc>
 800e7d0:	46aa      	mov	sl, r5
 800e7d2:	9602      	str	r6, [sp, #8]
 800e7d4:	e7df      	b.n	800e796 <_scanf_float+0x2de>
 800e7d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e7da:	6923      	ldr	r3, [r4, #16]
 800e7dc:	2965      	cmp	r1, #101	; 0x65
 800e7de:	f103 33ff 	add.w	r3, r3, #4294967295
 800e7e2:	f106 35ff 	add.w	r5, r6, #4294967295
 800e7e6:	6123      	str	r3, [r4, #16]
 800e7e8:	d00c      	beq.n	800e804 <_scanf_float+0x34c>
 800e7ea:	2945      	cmp	r1, #69	; 0x45
 800e7ec:	d00a      	beq.n	800e804 <_scanf_float+0x34c>
 800e7ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e7f2:	463a      	mov	r2, r7
 800e7f4:	4640      	mov	r0, r8
 800e7f6:	4798      	blx	r3
 800e7f8:	6923      	ldr	r3, [r4, #16]
 800e7fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	1eb5      	subs	r5, r6, #2
 800e802:	6123      	str	r3, [r4, #16]
 800e804:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e808:	463a      	mov	r2, r7
 800e80a:	4640      	mov	r0, r8
 800e80c:	4798      	blx	r3
 800e80e:	462e      	mov	r6, r5
 800e810:	6825      	ldr	r5, [r4, #0]
 800e812:	f015 0510 	ands.w	r5, r5, #16
 800e816:	d159      	bne.n	800e8cc <_scanf_float+0x414>
 800e818:	7035      	strb	r5, [r6, #0]
 800e81a:	6823      	ldr	r3, [r4, #0]
 800e81c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e824:	d11b      	bne.n	800e85e <_scanf_float+0x3a6>
 800e826:	9b01      	ldr	r3, [sp, #4]
 800e828:	454b      	cmp	r3, r9
 800e82a:	eba3 0209 	sub.w	r2, r3, r9
 800e82e:	d123      	bne.n	800e878 <_scanf_float+0x3c0>
 800e830:	2200      	movs	r2, #0
 800e832:	4659      	mov	r1, fp
 800e834:	4640      	mov	r0, r8
 800e836:	f000 ffc5 	bl	800f7c4 <_strtod_r>
 800e83a:	6822      	ldr	r2, [r4, #0]
 800e83c:	9b03      	ldr	r3, [sp, #12]
 800e83e:	f012 0f02 	tst.w	r2, #2
 800e842:	ec57 6b10 	vmov	r6, r7, d0
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	d021      	beq.n	800e88e <_scanf_float+0x3d6>
 800e84a:	9903      	ldr	r1, [sp, #12]
 800e84c:	1d1a      	adds	r2, r3, #4
 800e84e:	600a      	str	r2, [r1, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	e9c3 6700 	strd	r6, r7, [r3]
 800e856:	68e3      	ldr	r3, [r4, #12]
 800e858:	3301      	adds	r3, #1
 800e85a:	60e3      	str	r3, [r4, #12]
 800e85c:	e66d      	b.n	800e53a <_scanf_float+0x82>
 800e85e:	9b04      	ldr	r3, [sp, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d0e5      	beq.n	800e830 <_scanf_float+0x378>
 800e864:	9905      	ldr	r1, [sp, #20]
 800e866:	230a      	movs	r3, #10
 800e868:	462a      	mov	r2, r5
 800e86a:	3101      	adds	r1, #1
 800e86c:	4640      	mov	r0, r8
 800e86e:	f001 f831 	bl	800f8d4 <_strtol_r>
 800e872:	9b04      	ldr	r3, [sp, #16]
 800e874:	9e05      	ldr	r6, [sp, #20]
 800e876:	1ac2      	subs	r2, r0, r3
 800e878:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e87c:	429e      	cmp	r6, r3
 800e87e:	bf28      	it	cs
 800e880:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e884:	4912      	ldr	r1, [pc, #72]	; (800e8d0 <_scanf_float+0x418>)
 800e886:	4630      	mov	r0, r6
 800e888:	f000 f914 	bl	800eab4 <siprintf>
 800e88c:	e7d0      	b.n	800e830 <_scanf_float+0x378>
 800e88e:	9903      	ldr	r1, [sp, #12]
 800e890:	f012 0f04 	tst.w	r2, #4
 800e894:	f103 0204 	add.w	r2, r3, #4
 800e898:	600a      	str	r2, [r1, #0]
 800e89a:	d1d9      	bne.n	800e850 <_scanf_float+0x398>
 800e89c:	f8d3 8000 	ldr.w	r8, [r3]
 800e8a0:	ee10 2a10 	vmov	r2, s0
 800e8a4:	ee10 0a10 	vmov	r0, s0
 800e8a8:	463b      	mov	r3, r7
 800e8aa:	4639      	mov	r1, r7
 800e8ac:	f7f2 f94e 	bl	8000b4c <__aeabi_dcmpun>
 800e8b0:	b128      	cbz	r0, 800e8be <_scanf_float+0x406>
 800e8b2:	4808      	ldr	r0, [pc, #32]	; (800e8d4 <_scanf_float+0x41c>)
 800e8b4:	f000 f8c4 	bl	800ea40 <nanf>
 800e8b8:	ed88 0a00 	vstr	s0, [r8]
 800e8bc:	e7cb      	b.n	800e856 <_scanf_float+0x39e>
 800e8be:	4630      	mov	r0, r6
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	f7f2 f9a1 	bl	8000c08 <__aeabi_d2f>
 800e8c6:	f8c8 0000 	str.w	r0, [r8]
 800e8ca:	e7c4      	b.n	800e856 <_scanf_float+0x39e>
 800e8cc:	2500      	movs	r5, #0
 800e8ce:	e634      	b.n	800e53a <_scanf_float+0x82>
 800e8d0:	0801694c 	.word	0x0801694c
 800e8d4:	08016eab 	.word	0x08016eab

0800e8d8 <iprintf>:
 800e8d8:	b40f      	push	{r0, r1, r2, r3}
 800e8da:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <iprintf+0x2c>)
 800e8dc:	b513      	push	{r0, r1, r4, lr}
 800e8de:	681c      	ldr	r4, [r3, #0]
 800e8e0:	b124      	cbz	r4, 800e8ec <iprintf+0x14>
 800e8e2:	69a3      	ldr	r3, [r4, #24]
 800e8e4:	b913      	cbnz	r3, 800e8ec <iprintf+0x14>
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f7fe ff5c 	bl	800d7a4 <__sinit>
 800e8ec:	ab05      	add	r3, sp, #20
 800e8ee:	9a04      	ldr	r2, [sp, #16]
 800e8f0:	68a1      	ldr	r1, [r4, #8]
 800e8f2:	9301      	str	r3, [sp, #4]
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f003 f9b3 	bl	8011c60 <_vfiprintf_r>
 800e8fa:	b002      	add	sp, #8
 800e8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e900:	b004      	add	sp, #16
 800e902:	4770      	bx	lr
 800e904:	20000150 	.word	0x20000150

0800e908 <putchar>:
 800e908:	4b09      	ldr	r3, [pc, #36]	; (800e930 <putchar+0x28>)
 800e90a:	b513      	push	{r0, r1, r4, lr}
 800e90c:	681c      	ldr	r4, [r3, #0]
 800e90e:	4601      	mov	r1, r0
 800e910:	b134      	cbz	r4, 800e920 <putchar+0x18>
 800e912:	69a3      	ldr	r3, [r4, #24]
 800e914:	b923      	cbnz	r3, 800e920 <putchar+0x18>
 800e916:	9001      	str	r0, [sp, #4]
 800e918:	4620      	mov	r0, r4
 800e91a:	f7fe ff43 	bl	800d7a4 <__sinit>
 800e91e:	9901      	ldr	r1, [sp, #4]
 800e920:	68a2      	ldr	r2, [r4, #8]
 800e922:	4620      	mov	r0, r4
 800e924:	b002      	add	sp, #8
 800e926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e92a:	f003 bac9 	b.w	8011ec0 <_putc_r>
 800e92e:	bf00      	nop
 800e930:	20000150 	.word	0x20000150

0800e934 <_puts_r>:
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	460e      	mov	r6, r1
 800e938:	4605      	mov	r5, r0
 800e93a:	b118      	cbz	r0, 800e944 <_puts_r+0x10>
 800e93c:	6983      	ldr	r3, [r0, #24]
 800e93e:	b90b      	cbnz	r3, 800e944 <_puts_r+0x10>
 800e940:	f7fe ff30 	bl	800d7a4 <__sinit>
 800e944:	69ab      	ldr	r3, [r5, #24]
 800e946:	68ac      	ldr	r4, [r5, #8]
 800e948:	b913      	cbnz	r3, 800e950 <_puts_r+0x1c>
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7fe ff2a 	bl	800d7a4 <__sinit>
 800e950:	4b2c      	ldr	r3, [pc, #176]	; (800ea04 <_puts_r+0xd0>)
 800e952:	429c      	cmp	r4, r3
 800e954:	d120      	bne.n	800e998 <_puts_r+0x64>
 800e956:	686c      	ldr	r4, [r5, #4]
 800e958:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e95a:	07db      	lsls	r3, r3, #31
 800e95c:	d405      	bmi.n	800e96a <_puts_r+0x36>
 800e95e:	89a3      	ldrh	r3, [r4, #12]
 800e960:	0598      	lsls	r0, r3, #22
 800e962:	d402      	bmi.n	800e96a <_puts_r+0x36>
 800e964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e966:	f7fe ffe0 	bl	800d92a <__retarget_lock_acquire_recursive>
 800e96a:	89a3      	ldrh	r3, [r4, #12]
 800e96c:	0719      	lsls	r1, r3, #28
 800e96e:	d51d      	bpl.n	800e9ac <_puts_r+0x78>
 800e970:	6923      	ldr	r3, [r4, #16]
 800e972:	b1db      	cbz	r3, 800e9ac <_puts_r+0x78>
 800e974:	3e01      	subs	r6, #1
 800e976:	68a3      	ldr	r3, [r4, #8]
 800e978:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e97c:	3b01      	subs	r3, #1
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	bb39      	cbnz	r1, 800e9d2 <_puts_r+0x9e>
 800e982:	2b00      	cmp	r3, #0
 800e984:	da38      	bge.n	800e9f8 <_puts_r+0xc4>
 800e986:	4622      	mov	r2, r4
 800e988:	210a      	movs	r1, #10
 800e98a:	4628      	mov	r0, r5
 800e98c:	f000 ffe2 	bl	800f954 <__swbuf_r>
 800e990:	3001      	adds	r0, #1
 800e992:	d011      	beq.n	800e9b8 <_puts_r+0x84>
 800e994:	250a      	movs	r5, #10
 800e996:	e011      	b.n	800e9bc <_puts_r+0x88>
 800e998:	4b1b      	ldr	r3, [pc, #108]	; (800ea08 <_puts_r+0xd4>)
 800e99a:	429c      	cmp	r4, r3
 800e99c:	d101      	bne.n	800e9a2 <_puts_r+0x6e>
 800e99e:	68ac      	ldr	r4, [r5, #8]
 800e9a0:	e7da      	b.n	800e958 <_puts_r+0x24>
 800e9a2:	4b1a      	ldr	r3, [pc, #104]	; (800ea0c <_puts_r+0xd8>)
 800e9a4:	429c      	cmp	r4, r3
 800e9a6:	bf08      	it	eq
 800e9a8:	68ec      	ldreq	r4, [r5, #12]
 800e9aa:	e7d5      	b.n	800e958 <_puts_r+0x24>
 800e9ac:	4621      	mov	r1, r4
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f001 f834 	bl	800fa1c <__swsetup_r>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	d0dd      	beq.n	800e974 <_puts_r+0x40>
 800e9b8:	f04f 35ff 	mov.w	r5, #4294967295
 800e9bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9be:	07da      	lsls	r2, r3, #31
 800e9c0:	d405      	bmi.n	800e9ce <_puts_r+0x9a>
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	059b      	lsls	r3, r3, #22
 800e9c6:	d402      	bmi.n	800e9ce <_puts_r+0x9a>
 800e9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9ca:	f7fe ffaf 	bl	800d92c <__retarget_lock_release_recursive>
 800e9ce:	4628      	mov	r0, r5
 800e9d0:	bd70      	pop	{r4, r5, r6, pc}
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	da04      	bge.n	800e9e0 <_puts_r+0xac>
 800e9d6:	69a2      	ldr	r2, [r4, #24]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	dc06      	bgt.n	800e9ea <_puts_r+0xb6>
 800e9dc:	290a      	cmp	r1, #10
 800e9de:	d004      	beq.n	800e9ea <_puts_r+0xb6>
 800e9e0:	6823      	ldr	r3, [r4, #0]
 800e9e2:	1c5a      	adds	r2, r3, #1
 800e9e4:	6022      	str	r2, [r4, #0]
 800e9e6:	7019      	strb	r1, [r3, #0]
 800e9e8:	e7c5      	b.n	800e976 <_puts_r+0x42>
 800e9ea:	4622      	mov	r2, r4
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f000 ffb1 	bl	800f954 <__swbuf_r>
 800e9f2:	3001      	adds	r0, #1
 800e9f4:	d1bf      	bne.n	800e976 <_puts_r+0x42>
 800e9f6:	e7df      	b.n	800e9b8 <_puts_r+0x84>
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	250a      	movs	r5, #10
 800e9fc:	1c5a      	adds	r2, r3, #1
 800e9fe:	6022      	str	r2, [r4, #0]
 800ea00:	701d      	strb	r5, [r3, #0]
 800ea02:	e7db      	b.n	800e9bc <_puts_r+0x88>
 800ea04:	080168d4 	.word	0x080168d4
 800ea08:	080168f4 	.word	0x080168f4
 800ea0c:	080168b4 	.word	0x080168b4

0800ea10 <puts>:
 800ea10:	4b02      	ldr	r3, [pc, #8]	; (800ea1c <puts+0xc>)
 800ea12:	4601      	mov	r1, r0
 800ea14:	6818      	ldr	r0, [r3, #0]
 800ea16:	f7ff bf8d 	b.w	800e934 <_puts_r>
 800ea1a:	bf00      	nop
 800ea1c:	20000150 	.word	0x20000150

0800ea20 <_sbrk_r>:
 800ea20:	b538      	push	{r3, r4, r5, lr}
 800ea22:	4d06      	ldr	r5, [pc, #24]	; (800ea3c <_sbrk_r+0x1c>)
 800ea24:	2300      	movs	r3, #0
 800ea26:	4604      	mov	r4, r0
 800ea28:	4608      	mov	r0, r1
 800ea2a:	602b      	str	r3, [r5, #0]
 800ea2c:	f7f5 f9a8 	bl	8003d80 <_sbrk>
 800ea30:	1c43      	adds	r3, r0, #1
 800ea32:	d102      	bne.n	800ea3a <_sbrk_r+0x1a>
 800ea34:	682b      	ldr	r3, [r5, #0]
 800ea36:	b103      	cbz	r3, 800ea3a <_sbrk_r+0x1a>
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	2000a8ac 	.word	0x2000a8ac

0800ea40 <nanf>:
 800ea40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ea48 <nanf+0x8>
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	7fc00000 	.word	0x7fc00000

0800ea4c <sniprintf>:
 800ea4c:	b40c      	push	{r2, r3}
 800ea4e:	b530      	push	{r4, r5, lr}
 800ea50:	4b17      	ldr	r3, [pc, #92]	; (800eab0 <sniprintf+0x64>)
 800ea52:	1e0c      	subs	r4, r1, #0
 800ea54:	681d      	ldr	r5, [r3, #0]
 800ea56:	b09d      	sub	sp, #116	; 0x74
 800ea58:	da08      	bge.n	800ea6c <sniprintf+0x20>
 800ea5a:	238b      	movs	r3, #139	; 0x8b
 800ea5c:	602b      	str	r3, [r5, #0]
 800ea5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea62:	b01d      	add	sp, #116	; 0x74
 800ea64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea68:	b002      	add	sp, #8
 800ea6a:	4770      	bx	lr
 800ea6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ea70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea74:	bf14      	ite	ne
 800ea76:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea7a:	4623      	moveq	r3, r4
 800ea7c:	9304      	str	r3, [sp, #16]
 800ea7e:	9307      	str	r3, [sp, #28]
 800ea80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea84:	9002      	str	r0, [sp, #8]
 800ea86:	9006      	str	r0, [sp, #24]
 800ea88:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ea8e:	ab21      	add	r3, sp, #132	; 0x84
 800ea90:	a902      	add	r1, sp, #8
 800ea92:	4628      	mov	r0, r5
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	f002 ffb9 	bl	8011a0c <_svfiprintf_r>
 800ea9a:	1c43      	adds	r3, r0, #1
 800ea9c:	bfbc      	itt	lt
 800ea9e:	238b      	movlt	r3, #139	; 0x8b
 800eaa0:	602b      	strlt	r3, [r5, #0]
 800eaa2:	2c00      	cmp	r4, #0
 800eaa4:	d0dd      	beq.n	800ea62 <sniprintf+0x16>
 800eaa6:	9b02      	ldr	r3, [sp, #8]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	701a      	strb	r2, [r3, #0]
 800eaac:	e7d9      	b.n	800ea62 <sniprintf+0x16>
 800eaae:	bf00      	nop
 800eab0:	20000150 	.word	0x20000150

0800eab4 <siprintf>:
 800eab4:	b40e      	push	{r1, r2, r3}
 800eab6:	b500      	push	{lr}
 800eab8:	b09c      	sub	sp, #112	; 0x70
 800eaba:	ab1d      	add	r3, sp, #116	; 0x74
 800eabc:	9002      	str	r0, [sp, #8]
 800eabe:	9006      	str	r0, [sp, #24]
 800eac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eac4:	4809      	ldr	r0, [pc, #36]	; (800eaec <siprintf+0x38>)
 800eac6:	9107      	str	r1, [sp, #28]
 800eac8:	9104      	str	r1, [sp, #16]
 800eaca:	4909      	ldr	r1, [pc, #36]	; (800eaf0 <siprintf+0x3c>)
 800eacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead0:	9105      	str	r1, [sp, #20]
 800ead2:	6800      	ldr	r0, [r0, #0]
 800ead4:	9301      	str	r3, [sp, #4]
 800ead6:	a902      	add	r1, sp, #8
 800ead8:	f002 ff98 	bl	8011a0c <_svfiprintf_r>
 800eadc:	9b02      	ldr	r3, [sp, #8]
 800eade:	2200      	movs	r2, #0
 800eae0:	701a      	strb	r2, [r3, #0]
 800eae2:	b01c      	add	sp, #112	; 0x70
 800eae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eae8:	b003      	add	sp, #12
 800eaea:	4770      	bx	lr
 800eaec:	20000150 	.word	0x20000150
 800eaf0:	ffff0208 	.word	0xffff0208

0800eaf4 <__sread>:
 800eaf4:	b510      	push	{r4, lr}
 800eaf6:	460c      	mov	r4, r1
 800eaf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eafc:	f003 fa28 	bl	8011f50 <_read_r>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	bfab      	itete	ge
 800eb04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb06:	89a3      	ldrhlt	r3, [r4, #12]
 800eb08:	181b      	addge	r3, r3, r0
 800eb0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb0e:	bfac      	ite	ge
 800eb10:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb12:	81a3      	strhlt	r3, [r4, #12]
 800eb14:	bd10      	pop	{r4, pc}

0800eb16 <__swrite>:
 800eb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1a:	461f      	mov	r7, r3
 800eb1c:	898b      	ldrh	r3, [r1, #12]
 800eb1e:	05db      	lsls	r3, r3, #23
 800eb20:	4605      	mov	r5, r0
 800eb22:	460c      	mov	r4, r1
 800eb24:	4616      	mov	r6, r2
 800eb26:	d505      	bpl.n	800eb34 <__swrite+0x1e>
 800eb28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f002 fa02 	bl	8010f38 <_lseek_r>
 800eb34:	89a3      	ldrh	r3, [r4, #12]
 800eb36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb3e:	81a3      	strh	r3, [r4, #12]
 800eb40:	4632      	mov	r2, r6
 800eb42:	463b      	mov	r3, r7
 800eb44:	4628      	mov	r0, r5
 800eb46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4a:	f000 bf55 	b.w	800f9f8 <_write_r>

0800eb4e <__sseek>:
 800eb4e:	b510      	push	{r4, lr}
 800eb50:	460c      	mov	r4, r1
 800eb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb56:	f002 f9ef 	bl	8010f38 <_lseek_r>
 800eb5a:	1c43      	adds	r3, r0, #1
 800eb5c:	89a3      	ldrh	r3, [r4, #12]
 800eb5e:	bf15      	itete	ne
 800eb60:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb6a:	81a3      	strheq	r3, [r4, #12]
 800eb6c:	bf18      	it	ne
 800eb6e:	81a3      	strhne	r3, [r4, #12]
 800eb70:	bd10      	pop	{r4, pc}

0800eb72 <__sclose>:
 800eb72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb76:	f000 bfbf 	b.w	800faf8 <_close_r>

0800eb7a <sulp>:
 800eb7a:	b570      	push	{r4, r5, r6, lr}
 800eb7c:	4604      	mov	r4, r0
 800eb7e:	460d      	mov	r5, r1
 800eb80:	ec45 4b10 	vmov	d0, r4, r5
 800eb84:	4616      	mov	r6, r2
 800eb86:	f002 fd81 	bl	801168c <__ulp>
 800eb8a:	ec51 0b10 	vmov	r0, r1, d0
 800eb8e:	b17e      	cbz	r6, 800ebb0 <sulp+0x36>
 800eb90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800eb94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	dd09      	ble.n	800ebb0 <sulp+0x36>
 800eb9c:	051b      	lsls	r3, r3, #20
 800eb9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800eba2:	2400      	movs	r4, #0
 800eba4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800eba8:	4622      	mov	r2, r4
 800ebaa:	462b      	mov	r3, r5
 800ebac:	f7f1 fd34 	bl	8000618 <__aeabi_dmul>
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	0000      	movs	r0, r0
 800ebb4:	0000      	movs	r0, r0
	...

0800ebb8 <_strtod_l>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	ed2d 8b02 	vpush	{d8}
 800ebc0:	b09d      	sub	sp, #116	; 0x74
 800ebc2:	461f      	mov	r7, r3
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	9318      	str	r3, [sp, #96]	; 0x60
 800ebc8:	4ba2      	ldr	r3, [pc, #648]	; (800ee54 <_strtod_l+0x29c>)
 800ebca:	9213      	str	r2, [sp, #76]	; 0x4c
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	9305      	str	r3, [sp, #20]
 800ebd0:	4604      	mov	r4, r0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	4688      	mov	r8, r1
 800ebd6:	f7f1 fb05 	bl	80001e4 <strlen>
 800ebda:	f04f 0a00 	mov.w	sl, #0
 800ebde:	4605      	mov	r5, r0
 800ebe0:	f04f 0b00 	mov.w	fp, #0
 800ebe4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ebe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebea:	781a      	ldrb	r2, [r3, #0]
 800ebec:	2a2b      	cmp	r2, #43	; 0x2b
 800ebee:	d04e      	beq.n	800ec8e <_strtod_l+0xd6>
 800ebf0:	d83b      	bhi.n	800ec6a <_strtod_l+0xb2>
 800ebf2:	2a0d      	cmp	r2, #13
 800ebf4:	d834      	bhi.n	800ec60 <_strtod_l+0xa8>
 800ebf6:	2a08      	cmp	r2, #8
 800ebf8:	d834      	bhi.n	800ec64 <_strtod_l+0xac>
 800ebfa:	2a00      	cmp	r2, #0
 800ebfc:	d03e      	beq.n	800ec7c <_strtod_l+0xc4>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	930a      	str	r3, [sp, #40]	; 0x28
 800ec02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ec04:	7833      	ldrb	r3, [r6, #0]
 800ec06:	2b30      	cmp	r3, #48	; 0x30
 800ec08:	f040 80b0 	bne.w	800ed6c <_strtod_l+0x1b4>
 800ec0c:	7873      	ldrb	r3, [r6, #1]
 800ec0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec12:	2b58      	cmp	r3, #88	; 0x58
 800ec14:	d168      	bne.n	800ece8 <_strtod_l+0x130>
 800ec16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec18:	9301      	str	r3, [sp, #4]
 800ec1a:	ab18      	add	r3, sp, #96	; 0x60
 800ec1c:	9702      	str	r7, [sp, #8]
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	4a8d      	ldr	r2, [pc, #564]	; (800ee58 <_strtod_l+0x2a0>)
 800ec22:	ab19      	add	r3, sp, #100	; 0x64
 800ec24:	a917      	add	r1, sp, #92	; 0x5c
 800ec26:	4620      	mov	r0, r4
 800ec28:	f001 fe6a 	bl	8010900 <__gethex>
 800ec2c:	f010 0707 	ands.w	r7, r0, #7
 800ec30:	4605      	mov	r5, r0
 800ec32:	d005      	beq.n	800ec40 <_strtod_l+0x88>
 800ec34:	2f06      	cmp	r7, #6
 800ec36:	d12c      	bne.n	800ec92 <_strtod_l+0xda>
 800ec38:	3601      	adds	r6, #1
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ec3e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f040 8590 	bne.w	800f768 <_strtod_l+0xbb0>
 800ec48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec4a:	b1eb      	cbz	r3, 800ec88 <_strtod_l+0xd0>
 800ec4c:	4652      	mov	r2, sl
 800ec4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec52:	ec43 2b10 	vmov	d0, r2, r3
 800ec56:	b01d      	add	sp, #116	; 0x74
 800ec58:	ecbd 8b02 	vpop	{d8}
 800ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec60:	2a20      	cmp	r2, #32
 800ec62:	d1cc      	bne.n	800ebfe <_strtod_l+0x46>
 800ec64:	3301      	adds	r3, #1
 800ec66:	9317      	str	r3, [sp, #92]	; 0x5c
 800ec68:	e7be      	b.n	800ebe8 <_strtod_l+0x30>
 800ec6a:	2a2d      	cmp	r2, #45	; 0x2d
 800ec6c:	d1c7      	bne.n	800ebfe <_strtod_l+0x46>
 800ec6e:	2201      	movs	r2, #1
 800ec70:	920a      	str	r2, [sp, #40]	; 0x28
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	9217      	str	r2, [sp, #92]	; 0x5c
 800ec76:	785b      	ldrb	r3, [r3, #1]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1c2      	bne.n	800ec02 <_strtod_l+0x4a>
 800ec7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f040 856e 	bne.w	800f764 <_strtod_l+0xbac>
 800ec88:	4652      	mov	r2, sl
 800ec8a:	465b      	mov	r3, fp
 800ec8c:	e7e1      	b.n	800ec52 <_strtod_l+0x9a>
 800ec8e:	2200      	movs	r2, #0
 800ec90:	e7ee      	b.n	800ec70 <_strtod_l+0xb8>
 800ec92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ec94:	b13a      	cbz	r2, 800eca6 <_strtod_l+0xee>
 800ec96:	2135      	movs	r1, #53	; 0x35
 800ec98:	a81a      	add	r0, sp, #104	; 0x68
 800ec9a:	f002 fe02 	bl	80118a2 <__copybits>
 800ec9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eca0:	4620      	mov	r0, r4
 800eca2:	f002 f9c1 	bl	8011028 <_Bfree>
 800eca6:	3f01      	subs	r7, #1
 800eca8:	2f04      	cmp	r7, #4
 800ecaa:	d806      	bhi.n	800ecba <_strtod_l+0x102>
 800ecac:	e8df f007 	tbb	[pc, r7]
 800ecb0:	1714030a 	.word	0x1714030a
 800ecb4:	0a          	.byte	0x0a
 800ecb5:	00          	.byte	0x00
 800ecb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ecba:	0728      	lsls	r0, r5, #28
 800ecbc:	d5c0      	bpl.n	800ec40 <_strtod_l+0x88>
 800ecbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ecc2:	e7bd      	b.n	800ec40 <_strtod_l+0x88>
 800ecc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ecc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ecca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ecce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ecd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ecd6:	e7f0      	b.n	800ecba <_strtod_l+0x102>
 800ecd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ee5c <_strtod_l+0x2a4>
 800ecdc:	e7ed      	b.n	800ecba <_strtod_l+0x102>
 800ecde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ece2:	f04f 3aff 	mov.w	sl, #4294967295
 800ece6:	e7e8      	b.n	800ecba <_strtod_l+0x102>
 800ece8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	9217      	str	r2, [sp, #92]	; 0x5c
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	2b30      	cmp	r3, #48	; 0x30
 800ecf2:	d0f9      	beq.n	800ece8 <_strtod_l+0x130>
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d0a3      	beq.n	800ec40 <_strtod_l+0x88>
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	f04f 0900 	mov.w	r9, #0
 800ecfe:	9304      	str	r3, [sp, #16]
 800ed00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed02:	9308      	str	r3, [sp, #32]
 800ed04:	f8cd 901c 	str.w	r9, [sp, #28]
 800ed08:	464f      	mov	r7, r9
 800ed0a:	220a      	movs	r2, #10
 800ed0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ed0e:	7806      	ldrb	r6, [r0, #0]
 800ed10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ed14:	b2d9      	uxtb	r1, r3
 800ed16:	2909      	cmp	r1, #9
 800ed18:	d92a      	bls.n	800ed70 <_strtod_l+0x1b8>
 800ed1a:	9905      	ldr	r1, [sp, #20]
 800ed1c:	462a      	mov	r2, r5
 800ed1e:	f003 f933 	bl	8011f88 <strncmp>
 800ed22:	b398      	cbz	r0, 800ed8c <_strtod_l+0x1d4>
 800ed24:	2000      	movs	r0, #0
 800ed26:	4632      	mov	r2, r6
 800ed28:	463d      	mov	r5, r7
 800ed2a:	9005      	str	r0, [sp, #20]
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2a65      	cmp	r2, #101	; 0x65
 800ed30:	d001      	beq.n	800ed36 <_strtod_l+0x17e>
 800ed32:	2a45      	cmp	r2, #69	; 0x45
 800ed34:	d118      	bne.n	800ed68 <_strtod_l+0x1b0>
 800ed36:	b91d      	cbnz	r5, 800ed40 <_strtod_l+0x188>
 800ed38:	9a04      	ldr	r2, [sp, #16]
 800ed3a:	4302      	orrs	r2, r0
 800ed3c:	d09e      	beq.n	800ec7c <_strtod_l+0xc4>
 800ed3e:	2500      	movs	r5, #0
 800ed40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ed44:	f108 0201 	add.w	r2, r8, #1
 800ed48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ed4e:	2a2b      	cmp	r2, #43	; 0x2b
 800ed50:	d075      	beq.n	800ee3e <_strtod_l+0x286>
 800ed52:	2a2d      	cmp	r2, #45	; 0x2d
 800ed54:	d07b      	beq.n	800ee4e <_strtod_l+0x296>
 800ed56:	f04f 0c00 	mov.w	ip, #0
 800ed5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ed5e:	2909      	cmp	r1, #9
 800ed60:	f240 8082 	bls.w	800ee68 <_strtod_l+0x2b0>
 800ed64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ed68:	2600      	movs	r6, #0
 800ed6a:	e09d      	b.n	800eea8 <_strtod_l+0x2f0>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	e7c4      	b.n	800ecfa <_strtod_l+0x142>
 800ed70:	2f08      	cmp	r7, #8
 800ed72:	bfd8      	it	le
 800ed74:	9907      	ldrle	r1, [sp, #28]
 800ed76:	f100 0001 	add.w	r0, r0, #1
 800ed7a:	bfda      	itte	le
 800ed7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ed80:	9307      	strle	r3, [sp, #28]
 800ed82:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ed86:	3701      	adds	r7, #1
 800ed88:	9017      	str	r0, [sp, #92]	; 0x5c
 800ed8a:	e7bf      	b.n	800ed0c <_strtod_l+0x154>
 800ed8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed8e:	195a      	adds	r2, r3, r5
 800ed90:	9217      	str	r2, [sp, #92]	; 0x5c
 800ed92:	5d5a      	ldrb	r2, [r3, r5]
 800ed94:	2f00      	cmp	r7, #0
 800ed96:	d037      	beq.n	800ee08 <_strtod_l+0x250>
 800ed98:	9005      	str	r0, [sp, #20]
 800ed9a:	463d      	mov	r5, r7
 800ed9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800eda0:	2b09      	cmp	r3, #9
 800eda2:	d912      	bls.n	800edca <_strtod_l+0x212>
 800eda4:	2301      	movs	r3, #1
 800eda6:	e7c2      	b.n	800ed2e <_strtod_l+0x176>
 800eda8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edaa:	1c5a      	adds	r2, r3, #1
 800edac:	9217      	str	r2, [sp, #92]	; 0x5c
 800edae:	785a      	ldrb	r2, [r3, #1]
 800edb0:	3001      	adds	r0, #1
 800edb2:	2a30      	cmp	r2, #48	; 0x30
 800edb4:	d0f8      	beq.n	800eda8 <_strtod_l+0x1f0>
 800edb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800edba:	2b08      	cmp	r3, #8
 800edbc:	f200 84d9 	bhi.w	800f772 <_strtod_l+0xbba>
 800edc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800edc2:	9005      	str	r0, [sp, #20]
 800edc4:	2000      	movs	r0, #0
 800edc6:	9308      	str	r3, [sp, #32]
 800edc8:	4605      	mov	r5, r0
 800edca:	3a30      	subs	r2, #48	; 0x30
 800edcc:	f100 0301 	add.w	r3, r0, #1
 800edd0:	d014      	beq.n	800edfc <_strtod_l+0x244>
 800edd2:	9905      	ldr	r1, [sp, #20]
 800edd4:	4419      	add	r1, r3
 800edd6:	9105      	str	r1, [sp, #20]
 800edd8:	462b      	mov	r3, r5
 800edda:	eb00 0e05 	add.w	lr, r0, r5
 800edde:	210a      	movs	r1, #10
 800ede0:	4573      	cmp	r3, lr
 800ede2:	d113      	bne.n	800ee0c <_strtod_l+0x254>
 800ede4:	182b      	adds	r3, r5, r0
 800ede6:	2b08      	cmp	r3, #8
 800ede8:	f105 0501 	add.w	r5, r5, #1
 800edec:	4405      	add	r5, r0
 800edee:	dc1c      	bgt.n	800ee2a <_strtod_l+0x272>
 800edf0:	9907      	ldr	r1, [sp, #28]
 800edf2:	230a      	movs	r3, #10
 800edf4:	fb03 2301 	mla	r3, r3, r1, r2
 800edf8:	9307      	str	r3, [sp, #28]
 800edfa:	2300      	movs	r3, #0
 800edfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800edfe:	1c51      	adds	r1, r2, #1
 800ee00:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee02:	7852      	ldrb	r2, [r2, #1]
 800ee04:	4618      	mov	r0, r3
 800ee06:	e7c9      	b.n	800ed9c <_strtod_l+0x1e4>
 800ee08:	4638      	mov	r0, r7
 800ee0a:	e7d2      	b.n	800edb2 <_strtod_l+0x1fa>
 800ee0c:	2b08      	cmp	r3, #8
 800ee0e:	dc04      	bgt.n	800ee1a <_strtod_l+0x262>
 800ee10:	9e07      	ldr	r6, [sp, #28]
 800ee12:	434e      	muls	r6, r1
 800ee14:	9607      	str	r6, [sp, #28]
 800ee16:	3301      	adds	r3, #1
 800ee18:	e7e2      	b.n	800ede0 <_strtod_l+0x228>
 800ee1a:	f103 0c01 	add.w	ip, r3, #1
 800ee1e:	f1bc 0f10 	cmp.w	ip, #16
 800ee22:	bfd8      	it	le
 800ee24:	fb01 f909 	mulle.w	r9, r1, r9
 800ee28:	e7f5      	b.n	800ee16 <_strtod_l+0x25e>
 800ee2a:	2d10      	cmp	r5, #16
 800ee2c:	bfdc      	itt	le
 800ee2e:	230a      	movle	r3, #10
 800ee30:	fb03 2909 	mlale	r9, r3, r9, r2
 800ee34:	e7e1      	b.n	800edfa <_strtod_l+0x242>
 800ee36:	2300      	movs	r3, #0
 800ee38:	9305      	str	r3, [sp, #20]
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e77c      	b.n	800ed38 <_strtod_l+0x180>
 800ee3e:	f04f 0c00 	mov.w	ip, #0
 800ee42:	f108 0202 	add.w	r2, r8, #2
 800ee46:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee48:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ee4c:	e785      	b.n	800ed5a <_strtod_l+0x1a2>
 800ee4e:	f04f 0c01 	mov.w	ip, #1
 800ee52:	e7f6      	b.n	800ee42 <_strtod_l+0x28a>
 800ee54:	08016ba0 	.word	0x08016ba0
 800ee58:	08016954 	.word	0x08016954
 800ee5c:	7ff00000 	.word	0x7ff00000
 800ee60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee62:	1c51      	adds	r1, r2, #1
 800ee64:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee66:	7852      	ldrb	r2, [r2, #1]
 800ee68:	2a30      	cmp	r2, #48	; 0x30
 800ee6a:	d0f9      	beq.n	800ee60 <_strtod_l+0x2a8>
 800ee6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ee70:	2908      	cmp	r1, #8
 800ee72:	f63f af79 	bhi.w	800ed68 <_strtod_l+0x1b0>
 800ee76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ee7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee7c:	9206      	str	r2, [sp, #24]
 800ee7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee80:	1c51      	adds	r1, r2, #1
 800ee82:	9117      	str	r1, [sp, #92]	; 0x5c
 800ee84:	7852      	ldrb	r2, [r2, #1]
 800ee86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ee8a:	2e09      	cmp	r6, #9
 800ee8c:	d937      	bls.n	800eefe <_strtod_l+0x346>
 800ee8e:	9e06      	ldr	r6, [sp, #24]
 800ee90:	1b89      	subs	r1, r1, r6
 800ee92:	2908      	cmp	r1, #8
 800ee94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ee98:	dc02      	bgt.n	800eea0 <_strtod_l+0x2e8>
 800ee9a:	4576      	cmp	r6, lr
 800ee9c:	bfa8      	it	ge
 800ee9e:	4676      	movge	r6, lr
 800eea0:	f1bc 0f00 	cmp.w	ip, #0
 800eea4:	d000      	beq.n	800eea8 <_strtod_l+0x2f0>
 800eea6:	4276      	negs	r6, r6
 800eea8:	2d00      	cmp	r5, #0
 800eeaa:	d14d      	bne.n	800ef48 <_strtod_l+0x390>
 800eeac:	9904      	ldr	r1, [sp, #16]
 800eeae:	4301      	orrs	r1, r0
 800eeb0:	f47f aec6 	bne.w	800ec40 <_strtod_l+0x88>
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f47f aee1 	bne.w	800ec7c <_strtod_l+0xc4>
 800eeba:	2a69      	cmp	r2, #105	; 0x69
 800eebc:	d027      	beq.n	800ef0e <_strtod_l+0x356>
 800eebe:	dc24      	bgt.n	800ef0a <_strtod_l+0x352>
 800eec0:	2a49      	cmp	r2, #73	; 0x49
 800eec2:	d024      	beq.n	800ef0e <_strtod_l+0x356>
 800eec4:	2a4e      	cmp	r2, #78	; 0x4e
 800eec6:	f47f aed9 	bne.w	800ec7c <_strtod_l+0xc4>
 800eeca:	499f      	ldr	r1, [pc, #636]	; (800f148 <_strtod_l+0x590>)
 800eecc:	a817      	add	r0, sp, #92	; 0x5c
 800eece:	f001 ff6f 	bl	8010db0 <__match>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	f43f aed2 	beq.w	800ec7c <_strtod_l+0xc4>
 800eed8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	2b28      	cmp	r3, #40	; 0x28
 800eede:	d12d      	bne.n	800ef3c <_strtod_l+0x384>
 800eee0:	499a      	ldr	r1, [pc, #616]	; (800f14c <_strtod_l+0x594>)
 800eee2:	aa1a      	add	r2, sp, #104	; 0x68
 800eee4:	a817      	add	r0, sp, #92	; 0x5c
 800eee6:	f001 ff77 	bl	8010dd8 <__hexnan>
 800eeea:	2805      	cmp	r0, #5
 800eeec:	d126      	bne.n	800ef3c <_strtod_l+0x384>
 800eeee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eef0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800eef4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eef8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eefc:	e6a0      	b.n	800ec40 <_strtod_l+0x88>
 800eefe:	210a      	movs	r1, #10
 800ef00:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ef04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ef08:	e7b9      	b.n	800ee7e <_strtod_l+0x2c6>
 800ef0a:	2a6e      	cmp	r2, #110	; 0x6e
 800ef0c:	e7db      	b.n	800eec6 <_strtod_l+0x30e>
 800ef0e:	4990      	ldr	r1, [pc, #576]	; (800f150 <_strtod_l+0x598>)
 800ef10:	a817      	add	r0, sp, #92	; 0x5c
 800ef12:	f001 ff4d 	bl	8010db0 <__match>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	f43f aeb0 	beq.w	800ec7c <_strtod_l+0xc4>
 800ef1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef1e:	498d      	ldr	r1, [pc, #564]	; (800f154 <_strtod_l+0x59c>)
 800ef20:	3b01      	subs	r3, #1
 800ef22:	a817      	add	r0, sp, #92	; 0x5c
 800ef24:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef26:	f001 ff43 	bl	8010db0 <__match>
 800ef2a:	b910      	cbnz	r0, 800ef32 <_strtod_l+0x37a>
 800ef2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef2e:	3301      	adds	r3, #1
 800ef30:	9317      	str	r3, [sp, #92]	; 0x5c
 800ef32:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f164 <_strtod_l+0x5ac>
 800ef36:	f04f 0a00 	mov.w	sl, #0
 800ef3a:	e681      	b.n	800ec40 <_strtod_l+0x88>
 800ef3c:	4886      	ldr	r0, [pc, #536]	; (800f158 <_strtod_l+0x5a0>)
 800ef3e:	f003 f81b 	bl	8011f78 <nan>
 800ef42:	ec5b ab10 	vmov	sl, fp, d0
 800ef46:	e67b      	b.n	800ec40 <_strtod_l+0x88>
 800ef48:	9b05      	ldr	r3, [sp, #20]
 800ef4a:	9807      	ldr	r0, [sp, #28]
 800ef4c:	1af3      	subs	r3, r6, r3
 800ef4e:	2f00      	cmp	r7, #0
 800ef50:	bf08      	it	eq
 800ef52:	462f      	moveq	r7, r5
 800ef54:	2d10      	cmp	r5, #16
 800ef56:	9306      	str	r3, [sp, #24]
 800ef58:	46a8      	mov	r8, r5
 800ef5a:	bfa8      	it	ge
 800ef5c:	f04f 0810 	movge.w	r8, #16
 800ef60:	f7f1 fae0 	bl	8000524 <__aeabi_ui2d>
 800ef64:	2d09      	cmp	r5, #9
 800ef66:	4682      	mov	sl, r0
 800ef68:	468b      	mov	fp, r1
 800ef6a:	dd13      	ble.n	800ef94 <_strtod_l+0x3dc>
 800ef6c:	4b7b      	ldr	r3, [pc, #492]	; (800f15c <_strtod_l+0x5a4>)
 800ef6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ef72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ef76:	f7f1 fb4f 	bl	8000618 <__aeabi_dmul>
 800ef7a:	4682      	mov	sl, r0
 800ef7c:	4648      	mov	r0, r9
 800ef7e:	468b      	mov	fp, r1
 800ef80:	f7f1 fad0 	bl	8000524 <__aeabi_ui2d>
 800ef84:	4602      	mov	r2, r0
 800ef86:	460b      	mov	r3, r1
 800ef88:	4650      	mov	r0, sl
 800ef8a:	4659      	mov	r1, fp
 800ef8c:	f7f1 f98e 	bl	80002ac <__adddf3>
 800ef90:	4682      	mov	sl, r0
 800ef92:	468b      	mov	fp, r1
 800ef94:	2d0f      	cmp	r5, #15
 800ef96:	dc38      	bgt.n	800f00a <_strtod_l+0x452>
 800ef98:	9b06      	ldr	r3, [sp, #24]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f43f ae50 	beq.w	800ec40 <_strtod_l+0x88>
 800efa0:	dd24      	ble.n	800efec <_strtod_l+0x434>
 800efa2:	2b16      	cmp	r3, #22
 800efa4:	dc0b      	bgt.n	800efbe <_strtod_l+0x406>
 800efa6:	496d      	ldr	r1, [pc, #436]	; (800f15c <_strtod_l+0x5a4>)
 800efa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800efac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efb0:	4652      	mov	r2, sl
 800efb2:	465b      	mov	r3, fp
 800efb4:	f7f1 fb30 	bl	8000618 <__aeabi_dmul>
 800efb8:	4682      	mov	sl, r0
 800efba:	468b      	mov	fp, r1
 800efbc:	e640      	b.n	800ec40 <_strtod_l+0x88>
 800efbe:	9a06      	ldr	r2, [sp, #24]
 800efc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800efc4:	4293      	cmp	r3, r2
 800efc6:	db20      	blt.n	800f00a <_strtod_l+0x452>
 800efc8:	4c64      	ldr	r4, [pc, #400]	; (800f15c <_strtod_l+0x5a4>)
 800efca:	f1c5 050f 	rsb	r5, r5, #15
 800efce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800efd2:	4652      	mov	r2, sl
 800efd4:	465b      	mov	r3, fp
 800efd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800efda:	f7f1 fb1d 	bl	8000618 <__aeabi_dmul>
 800efde:	9b06      	ldr	r3, [sp, #24]
 800efe0:	1b5d      	subs	r5, r3, r5
 800efe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800efe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800efea:	e7e3      	b.n	800efb4 <_strtod_l+0x3fc>
 800efec:	9b06      	ldr	r3, [sp, #24]
 800efee:	3316      	adds	r3, #22
 800eff0:	db0b      	blt.n	800f00a <_strtod_l+0x452>
 800eff2:	9b05      	ldr	r3, [sp, #20]
 800eff4:	1b9e      	subs	r6, r3, r6
 800eff6:	4b59      	ldr	r3, [pc, #356]	; (800f15c <_strtod_l+0x5a4>)
 800eff8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800effc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f000:	4650      	mov	r0, sl
 800f002:	4659      	mov	r1, fp
 800f004:	f7f1 fc32 	bl	800086c <__aeabi_ddiv>
 800f008:	e7d6      	b.n	800efb8 <_strtod_l+0x400>
 800f00a:	9b06      	ldr	r3, [sp, #24]
 800f00c:	eba5 0808 	sub.w	r8, r5, r8
 800f010:	4498      	add	r8, r3
 800f012:	f1b8 0f00 	cmp.w	r8, #0
 800f016:	dd74      	ble.n	800f102 <_strtod_l+0x54a>
 800f018:	f018 030f 	ands.w	r3, r8, #15
 800f01c:	d00a      	beq.n	800f034 <_strtod_l+0x47c>
 800f01e:	494f      	ldr	r1, [pc, #316]	; (800f15c <_strtod_l+0x5a4>)
 800f020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f024:	4652      	mov	r2, sl
 800f026:	465b      	mov	r3, fp
 800f028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f02c:	f7f1 faf4 	bl	8000618 <__aeabi_dmul>
 800f030:	4682      	mov	sl, r0
 800f032:	468b      	mov	fp, r1
 800f034:	f038 080f 	bics.w	r8, r8, #15
 800f038:	d04f      	beq.n	800f0da <_strtod_l+0x522>
 800f03a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f03e:	dd22      	ble.n	800f086 <_strtod_l+0x4ce>
 800f040:	2500      	movs	r5, #0
 800f042:	462e      	mov	r6, r5
 800f044:	9507      	str	r5, [sp, #28]
 800f046:	9505      	str	r5, [sp, #20]
 800f048:	2322      	movs	r3, #34	; 0x22
 800f04a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f164 <_strtod_l+0x5ac>
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	f04f 0a00 	mov.w	sl, #0
 800f054:	9b07      	ldr	r3, [sp, #28]
 800f056:	2b00      	cmp	r3, #0
 800f058:	f43f adf2 	beq.w	800ec40 <_strtod_l+0x88>
 800f05c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f05e:	4620      	mov	r0, r4
 800f060:	f001 ffe2 	bl	8011028 <_Bfree>
 800f064:	9905      	ldr	r1, [sp, #20]
 800f066:	4620      	mov	r0, r4
 800f068:	f001 ffde 	bl	8011028 <_Bfree>
 800f06c:	4631      	mov	r1, r6
 800f06e:	4620      	mov	r0, r4
 800f070:	f001 ffda 	bl	8011028 <_Bfree>
 800f074:	9907      	ldr	r1, [sp, #28]
 800f076:	4620      	mov	r0, r4
 800f078:	f001 ffd6 	bl	8011028 <_Bfree>
 800f07c:	4629      	mov	r1, r5
 800f07e:	4620      	mov	r0, r4
 800f080:	f001 ffd2 	bl	8011028 <_Bfree>
 800f084:	e5dc      	b.n	800ec40 <_strtod_l+0x88>
 800f086:	4b36      	ldr	r3, [pc, #216]	; (800f160 <_strtod_l+0x5a8>)
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	2300      	movs	r3, #0
 800f08c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f090:	4650      	mov	r0, sl
 800f092:	4659      	mov	r1, fp
 800f094:	4699      	mov	r9, r3
 800f096:	f1b8 0f01 	cmp.w	r8, #1
 800f09a:	dc21      	bgt.n	800f0e0 <_strtod_l+0x528>
 800f09c:	b10b      	cbz	r3, 800f0a2 <_strtod_l+0x4ea>
 800f09e:	4682      	mov	sl, r0
 800f0a0:	468b      	mov	fp, r1
 800f0a2:	4b2f      	ldr	r3, [pc, #188]	; (800f160 <_strtod_l+0x5a8>)
 800f0a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f0a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f0ac:	4652      	mov	r2, sl
 800f0ae:	465b      	mov	r3, fp
 800f0b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f0b4:	f7f1 fab0 	bl	8000618 <__aeabi_dmul>
 800f0b8:	4b2a      	ldr	r3, [pc, #168]	; (800f164 <_strtod_l+0x5ac>)
 800f0ba:	460a      	mov	r2, r1
 800f0bc:	400b      	ands	r3, r1
 800f0be:	492a      	ldr	r1, [pc, #168]	; (800f168 <_strtod_l+0x5b0>)
 800f0c0:	428b      	cmp	r3, r1
 800f0c2:	4682      	mov	sl, r0
 800f0c4:	d8bc      	bhi.n	800f040 <_strtod_l+0x488>
 800f0c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f0ca:	428b      	cmp	r3, r1
 800f0cc:	bf86      	itte	hi
 800f0ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f16c <_strtod_l+0x5b4>
 800f0d2:	f04f 3aff 	movhi.w	sl, #4294967295
 800f0d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9304      	str	r3, [sp, #16]
 800f0de:	e084      	b.n	800f1ea <_strtod_l+0x632>
 800f0e0:	f018 0f01 	tst.w	r8, #1
 800f0e4:	d005      	beq.n	800f0f2 <_strtod_l+0x53a>
 800f0e6:	9b04      	ldr	r3, [sp, #16]
 800f0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ec:	f7f1 fa94 	bl	8000618 <__aeabi_dmul>
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	9a04      	ldr	r2, [sp, #16]
 800f0f4:	3208      	adds	r2, #8
 800f0f6:	f109 0901 	add.w	r9, r9, #1
 800f0fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f0fe:	9204      	str	r2, [sp, #16]
 800f100:	e7c9      	b.n	800f096 <_strtod_l+0x4de>
 800f102:	d0ea      	beq.n	800f0da <_strtod_l+0x522>
 800f104:	f1c8 0800 	rsb	r8, r8, #0
 800f108:	f018 020f 	ands.w	r2, r8, #15
 800f10c:	d00a      	beq.n	800f124 <_strtod_l+0x56c>
 800f10e:	4b13      	ldr	r3, [pc, #76]	; (800f15c <_strtod_l+0x5a4>)
 800f110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f114:	4650      	mov	r0, sl
 800f116:	4659      	mov	r1, fp
 800f118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f11c:	f7f1 fba6 	bl	800086c <__aeabi_ddiv>
 800f120:	4682      	mov	sl, r0
 800f122:	468b      	mov	fp, r1
 800f124:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f128:	d0d7      	beq.n	800f0da <_strtod_l+0x522>
 800f12a:	f1b8 0f1f 	cmp.w	r8, #31
 800f12e:	dd1f      	ble.n	800f170 <_strtod_l+0x5b8>
 800f130:	2500      	movs	r5, #0
 800f132:	462e      	mov	r6, r5
 800f134:	9507      	str	r5, [sp, #28]
 800f136:	9505      	str	r5, [sp, #20]
 800f138:	2322      	movs	r3, #34	; 0x22
 800f13a:	f04f 0a00 	mov.w	sl, #0
 800f13e:	f04f 0b00 	mov.w	fp, #0
 800f142:	6023      	str	r3, [r4, #0]
 800f144:	e786      	b.n	800f054 <_strtod_l+0x49c>
 800f146:	bf00      	nop
 800f148:	08016925 	.word	0x08016925
 800f14c:	08016968 	.word	0x08016968
 800f150:	0801691d 	.word	0x0801691d
 800f154:	08016aac 	.word	0x08016aac
 800f158:	08016eab 	.word	0x08016eab
 800f15c:	08016c38 	.word	0x08016c38
 800f160:	08016c10 	.word	0x08016c10
 800f164:	7ff00000 	.word	0x7ff00000
 800f168:	7ca00000 	.word	0x7ca00000
 800f16c:	7fefffff 	.word	0x7fefffff
 800f170:	f018 0310 	ands.w	r3, r8, #16
 800f174:	bf18      	it	ne
 800f176:	236a      	movne	r3, #106	; 0x6a
 800f178:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f528 <_strtod_l+0x970>
 800f17c:	9304      	str	r3, [sp, #16]
 800f17e:	4650      	mov	r0, sl
 800f180:	4659      	mov	r1, fp
 800f182:	2300      	movs	r3, #0
 800f184:	f018 0f01 	tst.w	r8, #1
 800f188:	d004      	beq.n	800f194 <_strtod_l+0x5dc>
 800f18a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f18e:	f7f1 fa43 	bl	8000618 <__aeabi_dmul>
 800f192:	2301      	movs	r3, #1
 800f194:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f198:	f109 0908 	add.w	r9, r9, #8
 800f19c:	d1f2      	bne.n	800f184 <_strtod_l+0x5cc>
 800f19e:	b10b      	cbz	r3, 800f1a4 <_strtod_l+0x5ec>
 800f1a0:	4682      	mov	sl, r0
 800f1a2:	468b      	mov	fp, r1
 800f1a4:	9b04      	ldr	r3, [sp, #16]
 800f1a6:	b1c3      	cbz	r3, 800f1da <_strtod_l+0x622>
 800f1a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f1ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	4659      	mov	r1, fp
 800f1b4:	dd11      	ble.n	800f1da <_strtod_l+0x622>
 800f1b6:	2b1f      	cmp	r3, #31
 800f1b8:	f340 8124 	ble.w	800f404 <_strtod_l+0x84c>
 800f1bc:	2b34      	cmp	r3, #52	; 0x34
 800f1be:	bfde      	ittt	le
 800f1c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f1c4:	f04f 33ff 	movle.w	r3, #4294967295
 800f1c8:	fa03 f202 	lslle.w	r2, r3, r2
 800f1cc:	f04f 0a00 	mov.w	sl, #0
 800f1d0:	bfcc      	ite	gt
 800f1d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f1d6:	ea02 0b01 	andle.w	fp, r2, r1
 800f1da:	2200      	movs	r2, #0
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4650      	mov	r0, sl
 800f1e0:	4659      	mov	r1, fp
 800f1e2:	f7f1 fc81 	bl	8000ae8 <__aeabi_dcmpeq>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d1a2      	bne.n	800f130 <_strtod_l+0x578>
 800f1ea:	9b07      	ldr	r3, [sp, #28]
 800f1ec:	9300      	str	r3, [sp, #0]
 800f1ee:	9908      	ldr	r1, [sp, #32]
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	463a      	mov	r2, r7
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f001 ff7f 	bl	80110f8 <__s2b>
 800f1fa:	9007      	str	r0, [sp, #28]
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	f43f af1f 	beq.w	800f040 <_strtod_l+0x488>
 800f202:	9b05      	ldr	r3, [sp, #20]
 800f204:	1b9e      	subs	r6, r3, r6
 800f206:	9b06      	ldr	r3, [sp, #24]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	bfb4      	ite	lt
 800f20c:	4633      	movlt	r3, r6
 800f20e:	2300      	movge	r3, #0
 800f210:	930c      	str	r3, [sp, #48]	; 0x30
 800f212:	9b06      	ldr	r3, [sp, #24]
 800f214:	2500      	movs	r5, #0
 800f216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f21a:	9312      	str	r3, [sp, #72]	; 0x48
 800f21c:	462e      	mov	r6, r5
 800f21e:	9b07      	ldr	r3, [sp, #28]
 800f220:	4620      	mov	r0, r4
 800f222:	6859      	ldr	r1, [r3, #4]
 800f224:	f001 fec0 	bl	8010fa8 <_Balloc>
 800f228:	9005      	str	r0, [sp, #20]
 800f22a:	2800      	cmp	r0, #0
 800f22c:	f43f af0c 	beq.w	800f048 <_strtod_l+0x490>
 800f230:	9b07      	ldr	r3, [sp, #28]
 800f232:	691a      	ldr	r2, [r3, #16]
 800f234:	3202      	adds	r2, #2
 800f236:	f103 010c 	add.w	r1, r3, #12
 800f23a:	0092      	lsls	r2, r2, #2
 800f23c:	300c      	adds	r0, #12
 800f23e:	f7fe fbdb 	bl	800d9f8 <memcpy>
 800f242:	ec4b ab10 	vmov	d0, sl, fp
 800f246:	aa1a      	add	r2, sp, #104	; 0x68
 800f248:	a919      	add	r1, sp, #100	; 0x64
 800f24a:	4620      	mov	r0, r4
 800f24c:	f002 fa9a 	bl	8011784 <__d2b>
 800f250:	ec4b ab18 	vmov	d8, sl, fp
 800f254:	9018      	str	r0, [sp, #96]	; 0x60
 800f256:	2800      	cmp	r0, #0
 800f258:	f43f aef6 	beq.w	800f048 <_strtod_l+0x490>
 800f25c:	2101      	movs	r1, #1
 800f25e:	4620      	mov	r0, r4
 800f260:	f001 ffe4 	bl	801122c <__i2b>
 800f264:	4606      	mov	r6, r0
 800f266:	2800      	cmp	r0, #0
 800f268:	f43f aeee 	beq.w	800f048 <_strtod_l+0x490>
 800f26c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f26e:	9904      	ldr	r1, [sp, #16]
 800f270:	2b00      	cmp	r3, #0
 800f272:	bfab      	itete	ge
 800f274:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f276:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f278:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f27a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f27e:	bfac      	ite	ge
 800f280:	eb03 0902 	addge.w	r9, r3, r2
 800f284:	1ad7      	sublt	r7, r2, r3
 800f286:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f288:	eba3 0801 	sub.w	r8, r3, r1
 800f28c:	4490      	add	r8, r2
 800f28e:	4ba1      	ldr	r3, [pc, #644]	; (800f514 <_strtod_l+0x95c>)
 800f290:	f108 38ff 	add.w	r8, r8, #4294967295
 800f294:	4598      	cmp	r8, r3
 800f296:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f29a:	f280 80c7 	bge.w	800f42c <_strtod_l+0x874>
 800f29e:	eba3 0308 	sub.w	r3, r3, r8
 800f2a2:	2b1f      	cmp	r3, #31
 800f2a4:	eba2 0203 	sub.w	r2, r2, r3
 800f2a8:	f04f 0101 	mov.w	r1, #1
 800f2ac:	f300 80b1 	bgt.w	800f412 <_strtod_l+0x85a>
 800f2b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2b4:	930d      	str	r3, [sp, #52]	; 0x34
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	9308      	str	r3, [sp, #32]
 800f2ba:	eb09 0802 	add.w	r8, r9, r2
 800f2be:	9b04      	ldr	r3, [sp, #16]
 800f2c0:	45c1      	cmp	r9, r8
 800f2c2:	4417      	add	r7, r2
 800f2c4:	441f      	add	r7, r3
 800f2c6:	464b      	mov	r3, r9
 800f2c8:	bfa8      	it	ge
 800f2ca:	4643      	movge	r3, r8
 800f2cc:	42bb      	cmp	r3, r7
 800f2ce:	bfa8      	it	ge
 800f2d0:	463b      	movge	r3, r7
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	bfc2      	ittt	gt
 800f2d6:	eba8 0803 	subgt.w	r8, r8, r3
 800f2da:	1aff      	subgt	r7, r7, r3
 800f2dc:	eba9 0903 	subgt.w	r9, r9, r3
 800f2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	dd17      	ble.n	800f316 <_strtod_l+0x75e>
 800f2e6:	4631      	mov	r1, r6
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f002 f85e 	bl	80113ac <__pow5mult>
 800f2f0:	4606      	mov	r6, r0
 800f2f2:	2800      	cmp	r0, #0
 800f2f4:	f43f aea8 	beq.w	800f048 <_strtod_l+0x490>
 800f2f8:	4601      	mov	r1, r0
 800f2fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f2fc:	4620      	mov	r0, r4
 800f2fe:	f001 ffab 	bl	8011258 <__multiply>
 800f302:	900b      	str	r0, [sp, #44]	; 0x2c
 800f304:	2800      	cmp	r0, #0
 800f306:	f43f ae9f 	beq.w	800f048 <_strtod_l+0x490>
 800f30a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f30c:	4620      	mov	r0, r4
 800f30e:	f001 fe8b 	bl	8011028 <_Bfree>
 800f312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f314:	9318      	str	r3, [sp, #96]	; 0x60
 800f316:	f1b8 0f00 	cmp.w	r8, #0
 800f31a:	f300 808c 	bgt.w	800f436 <_strtod_l+0x87e>
 800f31e:	9b06      	ldr	r3, [sp, #24]
 800f320:	2b00      	cmp	r3, #0
 800f322:	dd08      	ble.n	800f336 <_strtod_l+0x77e>
 800f324:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f326:	9905      	ldr	r1, [sp, #20]
 800f328:	4620      	mov	r0, r4
 800f32a:	f002 f83f 	bl	80113ac <__pow5mult>
 800f32e:	9005      	str	r0, [sp, #20]
 800f330:	2800      	cmp	r0, #0
 800f332:	f43f ae89 	beq.w	800f048 <_strtod_l+0x490>
 800f336:	2f00      	cmp	r7, #0
 800f338:	dd08      	ble.n	800f34c <_strtod_l+0x794>
 800f33a:	9905      	ldr	r1, [sp, #20]
 800f33c:	463a      	mov	r2, r7
 800f33e:	4620      	mov	r0, r4
 800f340:	f002 f88e 	bl	8011460 <__lshift>
 800f344:	9005      	str	r0, [sp, #20]
 800f346:	2800      	cmp	r0, #0
 800f348:	f43f ae7e 	beq.w	800f048 <_strtod_l+0x490>
 800f34c:	f1b9 0f00 	cmp.w	r9, #0
 800f350:	dd08      	ble.n	800f364 <_strtod_l+0x7ac>
 800f352:	4631      	mov	r1, r6
 800f354:	464a      	mov	r2, r9
 800f356:	4620      	mov	r0, r4
 800f358:	f002 f882 	bl	8011460 <__lshift>
 800f35c:	4606      	mov	r6, r0
 800f35e:	2800      	cmp	r0, #0
 800f360:	f43f ae72 	beq.w	800f048 <_strtod_l+0x490>
 800f364:	9a05      	ldr	r2, [sp, #20]
 800f366:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f368:	4620      	mov	r0, r4
 800f36a:	f002 f905 	bl	8011578 <__mdiff>
 800f36e:	4605      	mov	r5, r0
 800f370:	2800      	cmp	r0, #0
 800f372:	f43f ae69 	beq.w	800f048 <_strtod_l+0x490>
 800f376:	68c3      	ldr	r3, [r0, #12]
 800f378:	930b      	str	r3, [sp, #44]	; 0x2c
 800f37a:	2300      	movs	r3, #0
 800f37c:	60c3      	str	r3, [r0, #12]
 800f37e:	4631      	mov	r1, r6
 800f380:	f002 f8de 	bl	8011540 <__mcmp>
 800f384:	2800      	cmp	r0, #0
 800f386:	da60      	bge.n	800f44a <_strtod_l+0x892>
 800f388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f38a:	ea53 030a 	orrs.w	r3, r3, sl
 800f38e:	f040 8082 	bne.w	800f496 <_strtod_l+0x8de>
 800f392:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f396:	2b00      	cmp	r3, #0
 800f398:	d17d      	bne.n	800f496 <_strtod_l+0x8de>
 800f39a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f39e:	0d1b      	lsrs	r3, r3, #20
 800f3a0:	051b      	lsls	r3, r3, #20
 800f3a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f3a6:	d976      	bls.n	800f496 <_strtod_l+0x8de>
 800f3a8:	696b      	ldr	r3, [r5, #20]
 800f3aa:	b913      	cbnz	r3, 800f3b2 <_strtod_l+0x7fa>
 800f3ac:	692b      	ldr	r3, [r5, #16]
 800f3ae:	2b01      	cmp	r3, #1
 800f3b0:	dd71      	ble.n	800f496 <_strtod_l+0x8de>
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f002 f852 	bl	8011460 <__lshift>
 800f3bc:	4631      	mov	r1, r6
 800f3be:	4605      	mov	r5, r0
 800f3c0:	f002 f8be 	bl	8011540 <__mcmp>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	dd66      	ble.n	800f496 <_strtod_l+0x8de>
 800f3c8:	9904      	ldr	r1, [sp, #16]
 800f3ca:	4a53      	ldr	r2, [pc, #332]	; (800f518 <_strtod_l+0x960>)
 800f3cc:	465b      	mov	r3, fp
 800f3ce:	2900      	cmp	r1, #0
 800f3d0:	f000 8081 	beq.w	800f4d6 <_strtod_l+0x91e>
 800f3d4:	ea02 010b 	and.w	r1, r2, fp
 800f3d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f3dc:	dc7b      	bgt.n	800f4d6 <_strtod_l+0x91e>
 800f3de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f3e2:	f77f aea9 	ble.w	800f138 <_strtod_l+0x580>
 800f3e6:	4b4d      	ldr	r3, [pc, #308]	; (800f51c <_strtod_l+0x964>)
 800f3e8:	4650      	mov	r0, sl
 800f3ea:	4659      	mov	r1, fp
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f7f1 f913 	bl	8000618 <__aeabi_dmul>
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4303      	orrs	r3, r0
 800f3f6:	bf08      	it	eq
 800f3f8:	2322      	moveq	r3, #34	; 0x22
 800f3fa:	4682      	mov	sl, r0
 800f3fc:	468b      	mov	fp, r1
 800f3fe:	bf08      	it	eq
 800f400:	6023      	streq	r3, [r4, #0]
 800f402:	e62b      	b.n	800f05c <_strtod_l+0x4a4>
 800f404:	f04f 32ff 	mov.w	r2, #4294967295
 800f408:	fa02 f303 	lsl.w	r3, r2, r3
 800f40c:	ea03 0a0a 	and.w	sl, r3, sl
 800f410:	e6e3      	b.n	800f1da <_strtod_l+0x622>
 800f412:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f416:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f41a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f41e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f422:	fa01 f308 	lsl.w	r3, r1, r8
 800f426:	9308      	str	r3, [sp, #32]
 800f428:	910d      	str	r1, [sp, #52]	; 0x34
 800f42a:	e746      	b.n	800f2ba <_strtod_l+0x702>
 800f42c:	2300      	movs	r3, #0
 800f42e:	9308      	str	r3, [sp, #32]
 800f430:	2301      	movs	r3, #1
 800f432:	930d      	str	r3, [sp, #52]	; 0x34
 800f434:	e741      	b.n	800f2ba <_strtod_l+0x702>
 800f436:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f438:	4642      	mov	r2, r8
 800f43a:	4620      	mov	r0, r4
 800f43c:	f002 f810 	bl	8011460 <__lshift>
 800f440:	9018      	str	r0, [sp, #96]	; 0x60
 800f442:	2800      	cmp	r0, #0
 800f444:	f47f af6b 	bne.w	800f31e <_strtod_l+0x766>
 800f448:	e5fe      	b.n	800f048 <_strtod_l+0x490>
 800f44a:	465f      	mov	r7, fp
 800f44c:	d16e      	bne.n	800f52c <_strtod_l+0x974>
 800f44e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f454:	b342      	cbz	r2, 800f4a8 <_strtod_l+0x8f0>
 800f456:	4a32      	ldr	r2, [pc, #200]	; (800f520 <_strtod_l+0x968>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d128      	bne.n	800f4ae <_strtod_l+0x8f6>
 800f45c:	9b04      	ldr	r3, [sp, #16]
 800f45e:	4651      	mov	r1, sl
 800f460:	b1eb      	cbz	r3, 800f49e <_strtod_l+0x8e6>
 800f462:	4b2d      	ldr	r3, [pc, #180]	; (800f518 <_strtod_l+0x960>)
 800f464:	403b      	ands	r3, r7
 800f466:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f46a:	f04f 32ff 	mov.w	r2, #4294967295
 800f46e:	d819      	bhi.n	800f4a4 <_strtod_l+0x8ec>
 800f470:	0d1b      	lsrs	r3, r3, #20
 800f472:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f476:	fa02 f303 	lsl.w	r3, r2, r3
 800f47a:	4299      	cmp	r1, r3
 800f47c:	d117      	bne.n	800f4ae <_strtod_l+0x8f6>
 800f47e:	4b29      	ldr	r3, [pc, #164]	; (800f524 <_strtod_l+0x96c>)
 800f480:	429f      	cmp	r7, r3
 800f482:	d102      	bne.n	800f48a <_strtod_l+0x8d2>
 800f484:	3101      	adds	r1, #1
 800f486:	f43f addf 	beq.w	800f048 <_strtod_l+0x490>
 800f48a:	4b23      	ldr	r3, [pc, #140]	; (800f518 <_strtod_l+0x960>)
 800f48c:	403b      	ands	r3, r7
 800f48e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f492:	f04f 0a00 	mov.w	sl, #0
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d1a4      	bne.n	800f3e6 <_strtod_l+0x82e>
 800f49c:	e5de      	b.n	800f05c <_strtod_l+0x4a4>
 800f49e:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a2:	e7ea      	b.n	800f47a <_strtod_l+0x8c2>
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	e7e8      	b.n	800f47a <_strtod_l+0x8c2>
 800f4a8:	ea53 030a 	orrs.w	r3, r3, sl
 800f4ac:	d08c      	beq.n	800f3c8 <_strtod_l+0x810>
 800f4ae:	9b08      	ldr	r3, [sp, #32]
 800f4b0:	b1db      	cbz	r3, 800f4ea <_strtod_l+0x932>
 800f4b2:	423b      	tst	r3, r7
 800f4b4:	d0ef      	beq.n	800f496 <_strtod_l+0x8de>
 800f4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4b8:	9a04      	ldr	r2, [sp, #16]
 800f4ba:	4650      	mov	r0, sl
 800f4bc:	4659      	mov	r1, fp
 800f4be:	b1c3      	cbz	r3, 800f4f2 <_strtod_l+0x93a>
 800f4c0:	f7ff fb5b 	bl	800eb7a <sulp>
 800f4c4:	4602      	mov	r2, r0
 800f4c6:	460b      	mov	r3, r1
 800f4c8:	ec51 0b18 	vmov	r0, r1, d8
 800f4cc:	f7f0 feee 	bl	80002ac <__adddf3>
 800f4d0:	4682      	mov	sl, r0
 800f4d2:	468b      	mov	fp, r1
 800f4d4:	e7df      	b.n	800f496 <_strtod_l+0x8de>
 800f4d6:	4013      	ands	r3, r2
 800f4d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f4dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f4e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f4e4:	f04f 3aff 	mov.w	sl, #4294967295
 800f4e8:	e7d5      	b.n	800f496 <_strtod_l+0x8de>
 800f4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4ec:	ea13 0f0a 	tst.w	r3, sl
 800f4f0:	e7e0      	b.n	800f4b4 <_strtod_l+0x8fc>
 800f4f2:	f7ff fb42 	bl	800eb7a <sulp>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	ec51 0b18 	vmov	r0, r1, d8
 800f4fe:	f7f0 fed3 	bl	80002a8 <__aeabi_dsub>
 800f502:	2200      	movs	r2, #0
 800f504:	2300      	movs	r3, #0
 800f506:	4682      	mov	sl, r0
 800f508:	468b      	mov	fp, r1
 800f50a:	f7f1 faed 	bl	8000ae8 <__aeabi_dcmpeq>
 800f50e:	2800      	cmp	r0, #0
 800f510:	d0c1      	beq.n	800f496 <_strtod_l+0x8de>
 800f512:	e611      	b.n	800f138 <_strtod_l+0x580>
 800f514:	fffffc02 	.word	0xfffffc02
 800f518:	7ff00000 	.word	0x7ff00000
 800f51c:	39500000 	.word	0x39500000
 800f520:	000fffff 	.word	0x000fffff
 800f524:	7fefffff 	.word	0x7fefffff
 800f528:	08016980 	.word	0x08016980
 800f52c:	4631      	mov	r1, r6
 800f52e:	4628      	mov	r0, r5
 800f530:	f002 f984 	bl	801183c <__ratio>
 800f534:	ec59 8b10 	vmov	r8, r9, d0
 800f538:	ee10 0a10 	vmov	r0, s0
 800f53c:	2200      	movs	r2, #0
 800f53e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f542:	4649      	mov	r1, r9
 800f544:	f7f1 fae4 	bl	8000b10 <__aeabi_dcmple>
 800f548:	2800      	cmp	r0, #0
 800f54a:	d07a      	beq.n	800f642 <_strtod_l+0xa8a>
 800f54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d04a      	beq.n	800f5e8 <_strtod_l+0xa30>
 800f552:	4b95      	ldr	r3, [pc, #596]	; (800f7a8 <_strtod_l+0xbf0>)
 800f554:	2200      	movs	r2, #0
 800f556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f55a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f7a8 <_strtod_l+0xbf0>
 800f55e:	f04f 0800 	mov.w	r8, #0
 800f562:	4b92      	ldr	r3, [pc, #584]	; (800f7ac <_strtod_l+0xbf4>)
 800f564:	403b      	ands	r3, r7
 800f566:	930d      	str	r3, [sp, #52]	; 0x34
 800f568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f56a:	4b91      	ldr	r3, [pc, #580]	; (800f7b0 <_strtod_l+0xbf8>)
 800f56c:	429a      	cmp	r2, r3
 800f56e:	f040 80b0 	bne.w	800f6d2 <_strtod_l+0xb1a>
 800f572:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f576:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f57a:	ec4b ab10 	vmov	d0, sl, fp
 800f57e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f582:	f002 f883 	bl	801168c <__ulp>
 800f586:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f58a:	ec53 2b10 	vmov	r2, r3, d0
 800f58e:	f7f1 f843 	bl	8000618 <__aeabi_dmul>
 800f592:	4652      	mov	r2, sl
 800f594:	465b      	mov	r3, fp
 800f596:	f7f0 fe89 	bl	80002ac <__adddf3>
 800f59a:	460b      	mov	r3, r1
 800f59c:	4983      	ldr	r1, [pc, #524]	; (800f7ac <_strtod_l+0xbf4>)
 800f59e:	4a85      	ldr	r2, [pc, #532]	; (800f7b4 <_strtod_l+0xbfc>)
 800f5a0:	4019      	ands	r1, r3
 800f5a2:	4291      	cmp	r1, r2
 800f5a4:	4682      	mov	sl, r0
 800f5a6:	d960      	bls.n	800f66a <_strtod_l+0xab2>
 800f5a8:	ee18 3a90 	vmov	r3, s17
 800f5ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d104      	bne.n	800f5be <_strtod_l+0xa06>
 800f5b4:	ee18 3a10 	vmov	r3, s16
 800f5b8:	3301      	adds	r3, #1
 800f5ba:	f43f ad45 	beq.w	800f048 <_strtod_l+0x490>
 800f5be:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f7c0 <_strtod_l+0xc08>
 800f5c2:	f04f 3aff 	mov.w	sl, #4294967295
 800f5c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f001 fd2d 	bl	8011028 <_Bfree>
 800f5ce:	9905      	ldr	r1, [sp, #20]
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	f001 fd29 	bl	8011028 <_Bfree>
 800f5d6:	4631      	mov	r1, r6
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f001 fd25 	bl	8011028 <_Bfree>
 800f5de:	4629      	mov	r1, r5
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f001 fd21 	bl	8011028 <_Bfree>
 800f5e6:	e61a      	b.n	800f21e <_strtod_l+0x666>
 800f5e8:	f1ba 0f00 	cmp.w	sl, #0
 800f5ec:	d11b      	bne.n	800f626 <_strtod_l+0xa6e>
 800f5ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5f2:	b9f3      	cbnz	r3, 800f632 <_strtod_l+0xa7a>
 800f5f4:	4b6c      	ldr	r3, [pc, #432]	; (800f7a8 <_strtod_l+0xbf0>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	4640      	mov	r0, r8
 800f5fa:	4649      	mov	r1, r9
 800f5fc:	f7f1 fa7e 	bl	8000afc <__aeabi_dcmplt>
 800f600:	b9d0      	cbnz	r0, 800f638 <_strtod_l+0xa80>
 800f602:	4640      	mov	r0, r8
 800f604:	4649      	mov	r1, r9
 800f606:	4b6c      	ldr	r3, [pc, #432]	; (800f7b8 <_strtod_l+0xc00>)
 800f608:	2200      	movs	r2, #0
 800f60a:	f7f1 f805 	bl	8000618 <__aeabi_dmul>
 800f60e:	4680      	mov	r8, r0
 800f610:	4689      	mov	r9, r1
 800f612:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f616:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f61a:	9315      	str	r3, [sp, #84]	; 0x54
 800f61c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f620:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f624:	e79d      	b.n	800f562 <_strtod_l+0x9aa>
 800f626:	f1ba 0f01 	cmp.w	sl, #1
 800f62a:	d102      	bne.n	800f632 <_strtod_l+0xa7a>
 800f62c:	2f00      	cmp	r7, #0
 800f62e:	f43f ad83 	beq.w	800f138 <_strtod_l+0x580>
 800f632:	4b62      	ldr	r3, [pc, #392]	; (800f7bc <_strtod_l+0xc04>)
 800f634:	2200      	movs	r2, #0
 800f636:	e78e      	b.n	800f556 <_strtod_l+0x99e>
 800f638:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f7b8 <_strtod_l+0xc00>
 800f63c:	f04f 0800 	mov.w	r8, #0
 800f640:	e7e7      	b.n	800f612 <_strtod_l+0xa5a>
 800f642:	4b5d      	ldr	r3, [pc, #372]	; (800f7b8 <_strtod_l+0xc00>)
 800f644:	4640      	mov	r0, r8
 800f646:	4649      	mov	r1, r9
 800f648:	2200      	movs	r2, #0
 800f64a:	f7f0 ffe5 	bl	8000618 <__aeabi_dmul>
 800f64e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f650:	4680      	mov	r8, r0
 800f652:	4689      	mov	r9, r1
 800f654:	b933      	cbnz	r3, 800f664 <_strtod_l+0xaac>
 800f656:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f65a:	900e      	str	r0, [sp, #56]	; 0x38
 800f65c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f65e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f662:	e7dd      	b.n	800f620 <_strtod_l+0xa68>
 800f664:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f668:	e7f9      	b.n	800f65e <_strtod_l+0xaa6>
 800f66a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f66e:	9b04      	ldr	r3, [sp, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d1a8      	bne.n	800f5c6 <_strtod_l+0xa0e>
 800f674:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f678:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f67a:	0d1b      	lsrs	r3, r3, #20
 800f67c:	051b      	lsls	r3, r3, #20
 800f67e:	429a      	cmp	r2, r3
 800f680:	d1a1      	bne.n	800f5c6 <_strtod_l+0xa0e>
 800f682:	4640      	mov	r0, r8
 800f684:	4649      	mov	r1, r9
 800f686:	f7f1 fb27 	bl	8000cd8 <__aeabi_d2lz>
 800f68a:	f7f0 ff97 	bl	80005bc <__aeabi_l2d>
 800f68e:	4602      	mov	r2, r0
 800f690:	460b      	mov	r3, r1
 800f692:	4640      	mov	r0, r8
 800f694:	4649      	mov	r1, r9
 800f696:	f7f0 fe07 	bl	80002a8 <__aeabi_dsub>
 800f69a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f69c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6a0:	ea43 030a 	orr.w	r3, r3, sl
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	4680      	mov	r8, r0
 800f6a8:	4689      	mov	r9, r1
 800f6aa:	d055      	beq.n	800f758 <_strtod_l+0xba0>
 800f6ac:	a336      	add	r3, pc, #216	; (adr r3, 800f788 <_strtod_l+0xbd0>)
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	f7f1 fa23 	bl	8000afc <__aeabi_dcmplt>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	f47f acd0 	bne.w	800f05c <_strtod_l+0x4a4>
 800f6bc:	a334      	add	r3, pc, #208	; (adr r3, 800f790 <_strtod_l+0xbd8>)
 800f6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c2:	4640      	mov	r0, r8
 800f6c4:	4649      	mov	r1, r9
 800f6c6:	f7f1 fa37 	bl	8000b38 <__aeabi_dcmpgt>
 800f6ca:	2800      	cmp	r0, #0
 800f6cc:	f43f af7b 	beq.w	800f5c6 <_strtod_l+0xa0e>
 800f6d0:	e4c4      	b.n	800f05c <_strtod_l+0x4a4>
 800f6d2:	9b04      	ldr	r3, [sp, #16]
 800f6d4:	b333      	cbz	r3, 800f724 <_strtod_l+0xb6c>
 800f6d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f6dc:	d822      	bhi.n	800f724 <_strtod_l+0xb6c>
 800f6de:	a32e      	add	r3, pc, #184	; (adr r3, 800f798 <_strtod_l+0xbe0>)
 800f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e4:	4640      	mov	r0, r8
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	f7f1 fa12 	bl	8000b10 <__aeabi_dcmple>
 800f6ec:	b1a0      	cbz	r0, 800f718 <_strtod_l+0xb60>
 800f6ee:	4649      	mov	r1, r9
 800f6f0:	4640      	mov	r0, r8
 800f6f2:	f7f1 fa69 	bl	8000bc8 <__aeabi_d2uiz>
 800f6f6:	2801      	cmp	r0, #1
 800f6f8:	bf38      	it	cc
 800f6fa:	2001      	movcc	r0, #1
 800f6fc:	f7f0 ff12 	bl	8000524 <__aeabi_ui2d>
 800f700:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f702:	4680      	mov	r8, r0
 800f704:	4689      	mov	r9, r1
 800f706:	bb23      	cbnz	r3, 800f752 <_strtod_l+0xb9a>
 800f708:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f70c:	9010      	str	r0, [sp, #64]	; 0x40
 800f70e:	9311      	str	r3, [sp, #68]	; 0x44
 800f710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f714:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f71a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f71c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f720:	1a9b      	subs	r3, r3, r2
 800f722:	9309      	str	r3, [sp, #36]	; 0x24
 800f724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f728:	eeb0 0a48 	vmov.f32	s0, s16
 800f72c:	eef0 0a68 	vmov.f32	s1, s17
 800f730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f734:	f001 ffaa 	bl	801168c <__ulp>
 800f738:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f73c:	ec53 2b10 	vmov	r2, r3, d0
 800f740:	f7f0 ff6a 	bl	8000618 <__aeabi_dmul>
 800f744:	ec53 2b18 	vmov	r2, r3, d8
 800f748:	f7f0 fdb0 	bl	80002ac <__adddf3>
 800f74c:	4682      	mov	sl, r0
 800f74e:	468b      	mov	fp, r1
 800f750:	e78d      	b.n	800f66e <_strtod_l+0xab6>
 800f752:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f756:	e7db      	b.n	800f710 <_strtod_l+0xb58>
 800f758:	a311      	add	r3, pc, #68	; (adr r3, 800f7a0 <_strtod_l+0xbe8>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f1 f9cd 	bl	8000afc <__aeabi_dcmplt>
 800f762:	e7b2      	b.n	800f6ca <_strtod_l+0xb12>
 800f764:	2300      	movs	r3, #0
 800f766:	930a      	str	r3, [sp, #40]	; 0x28
 800f768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f76a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f76c:	6013      	str	r3, [r2, #0]
 800f76e:	f7ff ba6b 	b.w	800ec48 <_strtod_l+0x90>
 800f772:	2a65      	cmp	r2, #101	; 0x65
 800f774:	f43f ab5f 	beq.w	800ee36 <_strtod_l+0x27e>
 800f778:	2a45      	cmp	r2, #69	; 0x45
 800f77a:	f43f ab5c 	beq.w	800ee36 <_strtod_l+0x27e>
 800f77e:	2301      	movs	r3, #1
 800f780:	f7ff bb94 	b.w	800eeac <_strtod_l+0x2f4>
 800f784:	f3af 8000 	nop.w
 800f788:	94a03595 	.word	0x94a03595
 800f78c:	3fdfffff 	.word	0x3fdfffff
 800f790:	35afe535 	.word	0x35afe535
 800f794:	3fe00000 	.word	0x3fe00000
 800f798:	ffc00000 	.word	0xffc00000
 800f79c:	41dfffff 	.word	0x41dfffff
 800f7a0:	94a03595 	.word	0x94a03595
 800f7a4:	3fcfffff 	.word	0x3fcfffff
 800f7a8:	3ff00000 	.word	0x3ff00000
 800f7ac:	7ff00000 	.word	0x7ff00000
 800f7b0:	7fe00000 	.word	0x7fe00000
 800f7b4:	7c9fffff 	.word	0x7c9fffff
 800f7b8:	3fe00000 	.word	0x3fe00000
 800f7bc:	bff00000 	.word	0xbff00000
 800f7c0:	7fefffff 	.word	0x7fefffff

0800f7c4 <_strtod_r>:
 800f7c4:	4b01      	ldr	r3, [pc, #4]	; (800f7cc <_strtod_r+0x8>)
 800f7c6:	f7ff b9f7 	b.w	800ebb8 <_strtod_l>
 800f7ca:	bf00      	nop
 800f7cc:	200001b8 	.word	0x200001b8

0800f7d0 <_strtol_l.constprop.0>:
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d6:	d001      	beq.n	800f7dc <_strtol_l.constprop.0+0xc>
 800f7d8:	2b24      	cmp	r3, #36	; 0x24
 800f7da:	d906      	bls.n	800f7ea <_strtol_l.constprop.0+0x1a>
 800f7dc:	f7fd fec2 	bl	800d564 <__errno>
 800f7e0:	2316      	movs	r3, #22
 800f7e2:	6003      	str	r3, [r0, #0]
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f8d0 <_strtol_l.constprop.0+0x100>
 800f7ee:	460d      	mov	r5, r1
 800f7f0:	462e      	mov	r6, r5
 800f7f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f7f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f7fa:	f017 0708 	ands.w	r7, r7, #8
 800f7fe:	d1f7      	bne.n	800f7f0 <_strtol_l.constprop.0+0x20>
 800f800:	2c2d      	cmp	r4, #45	; 0x2d
 800f802:	d132      	bne.n	800f86a <_strtol_l.constprop.0+0x9a>
 800f804:	782c      	ldrb	r4, [r5, #0]
 800f806:	2701      	movs	r7, #1
 800f808:	1cb5      	adds	r5, r6, #2
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d05b      	beq.n	800f8c6 <_strtol_l.constprop.0+0xf6>
 800f80e:	2b10      	cmp	r3, #16
 800f810:	d109      	bne.n	800f826 <_strtol_l.constprop.0+0x56>
 800f812:	2c30      	cmp	r4, #48	; 0x30
 800f814:	d107      	bne.n	800f826 <_strtol_l.constprop.0+0x56>
 800f816:	782c      	ldrb	r4, [r5, #0]
 800f818:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f81c:	2c58      	cmp	r4, #88	; 0x58
 800f81e:	d14d      	bne.n	800f8bc <_strtol_l.constprop.0+0xec>
 800f820:	786c      	ldrb	r4, [r5, #1]
 800f822:	2310      	movs	r3, #16
 800f824:	3502      	adds	r5, #2
 800f826:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f82a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f82e:	f04f 0c00 	mov.w	ip, #0
 800f832:	fbb8 f9f3 	udiv	r9, r8, r3
 800f836:	4666      	mov	r6, ip
 800f838:	fb03 8a19 	mls	sl, r3, r9, r8
 800f83c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f840:	f1be 0f09 	cmp.w	lr, #9
 800f844:	d816      	bhi.n	800f874 <_strtol_l.constprop.0+0xa4>
 800f846:	4674      	mov	r4, lr
 800f848:	42a3      	cmp	r3, r4
 800f84a:	dd24      	ble.n	800f896 <_strtol_l.constprop.0+0xc6>
 800f84c:	f1bc 0f00 	cmp.w	ip, #0
 800f850:	db1e      	blt.n	800f890 <_strtol_l.constprop.0+0xc0>
 800f852:	45b1      	cmp	r9, r6
 800f854:	d31c      	bcc.n	800f890 <_strtol_l.constprop.0+0xc0>
 800f856:	d101      	bne.n	800f85c <_strtol_l.constprop.0+0x8c>
 800f858:	45a2      	cmp	sl, r4
 800f85a:	db19      	blt.n	800f890 <_strtol_l.constprop.0+0xc0>
 800f85c:	fb06 4603 	mla	r6, r6, r3, r4
 800f860:	f04f 0c01 	mov.w	ip, #1
 800f864:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f868:	e7e8      	b.n	800f83c <_strtol_l.constprop.0+0x6c>
 800f86a:	2c2b      	cmp	r4, #43	; 0x2b
 800f86c:	bf04      	itt	eq
 800f86e:	782c      	ldrbeq	r4, [r5, #0]
 800f870:	1cb5      	addeq	r5, r6, #2
 800f872:	e7ca      	b.n	800f80a <_strtol_l.constprop.0+0x3a>
 800f874:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f878:	f1be 0f19 	cmp.w	lr, #25
 800f87c:	d801      	bhi.n	800f882 <_strtol_l.constprop.0+0xb2>
 800f87e:	3c37      	subs	r4, #55	; 0x37
 800f880:	e7e2      	b.n	800f848 <_strtol_l.constprop.0+0x78>
 800f882:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f886:	f1be 0f19 	cmp.w	lr, #25
 800f88a:	d804      	bhi.n	800f896 <_strtol_l.constprop.0+0xc6>
 800f88c:	3c57      	subs	r4, #87	; 0x57
 800f88e:	e7db      	b.n	800f848 <_strtol_l.constprop.0+0x78>
 800f890:	f04f 3cff 	mov.w	ip, #4294967295
 800f894:	e7e6      	b.n	800f864 <_strtol_l.constprop.0+0x94>
 800f896:	f1bc 0f00 	cmp.w	ip, #0
 800f89a:	da05      	bge.n	800f8a8 <_strtol_l.constprop.0+0xd8>
 800f89c:	2322      	movs	r3, #34	; 0x22
 800f89e:	6003      	str	r3, [r0, #0]
 800f8a0:	4646      	mov	r6, r8
 800f8a2:	b942      	cbnz	r2, 800f8b6 <_strtol_l.constprop.0+0xe6>
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	e79e      	b.n	800f7e6 <_strtol_l.constprop.0+0x16>
 800f8a8:	b107      	cbz	r7, 800f8ac <_strtol_l.constprop.0+0xdc>
 800f8aa:	4276      	negs	r6, r6
 800f8ac:	2a00      	cmp	r2, #0
 800f8ae:	d0f9      	beq.n	800f8a4 <_strtol_l.constprop.0+0xd4>
 800f8b0:	f1bc 0f00 	cmp.w	ip, #0
 800f8b4:	d000      	beq.n	800f8b8 <_strtol_l.constprop.0+0xe8>
 800f8b6:	1e69      	subs	r1, r5, #1
 800f8b8:	6011      	str	r1, [r2, #0]
 800f8ba:	e7f3      	b.n	800f8a4 <_strtol_l.constprop.0+0xd4>
 800f8bc:	2430      	movs	r4, #48	; 0x30
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1b1      	bne.n	800f826 <_strtol_l.constprop.0+0x56>
 800f8c2:	2308      	movs	r3, #8
 800f8c4:	e7af      	b.n	800f826 <_strtol_l.constprop.0+0x56>
 800f8c6:	2c30      	cmp	r4, #48	; 0x30
 800f8c8:	d0a5      	beq.n	800f816 <_strtol_l.constprop.0+0x46>
 800f8ca:	230a      	movs	r3, #10
 800f8cc:	e7ab      	b.n	800f826 <_strtol_l.constprop.0+0x56>
 800f8ce:	bf00      	nop
 800f8d0:	080169a9 	.word	0x080169a9

0800f8d4 <_strtol_r>:
 800f8d4:	f7ff bf7c 	b.w	800f7d0 <_strtol_l.constprop.0>

0800f8d8 <strtol>:
 800f8d8:	4613      	mov	r3, r2
 800f8da:	460a      	mov	r2, r1
 800f8dc:	4601      	mov	r1, r0
 800f8de:	4802      	ldr	r0, [pc, #8]	; (800f8e8 <strtol+0x10>)
 800f8e0:	6800      	ldr	r0, [r0, #0]
 800f8e2:	f7ff bf75 	b.w	800f7d0 <_strtol_l.constprop.0>
 800f8e6:	bf00      	nop
 800f8e8:	20000150 	.word	0x20000150

0800f8ec <swprintf>:
 800f8ec:	b40c      	push	{r2, r3}
 800f8ee:	b530      	push	{r4, r5, lr}
 800f8f0:	4b17      	ldr	r3, [pc, #92]	; (800f950 <swprintf+0x64>)
 800f8f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800f8f6:	681d      	ldr	r5, [r3, #0]
 800f8f8:	b09d      	sub	sp, #116	; 0x74
 800f8fa:	460c      	mov	r4, r1
 800f8fc:	d308      	bcc.n	800f910 <swprintf+0x24>
 800f8fe:	238b      	movs	r3, #139	; 0x8b
 800f900:	602b      	str	r3, [r5, #0]
 800f902:	f04f 30ff 	mov.w	r0, #4294967295
 800f906:	b01d      	add	sp, #116	; 0x74
 800f908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f90c:	b002      	add	sp, #8
 800f90e:	4770      	bx	lr
 800f910:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f914:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f918:	9002      	str	r0, [sp, #8]
 800f91a:	9006      	str	r0, [sp, #24]
 800f91c:	b1b1      	cbz	r1, 800f94c <swprintf+0x60>
 800f91e:	1e4b      	subs	r3, r1, #1
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	9304      	str	r3, [sp, #16]
 800f924:	9307      	str	r3, [sp, #28]
 800f926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f92a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f92e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f930:	ab21      	add	r3, sp, #132	; 0x84
 800f932:	a902      	add	r1, sp, #8
 800f934:	4628      	mov	r0, r5
 800f936:	9301      	str	r3, [sp, #4]
 800f938:	f002 fbaa 	bl	8012090 <_svfwprintf_r>
 800f93c:	2c00      	cmp	r4, #0
 800f93e:	d0de      	beq.n	800f8fe <swprintf+0x12>
 800f940:	9b02      	ldr	r3, [sp, #8]
 800f942:	2200      	movs	r2, #0
 800f944:	42a0      	cmp	r0, r4
 800f946:	601a      	str	r2, [r3, #0]
 800f948:	d3dd      	bcc.n	800f906 <swprintf+0x1a>
 800f94a:	e7d8      	b.n	800f8fe <swprintf+0x12>
 800f94c:	460b      	mov	r3, r1
 800f94e:	e7e8      	b.n	800f922 <swprintf+0x36>
 800f950:	20000150 	.word	0x20000150

0800f954 <__swbuf_r>:
 800f954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f956:	460e      	mov	r6, r1
 800f958:	4614      	mov	r4, r2
 800f95a:	4605      	mov	r5, r0
 800f95c:	b118      	cbz	r0, 800f966 <__swbuf_r+0x12>
 800f95e:	6983      	ldr	r3, [r0, #24]
 800f960:	b90b      	cbnz	r3, 800f966 <__swbuf_r+0x12>
 800f962:	f7fd ff1f 	bl	800d7a4 <__sinit>
 800f966:	4b21      	ldr	r3, [pc, #132]	; (800f9ec <__swbuf_r+0x98>)
 800f968:	429c      	cmp	r4, r3
 800f96a:	d12b      	bne.n	800f9c4 <__swbuf_r+0x70>
 800f96c:	686c      	ldr	r4, [r5, #4]
 800f96e:	69a3      	ldr	r3, [r4, #24]
 800f970:	60a3      	str	r3, [r4, #8]
 800f972:	89a3      	ldrh	r3, [r4, #12]
 800f974:	071a      	lsls	r2, r3, #28
 800f976:	d52f      	bpl.n	800f9d8 <__swbuf_r+0x84>
 800f978:	6923      	ldr	r3, [r4, #16]
 800f97a:	b36b      	cbz	r3, 800f9d8 <__swbuf_r+0x84>
 800f97c:	6923      	ldr	r3, [r4, #16]
 800f97e:	6820      	ldr	r0, [r4, #0]
 800f980:	1ac0      	subs	r0, r0, r3
 800f982:	6963      	ldr	r3, [r4, #20]
 800f984:	b2f6      	uxtb	r6, r6
 800f986:	4283      	cmp	r3, r0
 800f988:	4637      	mov	r7, r6
 800f98a:	dc04      	bgt.n	800f996 <__swbuf_r+0x42>
 800f98c:	4621      	mov	r1, r4
 800f98e:	4628      	mov	r0, r5
 800f990:	f7fd fe74 	bl	800d67c <_fflush_r>
 800f994:	bb30      	cbnz	r0, 800f9e4 <__swbuf_r+0x90>
 800f996:	68a3      	ldr	r3, [r4, #8]
 800f998:	3b01      	subs	r3, #1
 800f99a:	60a3      	str	r3, [r4, #8]
 800f99c:	6823      	ldr	r3, [r4, #0]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	6022      	str	r2, [r4, #0]
 800f9a2:	701e      	strb	r6, [r3, #0]
 800f9a4:	6963      	ldr	r3, [r4, #20]
 800f9a6:	3001      	adds	r0, #1
 800f9a8:	4283      	cmp	r3, r0
 800f9aa:	d004      	beq.n	800f9b6 <__swbuf_r+0x62>
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	07db      	lsls	r3, r3, #31
 800f9b0:	d506      	bpl.n	800f9c0 <__swbuf_r+0x6c>
 800f9b2:	2e0a      	cmp	r6, #10
 800f9b4:	d104      	bne.n	800f9c0 <__swbuf_r+0x6c>
 800f9b6:	4621      	mov	r1, r4
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f7fd fe5f 	bl	800d67c <_fflush_r>
 800f9be:	b988      	cbnz	r0, 800f9e4 <__swbuf_r+0x90>
 800f9c0:	4638      	mov	r0, r7
 800f9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9c4:	4b0a      	ldr	r3, [pc, #40]	; (800f9f0 <__swbuf_r+0x9c>)
 800f9c6:	429c      	cmp	r4, r3
 800f9c8:	d101      	bne.n	800f9ce <__swbuf_r+0x7a>
 800f9ca:	68ac      	ldr	r4, [r5, #8]
 800f9cc:	e7cf      	b.n	800f96e <__swbuf_r+0x1a>
 800f9ce:	4b09      	ldr	r3, [pc, #36]	; (800f9f4 <__swbuf_r+0xa0>)
 800f9d0:	429c      	cmp	r4, r3
 800f9d2:	bf08      	it	eq
 800f9d4:	68ec      	ldreq	r4, [r5, #12]
 800f9d6:	e7ca      	b.n	800f96e <__swbuf_r+0x1a>
 800f9d8:	4621      	mov	r1, r4
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f000 f81e 	bl	800fa1c <__swsetup_r>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d0cb      	beq.n	800f97c <__swbuf_r+0x28>
 800f9e4:	f04f 37ff 	mov.w	r7, #4294967295
 800f9e8:	e7ea      	b.n	800f9c0 <__swbuf_r+0x6c>
 800f9ea:	bf00      	nop
 800f9ec:	080168d4 	.word	0x080168d4
 800f9f0:	080168f4 	.word	0x080168f4
 800f9f4:	080168b4 	.word	0x080168b4

0800f9f8 <_write_r>:
 800f9f8:	b538      	push	{r3, r4, r5, lr}
 800f9fa:	4d07      	ldr	r5, [pc, #28]	; (800fa18 <_write_r+0x20>)
 800f9fc:	4604      	mov	r4, r0
 800f9fe:	4608      	mov	r0, r1
 800fa00:	4611      	mov	r1, r2
 800fa02:	2200      	movs	r2, #0
 800fa04:	602a      	str	r2, [r5, #0]
 800fa06:	461a      	mov	r2, r3
 800fa08:	f7f4 f969 	bl	8003cde <_write>
 800fa0c:	1c43      	adds	r3, r0, #1
 800fa0e:	d102      	bne.n	800fa16 <_write_r+0x1e>
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	b103      	cbz	r3, 800fa16 <_write_r+0x1e>
 800fa14:	6023      	str	r3, [r4, #0]
 800fa16:	bd38      	pop	{r3, r4, r5, pc}
 800fa18:	2000a8ac 	.word	0x2000a8ac

0800fa1c <__swsetup_r>:
 800fa1c:	4b32      	ldr	r3, [pc, #200]	; (800fae8 <__swsetup_r+0xcc>)
 800fa1e:	b570      	push	{r4, r5, r6, lr}
 800fa20:	681d      	ldr	r5, [r3, #0]
 800fa22:	4606      	mov	r6, r0
 800fa24:	460c      	mov	r4, r1
 800fa26:	b125      	cbz	r5, 800fa32 <__swsetup_r+0x16>
 800fa28:	69ab      	ldr	r3, [r5, #24]
 800fa2a:	b913      	cbnz	r3, 800fa32 <__swsetup_r+0x16>
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f7fd feb9 	bl	800d7a4 <__sinit>
 800fa32:	4b2e      	ldr	r3, [pc, #184]	; (800faec <__swsetup_r+0xd0>)
 800fa34:	429c      	cmp	r4, r3
 800fa36:	d10f      	bne.n	800fa58 <__swsetup_r+0x3c>
 800fa38:	686c      	ldr	r4, [r5, #4]
 800fa3a:	89a3      	ldrh	r3, [r4, #12]
 800fa3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa40:	0719      	lsls	r1, r3, #28
 800fa42:	d42c      	bmi.n	800fa9e <__swsetup_r+0x82>
 800fa44:	06dd      	lsls	r5, r3, #27
 800fa46:	d411      	bmi.n	800fa6c <__swsetup_r+0x50>
 800fa48:	2309      	movs	r3, #9
 800fa4a:	6033      	str	r3, [r6, #0]
 800fa4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa50:	81a3      	strh	r3, [r4, #12]
 800fa52:	f04f 30ff 	mov.w	r0, #4294967295
 800fa56:	e03e      	b.n	800fad6 <__swsetup_r+0xba>
 800fa58:	4b25      	ldr	r3, [pc, #148]	; (800faf0 <__swsetup_r+0xd4>)
 800fa5a:	429c      	cmp	r4, r3
 800fa5c:	d101      	bne.n	800fa62 <__swsetup_r+0x46>
 800fa5e:	68ac      	ldr	r4, [r5, #8]
 800fa60:	e7eb      	b.n	800fa3a <__swsetup_r+0x1e>
 800fa62:	4b24      	ldr	r3, [pc, #144]	; (800faf4 <__swsetup_r+0xd8>)
 800fa64:	429c      	cmp	r4, r3
 800fa66:	bf08      	it	eq
 800fa68:	68ec      	ldreq	r4, [r5, #12]
 800fa6a:	e7e6      	b.n	800fa3a <__swsetup_r+0x1e>
 800fa6c:	0758      	lsls	r0, r3, #29
 800fa6e:	d512      	bpl.n	800fa96 <__swsetup_r+0x7a>
 800fa70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa72:	b141      	cbz	r1, 800fa86 <__swsetup_r+0x6a>
 800fa74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa78:	4299      	cmp	r1, r3
 800fa7a:	d002      	beq.n	800fa82 <__swsetup_r+0x66>
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	f7fd ffd1 	bl	800da24 <_free_r>
 800fa82:	2300      	movs	r3, #0
 800fa84:	6363      	str	r3, [r4, #52]	; 0x34
 800fa86:	89a3      	ldrh	r3, [r4, #12]
 800fa88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fa8c:	81a3      	strh	r3, [r4, #12]
 800fa8e:	2300      	movs	r3, #0
 800fa90:	6063      	str	r3, [r4, #4]
 800fa92:	6923      	ldr	r3, [r4, #16]
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	89a3      	ldrh	r3, [r4, #12]
 800fa98:	f043 0308 	orr.w	r3, r3, #8
 800fa9c:	81a3      	strh	r3, [r4, #12]
 800fa9e:	6923      	ldr	r3, [r4, #16]
 800faa0:	b94b      	cbnz	r3, 800fab6 <__swsetup_r+0x9a>
 800faa2:	89a3      	ldrh	r3, [r4, #12]
 800faa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800faa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800faac:	d003      	beq.n	800fab6 <__swsetup_r+0x9a>
 800faae:	4621      	mov	r1, r4
 800fab0:	4630      	mov	r0, r6
 800fab2:	f7fd ff61 	bl	800d978 <__smakebuf_r>
 800fab6:	89a0      	ldrh	r0, [r4, #12]
 800fab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fabc:	f010 0301 	ands.w	r3, r0, #1
 800fac0:	d00a      	beq.n	800fad8 <__swsetup_r+0xbc>
 800fac2:	2300      	movs	r3, #0
 800fac4:	60a3      	str	r3, [r4, #8]
 800fac6:	6963      	ldr	r3, [r4, #20]
 800fac8:	425b      	negs	r3, r3
 800faca:	61a3      	str	r3, [r4, #24]
 800facc:	6923      	ldr	r3, [r4, #16]
 800face:	b943      	cbnz	r3, 800fae2 <__swsetup_r+0xc6>
 800fad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fad4:	d1ba      	bne.n	800fa4c <__swsetup_r+0x30>
 800fad6:	bd70      	pop	{r4, r5, r6, pc}
 800fad8:	0781      	lsls	r1, r0, #30
 800fada:	bf58      	it	pl
 800fadc:	6963      	ldrpl	r3, [r4, #20]
 800fade:	60a3      	str	r3, [r4, #8]
 800fae0:	e7f4      	b.n	800facc <__swsetup_r+0xb0>
 800fae2:	2000      	movs	r0, #0
 800fae4:	e7f7      	b.n	800fad6 <__swsetup_r+0xba>
 800fae6:	bf00      	nop
 800fae8:	20000150 	.word	0x20000150
 800faec:	080168d4 	.word	0x080168d4
 800faf0:	080168f4 	.word	0x080168f4
 800faf4:	080168b4 	.word	0x080168b4

0800faf8 <_close_r>:
 800faf8:	b538      	push	{r3, r4, r5, lr}
 800fafa:	4d06      	ldr	r5, [pc, #24]	; (800fb14 <_close_r+0x1c>)
 800fafc:	2300      	movs	r3, #0
 800fafe:	4604      	mov	r4, r0
 800fb00:	4608      	mov	r0, r1
 800fb02:	602b      	str	r3, [r5, #0]
 800fb04:	f7f4 f907 	bl	8003d16 <_close>
 800fb08:	1c43      	adds	r3, r0, #1
 800fb0a:	d102      	bne.n	800fb12 <_close_r+0x1a>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	b103      	cbz	r3, 800fb12 <_close_r+0x1a>
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	bd38      	pop	{r3, r4, r5, pc}
 800fb14:	2000a8ac 	.word	0x2000a8ac

0800fb18 <quorem>:
 800fb18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	6903      	ldr	r3, [r0, #16]
 800fb1e:	690c      	ldr	r4, [r1, #16]
 800fb20:	42a3      	cmp	r3, r4
 800fb22:	4607      	mov	r7, r0
 800fb24:	f2c0 8081 	blt.w	800fc2a <quorem+0x112>
 800fb28:	3c01      	subs	r4, #1
 800fb2a:	f101 0814 	add.w	r8, r1, #20
 800fb2e:	f100 0514 	add.w	r5, r0, #20
 800fb32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb40:	3301      	adds	r3, #1
 800fb42:	429a      	cmp	r2, r3
 800fb44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb50:	d331      	bcc.n	800fbb6 <quorem+0x9e>
 800fb52:	f04f 0e00 	mov.w	lr, #0
 800fb56:	4640      	mov	r0, r8
 800fb58:	46ac      	mov	ip, r5
 800fb5a:	46f2      	mov	sl, lr
 800fb5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb60:	b293      	uxth	r3, r2
 800fb62:	fb06 e303 	mla	r3, r6, r3, lr
 800fb66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	ebaa 0303 	sub.w	r3, sl, r3
 800fb70:	f8dc a000 	ldr.w	sl, [ip]
 800fb74:	0c12      	lsrs	r2, r2, #16
 800fb76:	fa13 f38a 	uxtah	r3, r3, sl
 800fb7a:	fb06 e202 	mla	r2, r6, r2, lr
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	9b00      	ldr	r3, [sp, #0]
 800fb82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb86:	b292      	uxth	r2, r2
 800fb88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fb8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fb90:	f8bd 3000 	ldrh.w	r3, [sp]
 800fb94:	4581      	cmp	r9, r0
 800fb96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb9a:	f84c 3b04 	str.w	r3, [ip], #4
 800fb9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fba2:	d2db      	bcs.n	800fb5c <quorem+0x44>
 800fba4:	f855 300b 	ldr.w	r3, [r5, fp]
 800fba8:	b92b      	cbnz	r3, 800fbb6 <quorem+0x9e>
 800fbaa:	9b01      	ldr	r3, [sp, #4]
 800fbac:	3b04      	subs	r3, #4
 800fbae:	429d      	cmp	r5, r3
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	d32e      	bcc.n	800fc12 <quorem+0xfa>
 800fbb4:	613c      	str	r4, [r7, #16]
 800fbb6:	4638      	mov	r0, r7
 800fbb8:	f001 fcc2 	bl	8011540 <__mcmp>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	db24      	blt.n	800fc0a <quorem+0xf2>
 800fbc0:	3601      	adds	r6, #1
 800fbc2:	4628      	mov	r0, r5
 800fbc4:	f04f 0c00 	mov.w	ip, #0
 800fbc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbcc:	f8d0 e000 	ldr.w	lr, [r0]
 800fbd0:	b293      	uxth	r3, r2
 800fbd2:	ebac 0303 	sub.w	r3, ip, r3
 800fbd6:	0c12      	lsrs	r2, r2, #16
 800fbd8:	fa13 f38e 	uxtah	r3, r3, lr
 800fbdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fbe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbea:	45c1      	cmp	r9, r8
 800fbec:	f840 3b04 	str.w	r3, [r0], #4
 800fbf0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fbf4:	d2e8      	bcs.n	800fbc8 <quorem+0xb0>
 800fbf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbfe:	b922      	cbnz	r2, 800fc0a <quorem+0xf2>
 800fc00:	3b04      	subs	r3, #4
 800fc02:	429d      	cmp	r5, r3
 800fc04:	461a      	mov	r2, r3
 800fc06:	d30a      	bcc.n	800fc1e <quorem+0x106>
 800fc08:	613c      	str	r4, [r7, #16]
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	b003      	add	sp, #12
 800fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc12:	6812      	ldr	r2, [r2, #0]
 800fc14:	3b04      	subs	r3, #4
 800fc16:	2a00      	cmp	r2, #0
 800fc18:	d1cc      	bne.n	800fbb4 <quorem+0x9c>
 800fc1a:	3c01      	subs	r4, #1
 800fc1c:	e7c7      	b.n	800fbae <quorem+0x96>
 800fc1e:	6812      	ldr	r2, [r2, #0]
 800fc20:	3b04      	subs	r3, #4
 800fc22:	2a00      	cmp	r2, #0
 800fc24:	d1f0      	bne.n	800fc08 <quorem+0xf0>
 800fc26:	3c01      	subs	r4, #1
 800fc28:	e7eb      	b.n	800fc02 <quorem+0xea>
 800fc2a:	2000      	movs	r0, #0
 800fc2c:	e7ee      	b.n	800fc0c <quorem+0xf4>
	...

0800fc30 <_dtoa_r>:
 800fc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc34:	ed2d 8b04 	vpush	{d8-d9}
 800fc38:	ec57 6b10 	vmov	r6, r7, d0
 800fc3c:	b093      	sub	sp, #76	; 0x4c
 800fc3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fc40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc44:	9106      	str	r1, [sp, #24]
 800fc46:	ee10 aa10 	vmov	sl, s0
 800fc4a:	4604      	mov	r4, r0
 800fc4c:	9209      	str	r2, [sp, #36]	; 0x24
 800fc4e:	930c      	str	r3, [sp, #48]	; 0x30
 800fc50:	46bb      	mov	fp, r7
 800fc52:	b975      	cbnz	r5, 800fc72 <_dtoa_r+0x42>
 800fc54:	2010      	movs	r0, #16
 800fc56:	f001 f981 	bl	8010f5c <malloc>
 800fc5a:	4602      	mov	r2, r0
 800fc5c:	6260      	str	r0, [r4, #36]	; 0x24
 800fc5e:	b920      	cbnz	r0, 800fc6a <_dtoa_r+0x3a>
 800fc60:	4ba7      	ldr	r3, [pc, #668]	; (800ff00 <_dtoa_r+0x2d0>)
 800fc62:	21ea      	movs	r1, #234	; 0xea
 800fc64:	48a7      	ldr	r0, [pc, #668]	; (800ff04 <_dtoa_r+0x2d4>)
 800fc66:	f002 ffb3 	bl	8012bd0 <__assert_func>
 800fc6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc6e:	6005      	str	r5, [r0, #0]
 800fc70:	60c5      	str	r5, [r0, #12]
 800fc72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc74:	6819      	ldr	r1, [r3, #0]
 800fc76:	b151      	cbz	r1, 800fc8e <_dtoa_r+0x5e>
 800fc78:	685a      	ldr	r2, [r3, #4]
 800fc7a:	604a      	str	r2, [r1, #4]
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	4093      	lsls	r3, r2
 800fc80:	608b      	str	r3, [r1, #8]
 800fc82:	4620      	mov	r0, r4
 800fc84:	f001 f9d0 	bl	8011028 <_Bfree>
 800fc88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	601a      	str	r2, [r3, #0]
 800fc8e:	1e3b      	subs	r3, r7, #0
 800fc90:	bfaa      	itet	ge
 800fc92:	2300      	movge	r3, #0
 800fc94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fc98:	f8c8 3000 	strge.w	r3, [r8]
 800fc9c:	4b9a      	ldr	r3, [pc, #616]	; (800ff08 <_dtoa_r+0x2d8>)
 800fc9e:	bfbc      	itt	lt
 800fca0:	2201      	movlt	r2, #1
 800fca2:	f8c8 2000 	strlt.w	r2, [r8]
 800fca6:	ea33 030b 	bics.w	r3, r3, fp
 800fcaa:	d11b      	bne.n	800fce4 <_dtoa_r+0xb4>
 800fcac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcae:	f242 730f 	movw	r3, #9999	; 0x270f
 800fcb2:	6013      	str	r3, [r2, #0]
 800fcb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fcb8:	4333      	orrs	r3, r6
 800fcba:	f000 8592 	beq.w	80107e2 <_dtoa_r+0xbb2>
 800fcbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcc0:	b963      	cbnz	r3, 800fcdc <_dtoa_r+0xac>
 800fcc2:	4b92      	ldr	r3, [pc, #584]	; (800ff0c <_dtoa_r+0x2dc>)
 800fcc4:	e022      	b.n	800fd0c <_dtoa_r+0xdc>
 800fcc6:	4b92      	ldr	r3, [pc, #584]	; (800ff10 <_dtoa_r+0x2e0>)
 800fcc8:	9301      	str	r3, [sp, #4]
 800fcca:	3308      	adds	r3, #8
 800fccc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcce:	6013      	str	r3, [r2, #0]
 800fcd0:	9801      	ldr	r0, [sp, #4]
 800fcd2:	b013      	add	sp, #76	; 0x4c
 800fcd4:	ecbd 8b04 	vpop	{d8-d9}
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcdc:	4b8b      	ldr	r3, [pc, #556]	; (800ff0c <_dtoa_r+0x2dc>)
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	3303      	adds	r3, #3
 800fce2:	e7f3      	b.n	800fccc <_dtoa_r+0x9c>
 800fce4:	2200      	movs	r2, #0
 800fce6:	2300      	movs	r3, #0
 800fce8:	4650      	mov	r0, sl
 800fcea:	4659      	mov	r1, fp
 800fcec:	f7f0 fefc 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcf0:	ec4b ab19 	vmov	d9, sl, fp
 800fcf4:	4680      	mov	r8, r0
 800fcf6:	b158      	cbz	r0, 800fd10 <_dtoa_r+0xe0>
 800fcf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	6013      	str	r3, [r2, #0]
 800fcfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f000 856b 	beq.w	80107dc <_dtoa_r+0xbac>
 800fd06:	4883      	ldr	r0, [pc, #524]	; (800ff14 <_dtoa_r+0x2e4>)
 800fd08:	6018      	str	r0, [r3, #0]
 800fd0a:	1e43      	subs	r3, r0, #1
 800fd0c:	9301      	str	r3, [sp, #4]
 800fd0e:	e7df      	b.n	800fcd0 <_dtoa_r+0xa0>
 800fd10:	ec4b ab10 	vmov	d0, sl, fp
 800fd14:	aa10      	add	r2, sp, #64	; 0x40
 800fd16:	a911      	add	r1, sp, #68	; 0x44
 800fd18:	4620      	mov	r0, r4
 800fd1a:	f001 fd33 	bl	8011784 <__d2b>
 800fd1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fd22:	ee08 0a10 	vmov	s16, r0
 800fd26:	2d00      	cmp	r5, #0
 800fd28:	f000 8084 	beq.w	800fe34 <_dtoa_r+0x204>
 800fd2c:	ee19 3a90 	vmov	r3, s19
 800fd30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fd38:	4656      	mov	r6, sl
 800fd3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fd3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fd46:	4b74      	ldr	r3, [pc, #464]	; (800ff18 <_dtoa_r+0x2e8>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 faab 	bl	80002a8 <__aeabi_dsub>
 800fd52:	a365      	add	r3, pc, #404	; (adr r3, 800fee8 <_dtoa_r+0x2b8>)
 800fd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd58:	f7f0 fc5e 	bl	8000618 <__aeabi_dmul>
 800fd5c:	a364      	add	r3, pc, #400	; (adr r3, 800fef0 <_dtoa_r+0x2c0>)
 800fd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd62:	f7f0 faa3 	bl	80002ac <__adddf3>
 800fd66:	4606      	mov	r6, r0
 800fd68:	4628      	mov	r0, r5
 800fd6a:	460f      	mov	r7, r1
 800fd6c:	f7f0 fbea 	bl	8000544 <__aeabi_i2d>
 800fd70:	a361      	add	r3, pc, #388	; (adr r3, 800fef8 <_dtoa_r+0x2c8>)
 800fd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd76:	f7f0 fc4f 	bl	8000618 <__aeabi_dmul>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4630      	mov	r0, r6
 800fd80:	4639      	mov	r1, r7
 800fd82:	f7f0 fa93 	bl	80002ac <__adddf3>
 800fd86:	4606      	mov	r6, r0
 800fd88:	460f      	mov	r7, r1
 800fd8a:	f7f0 fef5 	bl	8000b78 <__aeabi_d2iz>
 800fd8e:	2200      	movs	r2, #0
 800fd90:	9000      	str	r0, [sp, #0]
 800fd92:	2300      	movs	r3, #0
 800fd94:	4630      	mov	r0, r6
 800fd96:	4639      	mov	r1, r7
 800fd98:	f7f0 feb0 	bl	8000afc <__aeabi_dcmplt>
 800fd9c:	b150      	cbz	r0, 800fdb4 <_dtoa_r+0x184>
 800fd9e:	9800      	ldr	r0, [sp, #0]
 800fda0:	f7f0 fbd0 	bl	8000544 <__aeabi_i2d>
 800fda4:	4632      	mov	r2, r6
 800fda6:	463b      	mov	r3, r7
 800fda8:	f7f0 fe9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdac:	b910      	cbnz	r0, 800fdb4 <_dtoa_r+0x184>
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	3b01      	subs	r3, #1
 800fdb2:	9300      	str	r3, [sp, #0]
 800fdb4:	9b00      	ldr	r3, [sp, #0]
 800fdb6:	2b16      	cmp	r3, #22
 800fdb8:	d85a      	bhi.n	800fe70 <_dtoa_r+0x240>
 800fdba:	9a00      	ldr	r2, [sp, #0]
 800fdbc:	4b57      	ldr	r3, [pc, #348]	; (800ff1c <_dtoa_r+0x2ec>)
 800fdbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdc6:	ec51 0b19 	vmov	r0, r1, d9
 800fdca:	f7f0 fe97 	bl	8000afc <__aeabi_dcmplt>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d050      	beq.n	800fe74 <_dtoa_r+0x244>
 800fdd2:	9b00      	ldr	r3, [sp, #0]
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	2300      	movs	r3, #0
 800fdda:	930b      	str	r3, [sp, #44]	; 0x2c
 800fddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdde:	1b5d      	subs	r5, r3, r5
 800fde0:	1e6b      	subs	r3, r5, #1
 800fde2:	9305      	str	r3, [sp, #20]
 800fde4:	bf45      	ittet	mi
 800fde6:	f1c5 0301 	rsbmi	r3, r5, #1
 800fdea:	9304      	strmi	r3, [sp, #16]
 800fdec:	2300      	movpl	r3, #0
 800fdee:	2300      	movmi	r3, #0
 800fdf0:	bf4c      	ite	mi
 800fdf2:	9305      	strmi	r3, [sp, #20]
 800fdf4:	9304      	strpl	r3, [sp, #16]
 800fdf6:	9b00      	ldr	r3, [sp, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	db3d      	blt.n	800fe78 <_dtoa_r+0x248>
 800fdfc:	9b05      	ldr	r3, [sp, #20]
 800fdfe:	9a00      	ldr	r2, [sp, #0]
 800fe00:	920a      	str	r2, [sp, #40]	; 0x28
 800fe02:	4413      	add	r3, r2
 800fe04:	9305      	str	r3, [sp, #20]
 800fe06:	2300      	movs	r3, #0
 800fe08:	9307      	str	r3, [sp, #28]
 800fe0a:	9b06      	ldr	r3, [sp, #24]
 800fe0c:	2b09      	cmp	r3, #9
 800fe0e:	f200 8089 	bhi.w	800ff24 <_dtoa_r+0x2f4>
 800fe12:	2b05      	cmp	r3, #5
 800fe14:	bfc4      	itt	gt
 800fe16:	3b04      	subgt	r3, #4
 800fe18:	9306      	strgt	r3, [sp, #24]
 800fe1a:	9b06      	ldr	r3, [sp, #24]
 800fe1c:	f1a3 0302 	sub.w	r3, r3, #2
 800fe20:	bfcc      	ite	gt
 800fe22:	2500      	movgt	r5, #0
 800fe24:	2501      	movle	r5, #1
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	f200 8087 	bhi.w	800ff3a <_dtoa_r+0x30a>
 800fe2c:	e8df f003 	tbb	[pc, r3]
 800fe30:	59383a2d 	.word	0x59383a2d
 800fe34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fe38:	441d      	add	r5, r3
 800fe3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe3e:	2b20      	cmp	r3, #32
 800fe40:	bfc1      	itttt	gt
 800fe42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fe4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800fe4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fe52:	bfda      	itte	le
 800fe54:	f1c3 0320 	rsble	r3, r3, #32
 800fe58:	fa06 f003 	lslle.w	r0, r6, r3
 800fe5c:	4318      	orrgt	r0, r3
 800fe5e:	f7f0 fb61 	bl	8000524 <__aeabi_ui2d>
 800fe62:	2301      	movs	r3, #1
 800fe64:	4606      	mov	r6, r0
 800fe66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fe6a:	3d01      	subs	r5, #1
 800fe6c:	930e      	str	r3, [sp, #56]	; 0x38
 800fe6e:	e76a      	b.n	800fd46 <_dtoa_r+0x116>
 800fe70:	2301      	movs	r3, #1
 800fe72:	e7b2      	b.n	800fdda <_dtoa_r+0x1aa>
 800fe74:	900b      	str	r0, [sp, #44]	; 0x2c
 800fe76:	e7b1      	b.n	800fddc <_dtoa_r+0x1ac>
 800fe78:	9b04      	ldr	r3, [sp, #16]
 800fe7a:	9a00      	ldr	r2, [sp, #0]
 800fe7c:	1a9b      	subs	r3, r3, r2
 800fe7e:	9304      	str	r3, [sp, #16]
 800fe80:	4253      	negs	r3, r2
 800fe82:	9307      	str	r3, [sp, #28]
 800fe84:	2300      	movs	r3, #0
 800fe86:	930a      	str	r3, [sp, #40]	; 0x28
 800fe88:	e7bf      	b.n	800fe0a <_dtoa_r+0x1da>
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	9308      	str	r3, [sp, #32]
 800fe8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	dc55      	bgt.n	800ff40 <_dtoa_r+0x310>
 800fe94:	2301      	movs	r3, #1
 800fe96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	9209      	str	r2, [sp, #36]	; 0x24
 800fe9e:	e00c      	b.n	800feba <_dtoa_r+0x28a>
 800fea0:	2301      	movs	r3, #1
 800fea2:	e7f3      	b.n	800fe8c <_dtoa_r+0x25c>
 800fea4:	2300      	movs	r3, #0
 800fea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fea8:	9308      	str	r3, [sp, #32]
 800feaa:	9b00      	ldr	r3, [sp, #0]
 800feac:	4413      	add	r3, r2
 800feae:	9302      	str	r3, [sp, #8]
 800feb0:	3301      	adds	r3, #1
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	9303      	str	r3, [sp, #12]
 800feb6:	bfb8      	it	lt
 800feb8:	2301      	movlt	r3, #1
 800feba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800febc:	2200      	movs	r2, #0
 800febe:	6042      	str	r2, [r0, #4]
 800fec0:	2204      	movs	r2, #4
 800fec2:	f102 0614 	add.w	r6, r2, #20
 800fec6:	429e      	cmp	r6, r3
 800fec8:	6841      	ldr	r1, [r0, #4]
 800feca:	d93d      	bls.n	800ff48 <_dtoa_r+0x318>
 800fecc:	4620      	mov	r0, r4
 800fece:	f001 f86b 	bl	8010fa8 <_Balloc>
 800fed2:	9001      	str	r0, [sp, #4]
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d13b      	bne.n	800ff50 <_dtoa_r+0x320>
 800fed8:	4b11      	ldr	r3, [pc, #68]	; (800ff20 <_dtoa_r+0x2f0>)
 800feda:	4602      	mov	r2, r0
 800fedc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fee0:	e6c0      	b.n	800fc64 <_dtoa_r+0x34>
 800fee2:	2301      	movs	r3, #1
 800fee4:	e7df      	b.n	800fea6 <_dtoa_r+0x276>
 800fee6:	bf00      	nop
 800fee8:	636f4361 	.word	0x636f4361
 800feec:	3fd287a7 	.word	0x3fd287a7
 800fef0:	8b60c8b3 	.word	0x8b60c8b3
 800fef4:	3fc68a28 	.word	0x3fc68a28
 800fef8:	509f79fb 	.word	0x509f79fb
 800fefc:	3fd34413 	.word	0x3fd34413
 800ff00:	08016ab6 	.word	0x08016ab6
 800ff04:	08016acd 	.word	0x08016acd
 800ff08:	7ff00000 	.word	0x7ff00000
 800ff0c:	08016ab2 	.word	0x08016ab2
 800ff10:	08016aa9 	.word	0x08016aa9
 800ff14:	08016929 	.word	0x08016929
 800ff18:	3ff80000 	.word	0x3ff80000
 800ff1c:	08016c38 	.word	0x08016c38
 800ff20:	08016b28 	.word	0x08016b28
 800ff24:	2501      	movs	r5, #1
 800ff26:	2300      	movs	r3, #0
 800ff28:	9306      	str	r3, [sp, #24]
 800ff2a:	9508      	str	r5, [sp, #32]
 800ff2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff34:	2200      	movs	r2, #0
 800ff36:	2312      	movs	r3, #18
 800ff38:	e7b0      	b.n	800fe9c <_dtoa_r+0x26c>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	9308      	str	r3, [sp, #32]
 800ff3e:	e7f5      	b.n	800ff2c <_dtoa_r+0x2fc>
 800ff40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ff46:	e7b8      	b.n	800feba <_dtoa_r+0x28a>
 800ff48:	3101      	adds	r1, #1
 800ff4a:	6041      	str	r1, [r0, #4]
 800ff4c:	0052      	lsls	r2, r2, #1
 800ff4e:	e7b8      	b.n	800fec2 <_dtoa_r+0x292>
 800ff50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff52:	9a01      	ldr	r2, [sp, #4]
 800ff54:	601a      	str	r2, [r3, #0]
 800ff56:	9b03      	ldr	r3, [sp, #12]
 800ff58:	2b0e      	cmp	r3, #14
 800ff5a:	f200 809d 	bhi.w	8010098 <_dtoa_r+0x468>
 800ff5e:	2d00      	cmp	r5, #0
 800ff60:	f000 809a 	beq.w	8010098 <_dtoa_r+0x468>
 800ff64:	9b00      	ldr	r3, [sp, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	dd32      	ble.n	800ffd0 <_dtoa_r+0x3a0>
 800ff6a:	4ab7      	ldr	r2, [pc, #732]	; (8010248 <_dtoa_r+0x618>)
 800ff6c:	f003 030f 	and.w	r3, r3, #15
 800ff70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ff74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ff78:	9b00      	ldr	r3, [sp, #0]
 800ff7a:	05d8      	lsls	r0, r3, #23
 800ff7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ff80:	d516      	bpl.n	800ffb0 <_dtoa_r+0x380>
 800ff82:	4bb2      	ldr	r3, [pc, #712]	; (801024c <_dtoa_r+0x61c>)
 800ff84:	ec51 0b19 	vmov	r0, r1, d9
 800ff88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ff8c:	f7f0 fc6e 	bl	800086c <__aeabi_ddiv>
 800ff90:	f007 070f 	and.w	r7, r7, #15
 800ff94:	4682      	mov	sl, r0
 800ff96:	468b      	mov	fp, r1
 800ff98:	2503      	movs	r5, #3
 800ff9a:	4eac      	ldr	r6, [pc, #688]	; (801024c <_dtoa_r+0x61c>)
 800ff9c:	b957      	cbnz	r7, 800ffb4 <_dtoa_r+0x384>
 800ff9e:	4642      	mov	r2, r8
 800ffa0:	464b      	mov	r3, r9
 800ffa2:	4650      	mov	r0, sl
 800ffa4:	4659      	mov	r1, fp
 800ffa6:	f7f0 fc61 	bl	800086c <__aeabi_ddiv>
 800ffaa:	4682      	mov	sl, r0
 800ffac:	468b      	mov	fp, r1
 800ffae:	e028      	b.n	8010002 <_dtoa_r+0x3d2>
 800ffb0:	2502      	movs	r5, #2
 800ffb2:	e7f2      	b.n	800ff9a <_dtoa_r+0x36a>
 800ffb4:	07f9      	lsls	r1, r7, #31
 800ffb6:	d508      	bpl.n	800ffca <_dtoa_r+0x39a>
 800ffb8:	4640      	mov	r0, r8
 800ffba:	4649      	mov	r1, r9
 800ffbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ffc0:	f7f0 fb2a 	bl	8000618 <__aeabi_dmul>
 800ffc4:	3501      	adds	r5, #1
 800ffc6:	4680      	mov	r8, r0
 800ffc8:	4689      	mov	r9, r1
 800ffca:	107f      	asrs	r7, r7, #1
 800ffcc:	3608      	adds	r6, #8
 800ffce:	e7e5      	b.n	800ff9c <_dtoa_r+0x36c>
 800ffd0:	f000 809b 	beq.w	801010a <_dtoa_r+0x4da>
 800ffd4:	9b00      	ldr	r3, [sp, #0]
 800ffd6:	4f9d      	ldr	r7, [pc, #628]	; (801024c <_dtoa_r+0x61c>)
 800ffd8:	425e      	negs	r6, r3
 800ffda:	4b9b      	ldr	r3, [pc, #620]	; (8010248 <_dtoa_r+0x618>)
 800ffdc:	f006 020f 	and.w	r2, r6, #15
 800ffe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ffe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe8:	ec51 0b19 	vmov	r0, r1, d9
 800ffec:	f7f0 fb14 	bl	8000618 <__aeabi_dmul>
 800fff0:	1136      	asrs	r6, r6, #4
 800fff2:	4682      	mov	sl, r0
 800fff4:	468b      	mov	fp, r1
 800fff6:	2300      	movs	r3, #0
 800fff8:	2502      	movs	r5, #2
 800fffa:	2e00      	cmp	r6, #0
 800fffc:	d17a      	bne.n	80100f4 <_dtoa_r+0x4c4>
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d1d3      	bne.n	800ffaa <_dtoa_r+0x37a>
 8010002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010004:	2b00      	cmp	r3, #0
 8010006:	f000 8082 	beq.w	801010e <_dtoa_r+0x4de>
 801000a:	4b91      	ldr	r3, [pc, #580]	; (8010250 <_dtoa_r+0x620>)
 801000c:	2200      	movs	r2, #0
 801000e:	4650      	mov	r0, sl
 8010010:	4659      	mov	r1, fp
 8010012:	f7f0 fd73 	bl	8000afc <__aeabi_dcmplt>
 8010016:	2800      	cmp	r0, #0
 8010018:	d079      	beq.n	801010e <_dtoa_r+0x4de>
 801001a:	9b03      	ldr	r3, [sp, #12]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d076      	beq.n	801010e <_dtoa_r+0x4de>
 8010020:	9b02      	ldr	r3, [sp, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	dd36      	ble.n	8010094 <_dtoa_r+0x464>
 8010026:	9b00      	ldr	r3, [sp, #0]
 8010028:	4650      	mov	r0, sl
 801002a:	4659      	mov	r1, fp
 801002c:	1e5f      	subs	r7, r3, #1
 801002e:	2200      	movs	r2, #0
 8010030:	4b88      	ldr	r3, [pc, #544]	; (8010254 <_dtoa_r+0x624>)
 8010032:	f7f0 faf1 	bl	8000618 <__aeabi_dmul>
 8010036:	9e02      	ldr	r6, [sp, #8]
 8010038:	4682      	mov	sl, r0
 801003a:	468b      	mov	fp, r1
 801003c:	3501      	adds	r5, #1
 801003e:	4628      	mov	r0, r5
 8010040:	f7f0 fa80 	bl	8000544 <__aeabi_i2d>
 8010044:	4652      	mov	r2, sl
 8010046:	465b      	mov	r3, fp
 8010048:	f7f0 fae6 	bl	8000618 <__aeabi_dmul>
 801004c:	4b82      	ldr	r3, [pc, #520]	; (8010258 <_dtoa_r+0x628>)
 801004e:	2200      	movs	r2, #0
 8010050:	f7f0 f92c 	bl	80002ac <__adddf3>
 8010054:	46d0      	mov	r8, sl
 8010056:	46d9      	mov	r9, fp
 8010058:	4682      	mov	sl, r0
 801005a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801005e:	2e00      	cmp	r6, #0
 8010060:	d158      	bne.n	8010114 <_dtoa_r+0x4e4>
 8010062:	4b7e      	ldr	r3, [pc, #504]	; (801025c <_dtoa_r+0x62c>)
 8010064:	2200      	movs	r2, #0
 8010066:	4640      	mov	r0, r8
 8010068:	4649      	mov	r1, r9
 801006a:	f7f0 f91d 	bl	80002a8 <__aeabi_dsub>
 801006e:	4652      	mov	r2, sl
 8010070:	465b      	mov	r3, fp
 8010072:	4680      	mov	r8, r0
 8010074:	4689      	mov	r9, r1
 8010076:	f7f0 fd5f 	bl	8000b38 <__aeabi_dcmpgt>
 801007a:	2800      	cmp	r0, #0
 801007c:	f040 8295 	bne.w	80105aa <_dtoa_r+0x97a>
 8010080:	4652      	mov	r2, sl
 8010082:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010086:	4640      	mov	r0, r8
 8010088:	4649      	mov	r1, r9
 801008a:	f7f0 fd37 	bl	8000afc <__aeabi_dcmplt>
 801008e:	2800      	cmp	r0, #0
 8010090:	f040 8289 	bne.w	80105a6 <_dtoa_r+0x976>
 8010094:	ec5b ab19 	vmov	sl, fp, d9
 8010098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801009a:	2b00      	cmp	r3, #0
 801009c:	f2c0 8148 	blt.w	8010330 <_dtoa_r+0x700>
 80100a0:	9a00      	ldr	r2, [sp, #0]
 80100a2:	2a0e      	cmp	r2, #14
 80100a4:	f300 8144 	bgt.w	8010330 <_dtoa_r+0x700>
 80100a8:	4b67      	ldr	r3, [pc, #412]	; (8010248 <_dtoa_r+0x618>)
 80100aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f280 80d5 	bge.w	8010264 <_dtoa_r+0x634>
 80100ba:	9b03      	ldr	r3, [sp, #12]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	f300 80d1 	bgt.w	8010264 <_dtoa_r+0x634>
 80100c2:	f040 826f 	bne.w	80105a4 <_dtoa_r+0x974>
 80100c6:	4b65      	ldr	r3, [pc, #404]	; (801025c <_dtoa_r+0x62c>)
 80100c8:	2200      	movs	r2, #0
 80100ca:	4640      	mov	r0, r8
 80100cc:	4649      	mov	r1, r9
 80100ce:	f7f0 faa3 	bl	8000618 <__aeabi_dmul>
 80100d2:	4652      	mov	r2, sl
 80100d4:	465b      	mov	r3, fp
 80100d6:	f7f0 fd25 	bl	8000b24 <__aeabi_dcmpge>
 80100da:	9e03      	ldr	r6, [sp, #12]
 80100dc:	4637      	mov	r7, r6
 80100de:	2800      	cmp	r0, #0
 80100e0:	f040 8245 	bne.w	801056e <_dtoa_r+0x93e>
 80100e4:	9d01      	ldr	r5, [sp, #4]
 80100e6:	2331      	movs	r3, #49	; 0x31
 80100e8:	f805 3b01 	strb.w	r3, [r5], #1
 80100ec:	9b00      	ldr	r3, [sp, #0]
 80100ee:	3301      	adds	r3, #1
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	e240      	b.n	8010576 <_dtoa_r+0x946>
 80100f4:	07f2      	lsls	r2, r6, #31
 80100f6:	d505      	bpl.n	8010104 <_dtoa_r+0x4d4>
 80100f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100fc:	f7f0 fa8c 	bl	8000618 <__aeabi_dmul>
 8010100:	3501      	adds	r5, #1
 8010102:	2301      	movs	r3, #1
 8010104:	1076      	asrs	r6, r6, #1
 8010106:	3708      	adds	r7, #8
 8010108:	e777      	b.n	800fffa <_dtoa_r+0x3ca>
 801010a:	2502      	movs	r5, #2
 801010c:	e779      	b.n	8010002 <_dtoa_r+0x3d2>
 801010e:	9f00      	ldr	r7, [sp, #0]
 8010110:	9e03      	ldr	r6, [sp, #12]
 8010112:	e794      	b.n	801003e <_dtoa_r+0x40e>
 8010114:	9901      	ldr	r1, [sp, #4]
 8010116:	4b4c      	ldr	r3, [pc, #304]	; (8010248 <_dtoa_r+0x618>)
 8010118:	4431      	add	r1, r6
 801011a:	910d      	str	r1, [sp, #52]	; 0x34
 801011c:	9908      	ldr	r1, [sp, #32]
 801011e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010126:	2900      	cmp	r1, #0
 8010128:	d043      	beq.n	80101b2 <_dtoa_r+0x582>
 801012a:	494d      	ldr	r1, [pc, #308]	; (8010260 <_dtoa_r+0x630>)
 801012c:	2000      	movs	r0, #0
 801012e:	f7f0 fb9d 	bl	800086c <__aeabi_ddiv>
 8010132:	4652      	mov	r2, sl
 8010134:	465b      	mov	r3, fp
 8010136:	f7f0 f8b7 	bl	80002a8 <__aeabi_dsub>
 801013a:	9d01      	ldr	r5, [sp, #4]
 801013c:	4682      	mov	sl, r0
 801013e:	468b      	mov	fp, r1
 8010140:	4649      	mov	r1, r9
 8010142:	4640      	mov	r0, r8
 8010144:	f7f0 fd18 	bl	8000b78 <__aeabi_d2iz>
 8010148:	4606      	mov	r6, r0
 801014a:	f7f0 f9fb 	bl	8000544 <__aeabi_i2d>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	4640      	mov	r0, r8
 8010154:	4649      	mov	r1, r9
 8010156:	f7f0 f8a7 	bl	80002a8 <__aeabi_dsub>
 801015a:	3630      	adds	r6, #48	; 0x30
 801015c:	f805 6b01 	strb.w	r6, [r5], #1
 8010160:	4652      	mov	r2, sl
 8010162:	465b      	mov	r3, fp
 8010164:	4680      	mov	r8, r0
 8010166:	4689      	mov	r9, r1
 8010168:	f7f0 fcc8 	bl	8000afc <__aeabi_dcmplt>
 801016c:	2800      	cmp	r0, #0
 801016e:	d163      	bne.n	8010238 <_dtoa_r+0x608>
 8010170:	4642      	mov	r2, r8
 8010172:	464b      	mov	r3, r9
 8010174:	4936      	ldr	r1, [pc, #216]	; (8010250 <_dtoa_r+0x620>)
 8010176:	2000      	movs	r0, #0
 8010178:	f7f0 f896 	bl	80002a8 <__aeabi_dsub>
 801017c:	4652      	mov	r2, sl
 801017e:	465b      	mov	r3, fp
 8010180:	f7f0 fcbc 	bl	8000afc <__aeabi_dcmplt>
 8010184:	2800      	cmp	r0, #0
 8010186:	f040 80b5 	bne.w	80102f4 <_dtoa_r+0x6c4>
 801018a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801018c:	429d      	cmp	r5, r3
 801018e:	d081      	beq.n	8010094 <_dtoa_r+0x464>
 8010190:	4b30      	ldr	r3, [pc, #192]	; (8010254 <_dtoa_r+0x624>)
 8010192:	2200      	movs	r2, #0
 8010194:	4650      	mov	r0, sl
 8010196:	4659      	mov	r1, fp
 8010198:	f7f0 fa3e 	bl	8000618 <__aeabi_dmul>
 801019c:	4b2d      	ldr	r3, [pc, #180]	; (8010254 <_dtoa_r+0x624>)
 801019e:	4682      	mov	sl, r0
 80101a0:	468b      	mov	fp, r1
 80101a2:	4640      	mov	r0, r8
 80101a4:	4649      	mov	r1, r9
 80101a6:	2200      	movs	r2, #0
 80101a8:	f7f0 fa36 	bl	8000618 <__aeabi_dmul>
 80101ac:	4680      	mov	r8, r0
 80101ae:	4689      	mov	r9, r1
 80101b0:	e7c6      	b.n	8010140 <_dtoa_r+0x510>
 80101b2:	4650      	mov	r0, sl
 80101b4:	4659      	mov	r1, fp
 80101b6:	f7f0 fa2f 	bl	8000618 <__aeabi_dmul>
 80101ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101bc:	9d01      	ldr	r5, [sp, #4]
 80101be:	930f      	str	r3, [sp, #60]	; 0x3c
 80101c0:	4682      	mov	sl, r0
 80101c2:	468b      	mov	fp, r1
 80101c4:	4649      	mov	r1, r9
 80101c6:	4640      	mov	r0, r8
 80101c8:	f7f0 fcd6 	bl	8000b78 <__aeabi_d2iz>
 80101cc:	4606      	mov	r6, r0
 80101ce:	f7f0 f9b9 	bl	8000544 <__aeabi_i2d>
 80101d2:	3630      	adds	r6, #48	; 0x30
 80101d4:	4602      	mov	r2, r0
 80101d6:	460b      	mov	r3, r1
 80101d8:	4640      	mov	r0, r8
 80101da:	4649      	mov	r1, r9
 80101dc:	f7f0 f864 	bl	80002a8 <__aeabi_dsub>
 80101e0:	f805 6b01 	strb.w	r6, [r5], #1
 80101e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101e6:	429d      	cmp	r5, r3
 80101e8:	4680      	mov	r8, r0
 80101ea:	4689      	mov	r9, r1
 80101ec:	f04f 0200 	mov.w	r2, #0
 80101f0:	d124      	bne.n	801023c <_dtoa_r+0x60c>
 80101f2:	4b1b      	ldr	r3, [pc, #108]	; (8010260 <_dtoa_r+0x630>)
 80101f4:	4650      	mov	r0, sl
 80101f6:	4659      	mov	r1, fp
 80101f8:	f7f0 f858 	bl	80002ac <__adddf3>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4640      	mov	r0, r8
 8010202:	4649      	mov	r1, r9
 8010204:	f7f0 fc98 	bl	8000b38 <__aeabi_dcmpgt>
 8010208:	2800      	cmp	r0, #0
 801020a:	d173      	bne.n	80102f4 <_dtoa_r+0x6c4>
 801020c:	4652      	mov	r2, sl
 801020e:	465b      	mov	r3, fp
 8010210:	4913      	ldr	r1, [pc, #76]	; (8010260 <_dtoa_r+0x630>)
 8010212:	2000      	movs	r0, #0
 8010214:	f7f0 f848 	bl	80002a8 <__aeabi_dsub>
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4640      	mov	r0, r8
 801021e:	4649      	mov	r1, r9
 8010220:	f7f0 fc6c 	bl	8000afc <__aeabi_dcmplt>
 8010224:	2800      	cmp	r0, #0
 8010226:	f43f af35 	beq.w	8010094 <_dtoa_r+0x464>
 801022a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801022c:	1e6b      	subs	r3, r5, #1
 801022e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010230:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010234:	2b30      	cmp	r3, #48	; 0x30
 8010236:	d0f8      	beq.n	801022a <_dtoa_r+0x5fa>
 8010238:	9700      	str	r7, [sp, #0]
 801023a:	e049      	b.n	80102d0 <_dtoa_r+0x6a0>
 801023c:	4b05      	ldr	r3, [pc, #20]	; (8010254 <_dtoa_r+0x624>)
 801023e:	f7f0 f9eb 	bl	8000618 <__aeabi_dmul>
 8010242:	4680      	mov	r8, r0
 8010244:	4689      	mov	r9, r1
 8010246:	e7bd      	b.n	80101c4 <_dtoa_r+0x594>
 8010248:	08016c38 	.word	0x08016c38
 801024c:	08016c10 	.word	0x08016c10
 8010250:	3ff00000 	.word	0x3ff00000
 8010254:	40240000 	.word	0x40240000
 8010258:	401c0000 	.word	0x401c0000
 801025c:	40140000 	.word	0x40140000
 8010260:	3fe00000 	.word	0x3fe00000
 8010264:	9d01      	ldr	r5, [sp, #4]
 8010266:	4656      	mov	r6, sl
 8010268:	465f      	mov	r7, fp
 801026a:	4642      	mov	r2, r8
 801026c:	464b      	mov	r3, r9
 801026e:	4630      	mov	r0, r6
 8010270:	4639      	mov	r1, r7
 8010272:	f7f0 fafb 	bl	800086c <__aeabi_ddiv>
 8010276:	f7f0 fc7f 	bl	8000b78 <__aeabi_d2iz>
 801027a:	4682      	mov	sl, r0
 801027c:	f7f0 f962 	bl	8000544 <__aeabi_i2d>
 8010280:	4642      	mov	r2, r8
 8010282:	464b      	mov	r3, r9
 8010284:	f7f0 f9c8 	bl	8000618 <__aeabi_dmul>
 8010288:	4602      	mov	r2, r0
 801028a:	460b      	mov	r3, r1
 801028c:	4630      	mov	r0, r6
 801028e:	4639      	mov	r1, r7
 8010290:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010294:	f7f0 f808 	bl	80002a8 <__aeabi_dsub>
 8010298:	f805 6b01 	strb.w	r6, [r5], #1
 801029c:	9e01      	ldr	r6, [sp, #4]
 801029e:	9f03      	ldr	r7, [sp, #12]
 80102a0:	1bae      	subs	r6, r5, r6
 80102a2:	42b7      	cmp	r7, r6
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	d135      	bne.n	8010316 <_dtoa_r+0x6e6>
 80102aa:	f7ef ffff 	bl	80002ac <__adddf3>
 80102ae:	4642      	mov	r2, r8
 80102b0:	464b      	mov	r3, r9
 80102b2:	4606      	mov	r6, r0
 80102b4:	460f      	mov	r7, r1
 80102b6:	f7f0 fc3f 	bl	8000b38 <__aeabi_dcmpgt>
 80102ba:	b9d0      	cbnz	r0, 80102f2 <_dtoa_r+0x6c2>
 80102bc:	4642      	mov	r2, r8
 80102be:	464b      	mov	r3, r9
 80102c0:	4630      	mov	r0, r6
 80102c2:	4639      	mov	r1, r7
 80102c4:	f7f0 fc10 	bl	8000ae8 <__aeabi_dcmpeq>
 80102c8:	b110      	cbz	r0, 80102d0 <_dtoa_r+0x6a0>
 80102ca:	f01a 0f01 	tst.w	sl, #1
 80102ce:	d110      	bne.n	80102f2 <_dtoa_r+0x6c2>
 80102d0:	4620      	mov	r0, r4
 80102d2:	ee18 1a10 	vmov	r1, s16
 80102d6:	f000 fea7 	bl	8011028 <_Bfree>
 80102da:	2300      	movs	r3, #0
 80102dc:	9800      	ldr	r0, [sp, #0]
 80102de:	702b      	strb	r3, [r5, #0]
 80102e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102e2:	3001      	adds	r0, #1
 80102e4:	6018      	str	r0, [r3, #0]
 80102e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	f43f acf1 	beq.w	800fcd0 <_dtoa_r+0xa0>
 80102ee:	601d      	str	r5, [r3, #0]
 80102f0:	e4ee      	b.n	800fcd0 <_dtoa_r+0xa0>
 80102f2:	9f00      	ldr	r7, [sp, #0]
 80102f4:	462b      	mov	r3, r5
 80102f6:	461d      	mov	r5, r3
 80102f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102fc:	2a39      	cmp	r2, #57	; 0x39
 80102fe:	d106      	bne.n	801030e <_dtoa_r+0x6de>
 8010300:	9a01      	ldr	r2, [sp, #4]
 8010302:	429a      	cmp	r2, r3
 8010304:	d1f7      	bne.n	80102f6 <_dtoa_r+0x6c6>
 8010306:	9901      	ldr	r1, [sp, #4]
 8010308:	2230      	movs	r2, #48	; 0x30
 801030a:	3701      	adds	r7, #1
 801030c:	700a      	strb	r2, [r1, #0]
 801030e:	781a      	ldrb	r2, [r3, #0]
 8010310:	3201      	adds	r2, #1
 8010312:	701a      	strb	r2, [r3, #0]
 8010314:	e790      	b.n	8010238 <_dtoa_r+0x608>
 8010316:	4ba6      	ldr	r3, [pc, #664]	; (80105b0 <_dtoa_r+0x980>)
 8010318:	2200      	movs	r2, #0
 801031a:	f7f0 f97d 	bl	8000618 <__aeabi_dmul>
 801031e:	2200      	movs	r2, #0
 8010320:	2300      	movs	r3, #0
 8010322:	4606      	mov	r6, r0
 8010324:	460f      	mov	r7, r1
 8010326:	f7f0 fbdf 	bl	8000ae8 <__aeabi_dcmpeq>
 801032a:	2800      	cmp	r0, #0
 801032c:	d09d      	beq.n	801026a <_dtoa_r+0x63a>
 801032e:	e7cf      	b.n	80102d0 <_dtoa_r+0x6a0>
 8010330:	9a08      	ldr	r2, [sp, #32]
 8010332:	2a00      	cmp	r2, #0
 8010334:	f000 80d7 	beq.w	80104e6 <_dtoa_r+0x8b6>
 8010338:	9a06      	ldr	r2, [sp, #24]
 801033a:	2a01      	cmp	r2, #1
 801033c:	f300 80ba 	bgt.w	80104b4 <_dtoa_r+0x884>
 8010340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010342:	2a00      	cmp	r2, #0
 8010344:	f000 80b2 	beq.w	80104ac <_dtoa_r+0x87c>
 8010348:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801034c:	9e07      	ldr	r6, [sp, #28]
 801034e:	9d04      	ldr	r5, [sp, #16]
 8010350:	9a04      	ldr	r2, [sp, #16]
 8010352:	441a      	add	r2, r3
 8010354:	9204      	str	r2, [sp, #16]
 8010356:	9a05      	ldr	r2, [sp, #20]
 8010358:	2101      	movs	r1, #1
 801035a:	441a      	add	r2, r3
 801035c:	4620      	mov	r0, r4
 801035e:	9205      	str	r2, [sp, #20]
 8010360:	f000 ff64 	bl	801122c <__i2b>
 8010364:	4607      	mov	r7, r0
 8010366:	2d00      	cmp	r5, #0
 8010368:	dd0c      	ble.n	8010384 <_dtoa_r+0x754>
 801036a:	9b05      	ldr	r3, [sp, #20]
 801036c:	2b00      	cmp	r3, #0
 801036e:	dd09      	ble.n	8010384 <_dtoa_r+0x754>
 8010370:	42ab      	cmp	r3, r5
 8010372:	9a04      	ldr	r2, [sp, #16]
 8010374:	bfa8      	it	ge
 8010376:	462b      	movge	r3, r5
 8010378:	1ad2      	subs	r2, r2, r3
 801037a:	9204      	str	r2, [sp, #16]
 801037c:	9a05      	ldr	r2, [sp, #20]
 801037e:	1aed      	subs	r5, r5, r3
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	9305      	str	r3, [sp, #20]
 8010384:	9b07      	ldr	r3, [sp, #28]
 8010386:	b31b      	cbz	r3, 80103d0 <_dtoa_r+0x7a0>
 8010388:	9b08      	ldr	r3, [sp, #32]
 801038a:	2b00      	cmp	r3, #0
 801038c:	f000 80af 	beq.w	80104ee <_dtoa_r+0x8be>
 8010390:	2e00      	cmp	r6, #0
 8010392:	dd13      	ble.n	80103bc <_dtoa_r+0x78c>
 8010394:	4639      	mov	r1, r7
 8010396:	4632      	mov	r2, r6
 8010398:	4620      	mov	r0, r4
 801039a:	f001 f807 	bl	80113ac <__pow5mult>
 801039e:	ee18 2a10 	vmov	r2, s16
 80103a2:	4601      	mov	r1, r0
 80103a4:	4607      	mov	r7, r0
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 ff56 	bl	8011258 <__multiply>
 80103ac:	ee18 1a10 	vmov	r1, s16
 80103b0:	4680      	mov	r8, r0
 80103b2:	4620      	mov	r0, r4
 80103b4:	f000 fe38 	bl	8011028 <_Bfree>
 80103b8:	ee08 8a10 	vmov	s16, r8
 80103bc:	9b07      	ldr	r3, [sp, #28]
 80103be:	1b9a      	subs	r2, r3, r6
 80103c0:	d006      	beq.n	80103d0 <_dtoa_r+0x7a0>
 80103c2:	ee18 1a10 	vmov	r1, s16
 80103c6:	4620      	mov	r0, r4
 80103c8:	f000 fff0 	bl	80113ac <__pow5mult>
 80103cc:	ee08 0a10 	vmov	s16, r0
 80103d0:	2101      	movs	r1, #1
 80103d2:	4620      	mov	r0, r4
 80103d4:	f000 ff2a 	bl	801122c <__i2b>
 80103d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103da:	2b00      	cmp	r3, #0
 80103dc:	4606      	mov	r6, r0
 80103de:	f340 8088 	ble.w	80104f2 <_dtoa_r+0x8c2>
 80103e2:	461a      	mov	r2, r3
 80103e4:	4601      	mov	r1, r0
 80103e6:	4620      	mov	r0, r4
 80103e8:	f000 ffe0 	bl	80113ac <__pow5mult>
 80103ec:	9b06      	ldr	r3, [sp, #24]
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	4606      	mov	r6, r0
 80103f2:	f340 8081 	ble.w	80104f8 <_dtoa_r+0x8c8>
 80103f6:	f04f 0800 	mov.w	r8, #0
 80103fa:	6933      	ldr	r3, [r6, #16]
 80103fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010400:	6918      	ldr	r0, [r3, #16]
 8010402:	f000 fec3 	bl	801118c <__hi0bits>
 8010406:	f1c0 0020 	rsb	r0, r0, #32
 801040a:	9b05      	ldr	r3, [sp, #20]
 801040c:	4418      	add	r0, r3
 801040e:	f010 001f 	ands.w	r0, r0, #31
 8010412:	f000 8092 	beq.w	801053a <_dtoa_r+0x90a>
 8010416:	f1c0 0320 	rsb	r3, r0, #32
 801041a:	2b04      	cmp	r3, #4
 801041c:	f340 808a 	ble.w	8010534 <_dtoa_r+0x904>
 8010420:	f1c0 001c 	rsb	r0, r0, #28
 8010424:	9b04      	ldr	r3, [sp, #16]
 8010426:	4403      	add	r3, r0
 8010428:	9304      	str	r3, [sp, #16]
 801042a:	9b05      	ldr	r3, [sp, #20]
 801042c:	4403      	add	r3, r0
 801042e:	4405      	add	r5, r0
 8010430:	9305      	str	r3, [sp, #20]
 8010432:	9b04      	ldr	r3, [sp, #16]
 8010434:	2b00      	cmp	r3, #0
 8010436:	dd07      	ble.n	8010448 <_dtoa_r+0x818>
 8010438:	ee18 1a10 	vmov	r1, s16
 801043c:	461a      	mov	r2, r3
 801043e:	4620      	mov	r0, r4
 8010440:	f001 f80e 	bl	8011460 <__lshift>
 8010444:	ee08 0a10 	vmov	s16, r0
 8010448:	9b05      	ldr	r3, [sp, #20]
 801044a:	2b00      	cmp	r3, #0
 801044c:	dd05      	ble.n	801045a <_dtoa_r+0x82a>
 801044e:	4631      	mov	r1, r6
 8010450:	461a      	mov	r2, r3
 8010452:	4620      	mov	r0, r4
 8010454:	f001 f804 	bl	8011460 <__lshift>
 8010458:	4606      	mov	r6, r0
 801045a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801045c:	2b00      	cmp	r3, #0
 801045e:	d06e      	beq.n	801053e <_dtoa_r+0x90e>
 8010460:	ee18 0a10 	vmov	r0, s16
 8010464:	4631      	mov	r1, r6
 8010466:	f001 f86b 	bl	8011540 <__mcmp>
 801046a:	2800      	cmp	r0, #0
 801046c:	da67      	bge.n	801053e <_dtoa_r+0x90e>
 801046e:	9b00      	ldr	r3, [sp, #0]
 8010470:	3b01      	subs	r3, #1
 8010472:	ee18 1a10 	vmov	r1, s16
 8010476:	9300      	str	r3, [sp, #0]
 8010478:	220a      	movs	r2, #10
 801047a:	2300      	movs	r3, #0
 801047c:	4620      	mov	r0, r4
 801047e:	f000 fdf5 	bl	801106c <__multadd>
 8010482:	9b08      	ldr	r3, [sp, #32]
 8010484:	ee08 0a10 	vmov	s16, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	f000 81b1 	beq.w	80107f0 <_dtoa_r+0xbc0>
 801048e:	2300      	movs	r3, #0
 8010490:	4639      	mov	r1, r7
 8010492:	220a      	movs	r2, #10
 8010494:	4620      	mov	r0, r4
 8010496:	f000 fde9 	bl	801106c <__multadd>
 801049a:	9b02      	ldr	r3, [sp, #8]
 801049c:	2b00      	cmp	r3, #0
 801049e:	4607      	mov	r7, r0
 80104a0:	f300 808e 	bgt.w	80105c0 <_dtoa_r+0x990>
 80104a4:	9b06      	ldr	r3, [sp, #24]
 80104a6:	2b02      	cmp	r3, #2
 80104a8:	dc51      	bgt.n	801054e <_dtoa_r+0x91e>
 80104aa:	e089      	b.n	80105c0 <_dtoa_r+0x990>
 80104ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104b2:	e74b      	b.n	801034c <_dtoa_r+0x71c>
 80104b4:	9b03      	ldr	r3, [sp, #12]
 80104b6:	1e5e      	subs	r6, r3, #1
 80104b8:	9b07      	ldr	r3, [sp, #28]
 80104ba:	42b3      	cmp	r3, r6
 80104bc:	bfbf      	itttt	lt
 80104be:	9b07      	ldrlt	r3, [sp, #28]
 80104c0:	9607      	strlt	r6, [sp, #28]
 80104c2:	1af2      	sublt	r2, r6, r3
 80104c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80104c6:	bfb6      	itet	lt
 80104c8:	189b      	addlt	r3, r3, r2
 80104ca:	1b9e      	subge	r6, r3, r6
 80104cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80104ce:	9b03      	ldr	r3, [sp, #12]
 80104d0:	bfb8      	it	lt
 80104d2:	2600      	movlt	r6, #0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	bfb7      	itett	lt
 80104d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80104dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80104e0:	1a9d      	sublt	r5, r3, r2
 80104e2:	2300      	movlt	r3, #0
 80104e4:	e734      	b.n	8010350 <_dtoa_r+0x720>
 80104e6:	9e07      	ldr	r6, [sp, #28]
 80104e8:	9d04      	ldr	r5, [sp, #16]
 80104ea:	9f08      	ldr	r7, [sp, #32]
 80104ec:	e73b      	b.n	8010366 <_dtoa_r+0x736>
 80104ee:	9a07      	ldr	r2, [sp, #28]
 80104f0:	e767      	b.n	80103c2 <_dtoa_r+0x792>
 80104f2:	9b06      	ldr	r3, [sp, #24]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	dc18      	bgt.n	801052a <_dtoa_r+0x8fa>
 80104f8:	f1ba 0f00 	cmp.w	sl, #0
 80104fc:	d115      	bne.n	801052a <_dtoa_r+0x8fa>
 80104fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010502:	b993      	cbnz	r3, 801052a <_dtoa_r+0x8fa>
 8010504:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010508:	0d1b      	lsrs	r3, r3, #20
 801050a:	051b      	lsls	r3, r3, #20
 801050c:	b183      	cbz	r3, 8010530 <_dtoa_r+0x900>
 801050e:	9b04      	ldr	r3, [sp, #16]
 8010510:	3301      	adds	r3, #1
 8010512:	9304      	str	r3, [sp, #16]
 8010514:	9b05      	ldr	r3, [sp, #20]
 8010516:	3301      	adds	r3, #1
 8010518:	9305      	str	r3, [sp, #20]
 801051a:	f04f 0801 	mov.w	r8, #1
 801051e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010520:	2b00      	cmp	r3, #0
 8010522:	f47f af6a 	bne.w	80103fa <_dtoa_r+0x7ca>
 8010526:	2001      	movs	r0, #1
 8010528:	e76f      	b.n	801040a <_dtoa_r+0x7da>
 801052a:	f04f 0800 	mov.w	r8, #0
 801052e:	e7f6      	b.n	801051e <_dtoa_r+0x8ee>
 8010530:	4698      	mov	r8, r3
 8010532:	e7f4      	b.n	801051e <_dtoa_r+0x8ee>
 8010534:	f43f af7d 	beq.w	8010432 <_dtoa_r+0x802>
 8010538:	4618      	mov	r0, r3
 801053a:	301c      	adds	r0, #28
 801053c:	e772      	b.n	8010424 <_dtoa_r+0x7f4>
 801053e:	9b03      	ldr	r3, [sp, #12]
 8010540:	2b00      	cmp	r3, #0
 8010542:	dc37      	bgt.n	80105b4 <_dtoa_r+0x984>
 8010544:	9b06      	ldr	r3, [sp, #24]
 8010546:	2b02      	cmp	r3, #2
 8010548:	dd34      	ble.n	80105b4 <_dtoa_r+0x984>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	9302      	str	r3, [sp, #8]
 801054e:	9b02      	ldr	r3, [sp, #8]
 8010550:	b96b      	cbnz	r3, 801056e <_dtoa_r+0x93e>
 8010552:	4631      	mov	r1, r6
 8010554:	2205      	movs	r2, #5
 8010556:	4620      	mov	r0, r4
 8010558:	f000 fd88 	bl	801106c <__multadd>
 801055c:	4601      	mov	r1, r0
 801055e:	4606      	mov	r6, r0
 8010560:	ee18 0a10 	vmov	r0, s16
 8010564:	f000 ffec 	bl	8011540 <__mcmp>
 8010568:	2800      	cmp	r0, #0
 801056a:	f73f adbb 	bgt.w	80100e4 <_dtoa_r+0x4b4>
 801056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010570:	9d01      	ldr	r5, [sp, #4]
 8010572:	43db      	mvns	r3, r3
 8010574:	9300      	str	r3, [sp, #0]
 8010576:	f04f 0800 	mov.w	r8, #0
 801057a:	4631      	mov	r1, r6
 801057c:	4620      	mov	r0, r4
 801057e:	f000 fd53 	bl	8011028 <_Bfree>
 8010582:	2f00      	cmp	r7, #0
 8010584:	f43f aea4 	beq.w	80102d0 <_dtoa_r+0x6a0>
 8010588:	f1b8 0f00 	cmp.w	r8, #0
 801058c:	d005      	beq.n	801059a <_dtoa_r+0x96a>
 801058e:	45b8      	cmp	r8, r7
 8010590:	d003      	beq.n	801059a <_dtoa_r+0x96a>
 8010592:	4641      	mov	r1, r8
 8010594:	4620      	mov	r0, r4
 8010596:	f000 fd47 	bl	8011028 <_Bfree>
 801059a:	4639      	mov	r1, r7
 801059c:	4620      	mov	r0, r4
 801059e:	f000 fd43 	bl	8011028 <_Bfree>
 80105a2:	e695      	b.n	80102d0 <_dtoa_r+0x6a0>
 80105a4:	2600      	movs	r6, #0
 80105a6:	4637      	mov	r7, r6
 80105a8:	e7e1      	b.n	801056e <_dtoa_r+0x93e>
 80105aa:	9700      	str	r7, [sp, #0]
 80105ac:	4637      	mov	r7, r6
 80105ae:	e599      	b.n	80100e4 <_dtoa_r+0x4b4>
 80105b0:	40240000 	.word	0x40240000
 80105b4:	9b08      	ldr	r3, [sp, #32]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 80ca 	beq.w	8010750 <_dtoa_r+0xb20>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	9302      	str	r3, [sp, #8]
 80105c0:	2d00      	cmp	r5, #0
 80105c2:	dd05      	ble.n	80105d0 <_dtoa_r+0x9a0>
 80105c4:	4639      	mov	r1, r7
 80105c6:	462a      	mov	r2, r5
 80105c8:	4620      	mov	r0, r4
 80105ca:	f000 ff49 	bl	8011460 <__lshift>
 80105ce:	4607      	mov	r7, r0
 80105d0:	f1b8 0f00 	cmp.w	r8, #0
 80105d4:	d05b      	beq.n	801068e <_dtoa_r+0xa5e>
 80105d6:	6879      	ldr	r1, [r7, #4]
 80105d8:	4620      	mov	r0, r4
 80105da:	f000 fce5 	bl	8010fa8 <_Balloc>
 80105de:	4605      	mov	r5, r0
 80105e0:	b928      	cbnz	r0, 80105ee <_dtoa_r+0x9be>
 80105e2:	4b87      	ldr	r3, [pc, #540]	; (8010800 <_dtoa_r+0xbd0>)
 80105e4:	4602      	mov	r2, r0
 80105e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80105ea:	f7ff bb3b 	b.w	800fc64 <_dtoa_r+0x34>
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	3202      	adds	r2, #2
 80105f2:	0092      	lsls	r2, r2, #2
 80105f4:	f107 010c 	add.w	r1, r7, #12
 80105f8:	300c      	adds	r0, #12
 80105fa:	f7fd f9fd 	bl	800d9f8 <memcpy>
 80105fe:	2201      	movs	r2, #1
 8010600:	4629      	mov	r1, r5
 8010602:	4620      	mov	r0, r4
 8010604:	f000 ff2c 	bl	8011460 <__lshift>
 8010608:	9b01      	ldr	r3, [sp, #4]
 801060a:	f103 0901 	add.w	r9, r3, #1
 801060e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010612:	4413      	add	r3, r2
 8010614:	9305      	str	r3, [sp, #20]
 8010616:	f00a 0301 	and.w	r3, sl, #1
 801061a:	46b8      	mov	r8, r7
 801061c:	9304      	str	r3, [sp, #16]
 801061e:	4607      	mov	r7, r0
 8010620:	4631      	mov	r1, r6
 8010622:	ee18 0a10 	vmov	r0, s16
 8010626:	f7ff fa77 	bl	800fb18 <quorem>
 801062a:	4641      	mov	r1, r8
 801062c:	9002      	str	r0, [sp, #8]
 801062e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010632:	ee18 0a10 	vmov	r0, s16
 8010636:	f000 ff83 	bl	8011540 <__mcmp>
 801063a:	463a      	mov	r2, r7
 801063c:	9003      	str	r0, [sp, #12]
 801063e:	4631      	mov	r1, r6
 8010640:	4620      	mov	r0, r4
 8010642:	f000 ff99 	bl	8011578 <__mdiff>
 8010646:	68c2      	ldr	r2, [r0, #12]
 8010648:	f109 3bff 	add.w	fp, r9, #4294967295
 801064c:	4605      	mov	r5, r0
 801064e:	bb02      	cbnz	r2, 8010692 <_dtoa_r+0xa62>
 8010650:	4601      	mov	r1, r0
 8010652:	ee18 0a10 	vmov	r0, s16
 8010656:	f000 ff73 	bl	8011540 <__mcmp>
 801065a:	4602      	mov	r2, r0
 801065c:	4629      	mov	r1, r5
 801065e:	4620      	mov	r0, r4
 8010660:	9207      	str	r2, [sp, #28]
 8010662:	f000 fce1 	bl	8011028 <_Bfree>
 8010666:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801066a:	ea43 0102 	orr.w	r1, r3, r2
 801066e:	9b04      	ldr	r3, [sp, #16]
 8010670:	430b      	orrs	r3, r1
 8010672:	464d      	mov	r5, r9
 8010674:	d10f      	bne.n	8010696 <_dtoa_r+0xa66>
 8010676:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801067a:	d02a      	beq.n	80106d2 <_dtoa_r+0xaa2>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	2b00      	cmp	r3, #0
 8010680:	dd02      	ble.n	8010688 <_dtoa_r+0xa58>
 8010682:	9b02      	ldr	r3, [sp, #8]
 8010684:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010688:	f88b a000 	strb.w	sl, [fp]
 801068c:	e775      	b.n	801057a <_dtoa_r+0x94a>
 801068e:	4638      	mov	r0, r7
 8010690:	e7ba      	b.n	8010608 <_dtoa_r+0x9d8>
 8010692:	2201      	movs	r2, #1
 8010694:	e7e2      	b.n	801065c <_dtoa_r+0xa2c>
 8010696:	9b03      	ldr	r3, [sp, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	db04      	blt.n	80106a6 <_dtoa_r+0xa76>
 801069c:	9906      	ldr	r1, [sp, #24]
 801069e:	430b      	orrs	r3, r1
 80106a0:	9904      	ldr	r1, [sp, #16]
 80106a2:	430b      	orrs	r3, r1
 80106a4:	d122      	bne.n	80106ec <_dtoa_r+0xabc>
 80106a6:	2a00      	cmp	r2, #0
 80106a8:	ddee      	ble.n	8010688 <_dtoa_r+0xa58>
 80106aa:	ee18 1a10 	vmov	r1, s16
 80106ae:	2201      	movs	r2, #1
 80106b0:	4620      	mov	r0, r4
 80106b2:	f000 fed5 	bl	8011460 <__lshift>
 80106b6:	4631      	mov	r1, r6
 80106b8:	ee08 0a10 	vmov	s16, r0
 80106bc:	f000 ff40 	bl	8011540 <__mcmp>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	dc03      	bgt.n	80106cc <_dtoa_r+0xa9c>
 80106c4:	d1e0      	bne.n	8010688 <_dtoa_r+0xa58>
 80106c6:	f01a 0f01 	tst.w	sl, #1
 80106ca:	d0dd      	beq.n	8010688 <_dtoa_r+0xa58>
 80106cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80106d0:	d1d7      	bne.n	8010682 <_dtoa_r+0xa52>
 80106d2:	2339      	movs	r3, #57	; 0x39
 80106d4:	f88b 3000 	strb.w	r3, [fp]
 80106d8:	462b      	mov	r3, r5
 80106da:	461d      	mov	r5, r3
 80106dc:	3b01      	subs	r3, #1
 80106de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80106e2:	2a39      	cmp	r2, #57	; 0x39
 80106e4:	d071      	beq.n	80107ca <_dtoa_r+0xb9a>
 80106e6:	3201      	adds	r2, #1
 80106e8:	701a      	strb	r2, [r3, #0]
 80106ea:	e746      	b.n	801057a <_dtoa_r+0x94a>
 80106ec:	2a00      	cmp	r2, #0
 80106ee:	dd07      	ble.n	8010700 <_dtoa_r+0xad0>
 80106f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80106f4:	d0ed      	beq.n	80106d2 <_dtoa_r+0xaa2>
 80106f6:	f10a 0301 	add.w	r3, sl, #1
 80106fa:	f88b 3000 	strb.w	r3, [fp]
 80106fe:	e73c      	b.n	801057a <_dtoa_r+0x94a>
 8010700:	9b05      	ldr	r3, [sp, #20]
 8010702:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010706:	4599      	cmp	r9, r3
 8010708:	d047      	beq.n	801079a <_dtoa_r+0xb6a>
 801070a:	ee18 1a10 	vmov	r1, s16
 801070e:	2300      	movs	r3, #0
 8010710:	220a      	movs	r2, #10
 8010712:	4620      	mov	r0, r4
 8010714:	f000 fcaa 	bl	801106c <__multadd>
 8010718:	45b8      	cmp	r8, r7
 801071a:	ee08 0a10 	vmov	s16, r0
 801071e:	f04f 0300 	mov.w	r3, #0
 8010722:	f04f 020a 	mov.w	r2, #10
 8010726:	4641      	mov	r1, r8
 8010728:	4620      	mov	r0, r4
 801072a:	d106      	bne.n	801073a <_dtoa_r+0xb0a>
 801072c:	f000 fc9e 	bl	801106c <__multadd>
 8010730:	4680      	mov	r8, r0
 8010732:	4607      	mov	r7, r0
 8010734:	f109 0901 	add.w	r9, r9, #1
 8010738:	e772      	b.n	8010620 <_dtoa_r+0x9f0>
 801073a:	f000 fc97 	bl	801106c <__multadd>
 801073e:	4639      	mov	r1, r7
 8010740:	4680      	mov	r8, r0
 8010742:	2300      	movs	r3, #0
 8010744:	220a      	movs	r2, #10
 8010746:	4620      	mov	r0, r4
 8010748:	f000 fc90 	bl	801106c <__multadd>
 801074c:	4607      	mov	r7, r0
 801074e:	e7f1      	b.n	8010734 <_dtoa_r+0xb04>
 8010750:	9b03      	ldr	r3, [sp, #12]
 8010752:	9302      	str	r3, [sp, #8]
 8010754:	9d01      	ldr	r5, [sp, #4]
 8010756:	ee18 0a10 	vmov	r0, s16
 801075a:	4631      	mov	r1, r6
 801075c:	f7ff f9dc 	bl	800fb18 <quorem>
 8010760:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010764:	9b01      	ldr	r3, [sp, #4]
 8010766:	f805 ab01 	strb.w	sl, [r5], #1
 801076a:	1aea      	subs	r2, r5, r3
 801076c:	9b02      	ldr	r3, [sp, #8]
 801076e:	4293      	cmp	r3, r2
 8010770:	dd09      	ble.n	8010786 <_dtoa_r+0xb56>
 8010772:	ee18 1a10 	vmov	r1, s16
 8010776:	2300      	movs	r3, #0
 8010778:	220a      	movs	r2, #10
 801077a:	4620      	mov	r0, r4
 801077c:	f000 fc76 	bl	801106c <__multadd>
 8010780:	ee08 0a10 	vmov	s16, r0
 8010784:	e7e7      	b.n	8010756 <_dtoa_r+0xb26>
 8010786:	9b02      	ldr	r3, [sp, #8]
 8010788:	2b00      	cmp	r3, #0
 801078a:	bfc8      	it	gt
 801078c:	461d      	movgt	r5, r3
 801078e:	9b01      	ldr	r3, [sp, #4]
 8010790:	bfd8      	it	le
 8010792:	2501      	movle	r5, #1
 8010794:	441d      	add	r5, r3
 8010796:	f04f 0800 	mov.w	r8, #0
 801079a:	ee18 1a10 	vmov	r1, s16
 801079e:	2201      	movs	r2, #1
 80107a0:	4620      	mov	r0, r4
 80107a2:	f000 fe5d 	bl	8011460 <__lshift>
 80107a6:	4631      	mov	r1, r6
 80107a8:	ee08 0a10 	vmov	s16, r0
 80107ac:	f000 fec8 	bl	8011540 <__mcmp>
 80107b0:	2800      	cmp	r0, #0
 80107b2:	dc91      	bgt.n	80106d8 <_dtoa_r+0xaa8>
 80107b4:	d102      	bne.n	80107bc <_dtoa_r+0xb8c>
 80107b6:	f01a 0f01 	tst.w	sl, #1
 80107ba:	d18d      	bne.n	80106d8 <_dtoa_r+0xaa8>
 80107bc:	462b      	mov	r3, r5
 80107be:	461d      	mov	r5, r3
 80107c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107c4:	2a30      	cmp	r2, #48	; 0x30
 80107c6:	d0fa      	beq.n	80107be <_dtoa_r+0xb8e>
 80107c8:	e6d7      	b.n	801057a <_dtoa_r+0x94a>
 80107ca:	9a01      	ldr	r2, [sp, #4]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d184      	bne.n	80106da <_dtoa_r+0xaaa>
 80107d0:	9b00      	ldr	r3, [sp, #0]
 80107d2:	3301      	adds	r3, #1
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	2331      	movs	r3, #49	; 0x31
 80107d8:	7013      	strb	r3, [r2, #0]
 80107da:	e6ce      	b.n	801057a <_dtoa_r+0x94a>
 80107dc:	4b09      	ldr	r3, [pc, #36]	; (8010804 <_dtoa_r+0xbd4>)
 80107de:	f7ff ba95 	b.w	800fd0c <_dtoa_r+0xdc>
 80107e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f47f aa6e 	bne.w	800fcc6 <_dtoa_r+0x96>
 80107ea:	4b07      	ldr	r3, [pc, #28]	; (8010808 <_dtoa_r+0xbd8>)
 80107ec:	f7ff ba8e 	b.w	800fd0c <_dtoa_r+0xdc>
 80107f0:	9b02      	ldr	r3, [sp, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	dcae      	bgt.n	8010754 <_dtoa_r+0xb24>
 80107f6:	9b06      	ldr	r3, [sp, #24]
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	f73f aea8 	bgt.w	801054e <_dtoa_r+0x91e>
 80107fe:	e7a9      	b.n	8010754 <_dtoa_r+0xb24>
 8010800:	08016b28 	.word	0x08016b28
 8010804:	08016928 	.word	0x08016928
 8010808:	08016aa9 	.word	0x08016aa9

0801080c <_fstat_r>:
 801080c:	b538      	push	{r3, r4, r5, lr}
 801080e:	4d07      	ldr	r5, [pc, #28]	; (801082c <_fstat_r+0x20>)
 8010810:	2300      	movs	r3, #0
 8010812:	4604      	mov	r4, r0
 8010814:	4608      	mov	r0, r1
 8010816:	4611      	mov	r1, r2
 8010818:	602b      	str	r3, [r5, #0]
 801081a:	f7f3 fa88 	bl	8003d2e <_fstat>
 801081e:	1c43      	adds	r3, r0, #1
 8010820:	d102      	bne.n	8010828 <_fstat_r+0x1c>
 8010822:	682b      	ldr	r3, [r5, #0]
 8010824:	b103      	cbz	r3, 8010828 <_fstat_r+0x1c>
 8010826:	6023      	str	r3, [r4, #0]
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	bf00      	nop
 801082c:	2000a8ac 	.word	0x2000a8ac

08010830 <rshift>:
 8010830:	6903      	ldr	r3, [r0, #16]
 8010832:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010836:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801083a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801083e:	f100 0414 	add.w	r4, r0, #20
 8010842:	dd45      	ble.n	80108d0 <rshift+0xa0>
 8010844:	f011 011f 	ands.w	r1, r1, #31
 8010848:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801084c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010850:	d10c      	bne.n	801086c <rshift+0x3c>
 8010852:	f100 0710 	add.w	r7, r0, #16
 8010856:	4629      	mov	r1, r5
 8010858:	42b1      	cmp	r1, r6
 801085a:	d334      	bcc.n	80108c6 <rshift+0x96>
 801085c:	1a9b      	subs	r3, r3, r2
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	1eea      	subs	r2, r5, #3
 8010862:	4296      	cmp	r6, r2
 8010864:	bf38      	it	cc
 8010866:	2300      	movcc	r3, #0
 8010868:	4423      	add	r3, r4
 801086a:	e015      	b.n	8010898 <rshift+0x68>
 801086c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010870:	f1c1 0820 	rsb	r8, r1, #32
 8010874:	40cf      	lsrs	r7, r1
 8010876:	f105 0e04 	add.w	lr, r5, #4
 801087a:	46a1      	mov	r9, r4
 801087c:	4576      	cmp	r6, lr
 801087e:	46f4      	mov	ip, lr
 8010880:	d815      	bhi.n	80108ae <rshift+0x7e>
 8010882:	1a9a      	subs	r2, r3, r2
 8010884:	0092      	lsls	r2, r2, #2
 8010886:	3a04      	subs	r2, #4
 8010888:	3501      	adds	r5, #1
 801088a:	42ae      	cmp	r6, r5
 801088c:	bf38      	it	cc
 801088e:	2200      	movcc	r2, #0
 8010890:	18a3      	adds	r3, r4, r2
 8010892:	50a7      	str	r7, [r4, r2]
 8010894:	b107      	cbz	r7, 8010898 <rshift+0x68>
 8010896:	3304      	adds	r3, #4
 8010898:	1b1a      	subs	r2, r3, r4
 801089a:	42a3      	cmp	r3, r4
 801089c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80108a0:	bf08      	it	eq
 80108a2:	2300      	moveq	r3, #0
 80108a4:	6102      	str	r2, [r0, #16]
 80108a6:	bf08      	it	eq
 80108a8:	6143      	streq	r3, [r0, #20]
 80108aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ae:	f8dc c000 	ldr.w	ip, [ip]
 80108b2:	fa0c fc08 	lsl.w	ip, ip, r8
 80108b6:	ea4c 0707 	orr.w	r7, ip, r7
 80108ba:	f849 7b04 	str.w	r7, [r9], #4
 80108be:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108c2:	40cf      	lsrs	r7, r1
 80108c4:	e7da      	b.n	801087c <rshift+0x4c>
 80108c6:	f851 cb04 	ldr.w	ip, [r1], #4
 80108ca:	f847 cf04 	str.w	ip, [r7, #4]!
 80108ce:	e7c3      	b.n	8010858 <rshift+0x28>
 80108d0:	4623      	mov	r3, r4
 80108d2:	e7e1      	b.n	8010898 <rshift+0x68>

080108d4 <__hexdig_fun>:
 80108d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80108d8:	2b09      	cmp	r3, #9
 80108da:	d802      	bhi.n	80108e2 <__hexdig_fun+0xe>
 80108dc:	3820      	subs	r0, #32
 80108de:	b2c0      	uxtb	r0, r0
 80108e0:	4770      	bx	lr
 80108e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80108e6:	2b05      	cmp	r3, #5
 80108e8:	d801      	bhi.n	80108ee <__hexdig_fun+0x1a>
 80108ea:	3847      	subs	r0, #71	; 0x47
 80108ec:	e7f7      	b.n	80108de <__hexdig_fun+0xa>
 80108ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80108f2:	2b05      	cmp	r3, #5
 80108f4:	d801      	bhi.n	80108fa <__hexdig_fun+0x26>
 80108f6:	3827      	subs	r0, #39	; 0x27
 80108f8:	e7f1      	b.n	80108de <__hexdig_fun+0xa>
 80108fa:	2000      	movs	r0, #0
 80108fc:	4770      	bx	lr
	...

08010900 <__gethex>:
 8010900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010904:	ed2d 8b02 	vpush	{d8}
 8010908:	b089      	sub	sp, #36	; 0x24
 801090a:	ee08 0a10 	vmov	s16, r0
 801090e:	9304      	str	r3, [sp, #16]
 8010910:	4bb4      	ldr	r3, [pc, #720]	; (8010be4 <__gethex+0x2e4>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	9301      	str	r3, [sp, #4]
 8010916:	4618      	mov	r0, r3
 8010918:	468b      	mov	fp, r1
 801091a:	4690      	mov	r8, r2
 801091c:	f7ef fc62 	bl	80001e4 <strlen>
 8010920:	9b01      	ldr	r3, [sp, #4]
 8010922:	f8db 2000 	ldr.w	r2, [fp]
 8010926:	4403      	add	r3, r0
 8010928:	4682      	mov	sl, r0
 801092a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801092e:	9305      	str	r3, [sp, #20]
 8010930:	1c93      	adds	r3, r2, #2
 8010932:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010936:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801093a:	32fe      	adds	r2, #254	; 0xfe
 801093c:	18d1      	adds	r1, r2, r3
 801093e:	461f      	mov	r7, r3
 8010940:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010944:	9100      	str	r1, [sp, #0]
 8010946:	2830      	cmp	r0, #48	; 0x30
 8010948:	d0f8      	beq.n	801093c <__gethex+0x3c>
 801094a:	f7ff ffc3 	bl	80108d4 <__hexdig_fun>
 801094e:	4604      	mov	r4, r0
 8010950:	2800      	cmp	r0, #0
 8010952:	d13a      	bne.n	80109ca <__gethex+0xca>
 8010954:	9901      	ldr	r1, [sp, #4]
 8010956:	4652      	mov	r2, sl
 8010958:	4638      	mov	r0, r7
 801095a:	f001 fb15 	bl	8011f88 <strncmp>
 801095e:	4605      	mov	r5, r0
 8010960:	2800      	cmp	r0, #0
 8010962:	d168      	bne.n	8010a36 <__gethex+0x136>
 8010964:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010968:	eb07 060a 	add.w	r6, r7, sl
 801096c:	f7ff ffb2 	bl	80108d4 <__hexdig_fun>
 8010970:	2800      	cmp	r0, #0
 8010972:	d062      	beq.n	8010a3a <__gethex+0x13a>
 8010974:	4633      	mov	r3, r6
 8010976:	7818      	ldrb	r0, [r3, #0]
 8010978:	2830      	cmp	r0, #48	; 0x30
 801097a:	461f      	mov	r7, r3
 801097c:	f103 0301 	add.w	r3, r3, #1
 8010980:	d0f9      	beq.n	8010976 <__gethex+0x76>
 8010982:	f7ff ffa7 	bl	80108d4 <__hexdig_fun>
 8010986:	2301      	movs	r3, #1
 8010988:	fab0 f480 	clz	r4, r0
 801098c:	0964      	lsrs	r4, r4, #5
 801098e:	4635      	mov	r5, r6
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	463a      	mov	r2, r7
 8010994:	4616      	mov	r6, r2
 8010996:	3201      	adds	r2, #1
 8010998:	7830      	ldrb	r0, [r6, #0]
 801099a:	f7ff ff9b 	bl	80108d4 <__hexdig_fun>
 801099e:	2800      	cmp	r0, #0
 80109a0:	d1f8      	bne.n	8010994 <__gethex+0x94>
 80109a2:	9901      	ldr	r1, [sp, #4]
 80109a4:	4652      	mov	r2, sl
 80109a6:	4630      	mov	r0, r6
 80109a8:	f001 faee 	bl	8011f88 <strncmp>
 80109ac:	b980      	cbnz	r0, 80109d0 <__gethex+0xd0>
 80109ae:	b94d      	cbnz	r5, 80109c4 <__gethex+0xc4>
 80109b0:	eb06 050a 	add.w	r5, r6, sl
 80109b4:	462a      	mov	r2, r5
 80109b6:	4616      	mov	r6, r2
 80109b8:	3201      	adds	r2, #1
 80109ba:	7830      	ldrb	r0, [r6, #0]
 80109bc:	f7ff ff8a 	bl	80108d4 <__hexdig_fun>
 80109c0:	2800      	cmp	r0, #0
 80109c2:	d1f8      	bne.n	80109b6 <__gethex+0xb6>
 80109c4:	1bad      	subs	r5, r5, r6
 80109c6:	00ad      	lsls	r5, r5, #2
 80109c8:	e004      	b.n	80109d4 <__gethex+0xd4>
 80109ca:	2400      	movs	r4, #0
 80109cc:	4625      	mov	r5, r4
 80109ce:	e7e0      	b.n	8010992 <__gethex+0x92>
 80109d0:	2d00      	cmp	r5, #0
 80109d2:	d1f7      	bne.n	80109c4 <__gethex+0xc4>
 80109d4:	7833      	ldrb	r3, [r6, #0]
 80109d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80109da:	2b50      	cmp	r3, #80	; 0x50
 80109dc:	d13b      	bne.n	8010a56 <__gethex+0x156>
 80109de:	7873      	ldrb	r3, [r6, #1]
 80109e0:	2b2b      	cmp	r3, #43	; 0x2b
 80109e2:	d02c      	beq.n	8010a3e <__gethex+0x13e>
 80109e4:	2b2d      	cmp	r3, #45	; 0x2d
 80109e6:	d02e      	beq.n	8010a46 <__gethex+0x146>
 80109e8:	1c71      	adds	r1, r6, #1
 80109ea:	f04f 0900 	mov.w	r9, #0
 80109ee:	7808      	ldrb	r0, [r1, #0]
 80109f0:	f7ff ff70 	bl	80108d4 <__hexdig_fun>
 80109f4:	1e43      	subs	r3, r0, #1
 80109f6:	b2db      	uxtb	r3, r3
 80109f8:	2b18      	cmp	r3, #24
 80109fa:	d82c      	bhi.n	8010a56 <__gethex+0x156>
 80109fc:	f1a0 0210 	sub.w	r2, r0, #16
 8010a00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a04:	f7ff ff66 	bl	80108d4 <__hexdig_fun>
 8010a08:	1e43      	subs	r3, r0, #1
 8010a0a:	b2db      	uxtb	r3, r3
 8010a0c:	2b18      	cmp	r3, #24
 8010a0e:	d91d      	bls.n	8010a4c <__gethex+0x14c>
 8010a10:	f1b9 0f00 	cmp.w	r9, #0
 8010a14:	d000      	beq.n	8010a18 <__gethex+0x118>
 8010a16:	4252      	negs	r2, r2
 8010a18:	4415      	add	r5, r2
 8010a1a:	f8cb 1000 	str.w	r1, [fp]
 8010a1e:	b1e4      	cbz	r4, 8010a5a <__gethex+0x15a>
 8010a20:	9b00      	ldr	r3, [sp, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	bf14      	ite	ne
 8010a26:	2700      	movne	r7, #0
 8010a28:	2706      	moveq	r7, #6
 8010a2a:	4638      	mov	r0, r7
 8010a2c:	b009      	add	sp, #36	; 0x24
 8010a2e:	ecbd 8b02 	vpop	{d8}
 8010a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a36:	463e      	mov	r6, r7
 8010a38:	4625      	mov	r5, r4
 8010a3a:	2401      	movs	r4, #1
 8010a3c:	e7ca      	b.n	80109d4 <__gethex+0xd4>
 8010a3e:	f04f 0900 	mov.w	r9, #0
 8010a42:	1cb1      	adds	r1, r6, #2
 8010a44:	e7d3      	b.n	80109ee <__gethex+0xee>
 8010a46:	f04f 0901 	mov.w	r9, #1
 8010a4a:	e7fa      	b.n	8010a42 <__gethex+0x142>
 8010a4c:	230a      	movs	r3, #10
 8010a4e:	fb03 0202 	mla	r2, r3, r2, r0
 8010a52:	3a10      	subs	r2, #16
 8010a54:	e7d4      	b.n	8010a00 <__gethex+0x100>
 8010a56:	4631      	mov	r1, r6
 8010a58:	e7df      	b.n	8010a1a <__gethex+0x11a>
 8010a5a:	1bf3      	subs	r3, r6, r7
 8010a5c:	3b01      	subs	r3, #1
 8010a5e:	4621      	mov	r1, r4
 8010a60:	2b07      	cmp	r3, #7
 8010a62:	dc0b      	bgt.n	8010a7c <__gethex+0x17c>
 8010a64:	ee18 0a10 	vmov	r0, s16
 8010a68:	f000 fa9e 	bl	8010fa8 <_Balloc>
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	b940      	cbnz	r0, 8010a82 <__gethex+0x182>
 8010a70:	4b5d      	ldr	r3, [pc, #372]	; (8010be8 <__gethex+0x2e8>)
 8010a72:	4602      	mov	r2, r0
 8010a74:	21de      	movs	r1, #222	; 0xde
 8010a76:	485d      	ldr	r0, [pc, #372]	; (8010bec <__gethex+0x2ec>)
 8010a78:	f002 f8aa 	bl	8012bd0 <__assert_func>
 8010a7c:	3101      	adds	r1, #1
 8010a7e:	105b      	asrs	r3, r3, #1
 8010a80:	e7ee      	b.n	8010a60 <__gethex+0x160>
 8010a82:	f100 0914 	add.w	r9, r0, #20
 8010a86:	f04f 0b00 	mov.w	fp, #0
 8010a8a:	f1ca 0301 	rsb	r3, sl, #1
 8010a8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a92:	f8cd b000 	str.w	fp, [sp]
 8010a96:	9306      	str	r3, [sp, #24]
 8010a98:	42b7      	cmp	r7, r6
 8010a9a:	d340      	bcc.n	8010b1e <__gethex+0x21e>
 8010a9c:	9802      	ldr	r0, [sp, #8]
 8010a9e:	9b00      	ldr	r3, [sp, #0]
 8010aa0:	f840 3b04 	str.w	r3, [r0], #4
 8010aa4:	eba0 0009 	sub.w	r0, r0, r9
 8010aa8:	1080      	asrs	r0, r0, #2
 8010aaa:	0146      	lsls	r6, r0, #5
 8010aac:	6120      	str	r0, [r4, #16]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 fb6c 	bl	801118c <__hi0bits>
 8010ab4:	1a30      	subs	r0, r6, r0
 8010ab6:	f8d8 6000 	ldr.w	r6, [r8]
 8010aba:	42b0      	cmp	r0, r6
 8010abc:	dd63      	ble.n	8010b86 <__gethex+0x286>
 8010abe:	1b87      	subs	r7, r0, r6
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 ff10 	bl	80118e8 <__any_on>
 8010ac8:	4682      	mov	sl, r0
 8010aca:	b1a8      	cbz	r0, 8010af8 <__gethex+0x1f8>
 8010acc:	1e7b      	subs	r3, r7, #1
 8010ace:	1159      	asrs	r1, r3, #5
 8010ad0:	f003 021f 	and.w	r2, r3, #31
 8010ad4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010ad8:	f04f 0a01 	mov.w	sl, #1
 8010adc:	fa0a f202 	lsl.w	r2, sl, r2
 8010ae0:	420a      	tst	r2, r1
 8010ae2:	d009      	beq.n	8010af8 <__gethex+0x1f8>
 8010ae4:	4553      	cmp	r3, sl
 8010ae6:	dd05      	ble.n	8010af4 <__gethex+0x1f4>
 8010ae8:	1eb9      	subs	r1, r7, #2
 8010aea:	4620      	mov	r0, r4
 8010aec:	f000 fefc 	bl	80118e8 <__any_on>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d145      	bne.n	8010b80 <__gethex+0x280>
 8010af4:	f04f 0a02 	mov.w	sl, #2
 8010af8:	4639      	mov	r1, r7
 8010afa:	4620      	mov	r0, r4
 8010afc:	f7ff fe98 	bl	8010830 <rshift>
 8010b00:	443d      	add	r5, r7
 8010b02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010b06:	42ab      	cmp	r3, r5
 8010b08:	da4c      	bge.n	8010ba4 <__gethex+0x2a4>
 8010b0a:	ee18 0a10 	vmov	r0, s16
 8010b0e:	4621      	mov	r1, r4
 8010b10:	f000 fa8a 	bl	8011028 <_Bfree>
 8010b14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010b16:	2300      	movs	r3, #0
 8010b18:	6013      	str	r3, [r2, #0]
 8010b1a:	27a3      	movs	r7, #163	; 0xa3
 8010b1c:	e785      	b.n	8010a2a <__gethex+0x12a>
 8010b1e:	1e73      	subs	r3, r6, #1
 8010b20:	9a05      	ldr	r2, [sp, #20]
 8010b22:	9303      	str	r3, [sp, #12]
 8010b24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d019      	beq.n	8010b60 <__gethex+0x260>
 8010b2c:	f1bb 0f20 	cmp.w	fp, #32
 8010b30:	d107      	bne.n	8010b42 <__gethex+0x242>
 8010b32:	9b02      	ldr	r3, [sp, #8]
 8010b34:	9a00      	ldr	r2, [sp, #0]
 8010b36:	f843 2b04 	str.w	r2, [r3], #4
 8010b3a:	9302      	str	r3, [sp, #8]
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	469b      	mov	fp, r3
 8010b42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010b46:	f7ff fec5 	bl	80108d4 <__hexdig_fun>
 8010b4a:	9b00      	ldr	r3, [sp, #0]
 8010b4c:	f000 000f 	and.w	r0, r0, #15
 8010b50:	fa00 f00b 	lsl.w	r0, r0, fp
 8010b54:	4303      	orrs	r3, r0
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	f10b 0b04 	add.w	fp, fp, #4
 8010b5c:	9b03      	ldr	r3, [sp, #12]
 8010b5e:	e00d      	b.n	8010b7c <__gethex+0x27c>
 8010b60:	9b03      	ldr	r3, [sp, #12]
 8010b62:	9a06      	ldr	r2, [sp, #24]
 8010b64:	4413      	add	r3, r2
 8010b66:	42bb      	cmp	r3, r7
 8010b68:	d3e0      	bcc.n	8010b2c <__gethex+0x22c>
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	9901      	ldr	r1, [sp, #4]
 8010b6e:	9307      	str	r3, [sp, #28]
 8010b70:	4652      	mov	r2, sl
 8010b72:	f001 fa09 	bl	8011f88 <strncmp>
 8010b76:	9b07      	ldr	r3, [sp, #28]
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	d1d7      	bne.n	8010b2c <__gethex+0x22c>
 8010b7c:	461e      	mov	r6, r3
 8010b7e:	e78b      	b.n	8010a98 <__gethex+0x198>
 8010b80:	f04f 0a03 	mov.w	sl, #3
 8010b84:	e7b8      	b.n	8010af8 <__gethex+0x1f8>
 8010b86:	da0a      	bge.n	8010b9e <__gethex+0x29e>
 8010b88:	1a37      	subs	r7, r6, r0
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	ee18 0a10 	vmov	r0, s16
 8010b90:	463a      	mov	r2, r7
 8010b92:	f000 fc65 	bl	8011460 <__lshift>
 8010b96:	1bed      	subs	r5, r5, r7
 8010b98:	4604      	mov	r4, r0
 8010b9a:	f100 0914 	add.w	r9, r0, #20
 8010b9e:	f04f 0a00 	mov.w	sl, #0
 8010ba2:	e7ae      	b.n	8010b02 <__gethex+0x202>
 8010ba4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010ba8:	42a8      	cmp	r0, r5
 8010baa:	dd72      	ble.n	8010c92 <__gethex+0x392>
 8010bac:	1b45      	subs	r5, r0, r5
 8010bae:	42ae      	cmp	r6, r5
 8010bb0:	dc36      	bgt.n	8010c20 <__gethex+0x320>
 8010bb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010bb6:	2b02      	cmp	r3, #2
 8010bb8:	d02a      	beq.n	8010c10 <__gethex+0x310>
 8010bba:	2b03      	cmp	r3, #3
 8010bbc:	d02c      	beq.n	8010c18 <__gethex+0x318>
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d11c      	bne.n	8010bfc <__gethex+0x2fc>
 8010bc2:	42ae      	cmp	r6, r5
 8010bc4:	d11a      	bne.n	8010bfc <__gethex+0x2fc>
 8010bc6:	2e01      	cmp	r6, #1
 8010bc8:	d112      	bne.n	8010bf0 <__gethex+0x2f0>
 8010bca:	9a04      	ldr	r2, [sp, #16]
 8010bcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bd0:	6013      	str	r3, [r2, #0]
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	6123      	str	r3, [r4, #16]
 8010bd6:	f8c9 3000 	str.w	r3, [r9]
 8010bda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010bdc:	2762      	movs	r7, #98	; 0x62
 8010bde:	601c      	str	r4, [r3, #0]
 8010be0:	e723      	b.n	8010a2a <__gethex+0x12a>
 8010be2:	bf00      	nop
 8010be4:	08016ba0 	.word	0x08016ba0
 8010be8:	08016b28 	.word	0x08016b28
 8010bec:	08016b39 	.word	0x08016b39
 8010bf0:	1e71      	subs	r1, r6, #1
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f000 fe78 	bl	80118e8 <__any_on>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d1e6      	bne.n	8010bca <__gethex+0x2ca>
 8010bfc:	ee18 0a10 	vmov	r0, s16
 8010c00:	4621      	mov	r1, r4
 8010c02:	f000 fa11 	bl	8011028 <_Bfree>
 8010c06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c08:	2300      	movs	r3, #0
 8010c0a:	6013      	str	r3, [r2, #0]
 8010c0c:	2750      	movs	r7, #80	; 0x50
 8010c0e:	e70c      	b.n	8010a2a <__gethex+0x12a>
 8010c10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d1f2      	bne.n	8010bfc <__gethex+0x2fc>
 8010c16:	e7d8      	b.n	8010bca <__gethex+0x2ca>
 8010c18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d1d5      	bne.n	8010bca <__gethex+0x2ca>
 8010c1e:	e7ed      	b.n	8010bfc <__gethex+0x2fc>
 8010c20:	1e6f      	subs	r7, r5, #1
 8010c22:	f1ba 0f00 	cmp.w	sl, #0
 8010c26:	d131      	bne.n	8010c8c <__gethex+0x38c>
 8010c28:	b127      	cbz	r7, 8010c34 <__gethex+0x334>
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	f000 fe5b 	bl	80118e8 <__any_on>
 8010c32:	4682      	mov	sl, r0
 8010c34:	117b      	asrs	r3, r7, #5
 8010c36:	2101      	movs	r1, #1
 8010c38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010c3c:	f007 071f 	and.w	r7, r7, #31
 8010c40:	fa01 f707 	lsl.w	r7, r1, r7
 8010c44:	421f      	tst	r7, r3
 8010c46:	4629      	mov	r1, r5
 8010c48:	4620      	mov	r0, r4
 8010c4a:	bf18      	it	ne
 8010c4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8010c50:	1b76      	subs	r6, r6, r5
 8010c52:	f7ff fded 	bl	8010830 <rshift>
 8010c56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010c5a:	2702      	movs	r7, #2
 8010c5c:	f1ba 0f00 	cmp.w	sl, #0
 8010c60:	d048      	beq.n	8010cf4 <__gethex+0x3f4>
 8010c62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d015      	beq.n	8010c96 <__gethex+0x396>
 8010c6a:	2b03      	cmp	r3, #3
 8010c6c:	d017      	beq.n	8010c9e <__gethex+0x39e>
 8010c6e:	2b01      	cmp	r3, #1
 8010c70:	d109      	bne.n	8010c86 <__gethex+0x386>
 8010c72:	f01a 0f02 	tst.w	sl, #2
 8010c76:	d006      	beq.n	8010c86 <__gethex+0x386>
 8010c78:	f8d9 0000 	ldr.w	r0, [r9]
 8010c7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010c80:	f01a 0f01 	tst.w	sl, #1
 8010c84:	d10e      	bne.n	8010ca4 <__gethex+0x3a4>
 8010c86:	f047 0710 	orr.w	r7, r7, #16
 8010c8a:	e033      	b.n	8010cf4 <__gethex+0x3f4>
 8010c8c:	f04f 0a01 	mov.w	sl, #1
 8010c90:	e7d0      	b.n	8010c34 <__gethex+0x334>
 8010c92:	2701      	movs	r7, #1
 8010c94:	e7e2      	b.n	8010c5c <__gethex+0x35c>
 8010c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010c98:	f1c3 0301 	rsb	r3, r3, #1
 8010c9c:	9315      	str	r3, [sp, #84]	; 0x54
 8010c9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d0f0      	beq.n	8010c86 <__gethex+0x386>
 8010ca4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010ca8:	f104 0314 	add.w	r3, r4, #20
 8010cac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010cb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010cb4:	f04f 0c00 	mov.w	ip, #0
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010cc2:	d01c      	beq.n	8010cfe <__gethex+0x3fe>
 8010cc4:	3201      	adds	r2, #1
 8010cc6:	6002      	str	r2, [r0, #0]
 8010cc8:	2f02      	cmp	r7, #2
 8010cca:	f104 0314 	add.w	r3, r4, #20
 8010cce:	d13f      	bne.n	8010d50 <__gethex+0x450>
 8010cd0:	f8d8 2000 	ldr.w	r2, [r8]
 8010cd4:	3a01      	subs	r2, #1
 8010cd6:	42b2      	cmp	r2, r6
 8010cd8:	d10a      	bne.n	8010cf0 <__gethex+0x3f0>
 8010cda:	1171      	asrs	r1, r6, #5
 8010cdc:	2201      	movs	r2, #1
 8010cde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010ce2:	f006 061f 	and.w	r6, r6, #31
 8010ce6:	fa02 f606 	lsl.w	r6, r2, r6
 8010cea:	421e      	tst	r6, r3
 8010cec:	bf18      	it	ne
 8010cee:	4617      	movne	r7, r2
 8010cf0:	f047 0720 	orr.w	r7, r7, #32
 8010cf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010cf6:	601c      	str	r4, [r3, #0]
 8010cf8:	9b04      	ldr	r3, [sp, #16]
 8010cfa:	601d      	str	r5, [r3, #0]
 8010cfc:	e695      	b.n	8010a2a <__gethex+0x12a>
 8010cfe:	4299      	cmp	r1, r3
 8010d00:	f843 cc04 	str.w	ip, [r3, #-4]
 8010d04:	d8d8      	bhi.n	8010cb8 <__gethex+0x3b8>
 8010d06:	68a3      	ldr	r3, [r4, #8]
 8010d08:	459b      	cmp	fp, r3
 8010d0a:	db19      	blt.n	8010d40 <__gethex+0x440>
 8010d0c:	6861      	ldr	r1, [r4, #4]
 8010d0e:	ee18 0a10 	vmov	r0, s16
 8010d12:	3101      	adds	r1, #1
 8010d14:	f000 f948 	bl	8010fa8 <_Balloc>
 8010d18:	4681      	mov	r9, r0
 8010d1a:	b918      	cbnz	r0, 8010d24 <__gethex+0x424>
 8010d1c:	4b1a      	ldr	r3, [pc, #104]	; (8010d88 <__gethex+0x488>)
 8010d1e:	4602      	mov	r2, r0
 8010d20:	2184      	movs	r1, #132	; 0x84
 8010d22:	e6a8      	b.n	8010a76 <__gethex+0x176>
 8010d24:	6922      	ldr	r2, [r4, #16]
 8010d26:	3202      	adds	r2, #2
 8010d28:	f104 010c 	add.w	r1, r4, #12
 8010d2c:	0092      	lsls	r2, r2, #2
 8010d2e:	300c      	adds	r0, #12
 8010d30:	f7fc fe62 	bl	800d9f8 <memcpy>
 8010d34:	4621      	mov	r1, r4
 8010d36:	ee18 0a10 	vmov	r0, s16
 8010d3a:	f000 f975 	bl	8011028 <_Bfree>
 8010d3e:	464c      	mov	r4, r9
 8010d40:	6923      	ldr	r3, [r4, #16]
 8010d42:	1c5a      	adds	r2, r3, #1
 8010d44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d48:	6122      	str	r2, [r4, #16]
 8010d4a:	2201      	movs	r2, #1
 8010d4c:	615a      	str	r2, [r3, #20]
 8010d4e:	e7bb      	b.n	8010cc8 <__gethex+0x3c8>
 8010d50:	6922      	ldr	r2, [r4, #16]
 8010d52:	455a      	cmp	r2, fp
 8010d54:	dd0b      	ble.n	8010d6e <__gethex+0x46e>
 8010d56:	2101      	movs	r1, #1
 8010d58:	4620      	mov	r0, r4
 8010d5a:	f7ff fd69 	bl	8010830 <rshift>
 8010d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d62:	3501      	adds	r5, #1
 8010d64:	42ab      	cmp	r3, r5
 8010d66:	f6ff aed0 	blt.w	8010b0a <__gethex+0x20a>
 8010d6a:	2701      	movs	r7, #1
 8010d6c:	e7c0      	b.n	8010cf0 <__gethex+0x3f0>
 8010d6e:	f016 061f 	ands.w	r6, r6, #31
 8010d72:	d0fa      	beq.n	8010d6a <__gethex+0x46a>
 8010d74:	4453      	add	r3, sl
 8010d76:	f1c6 0620 	rsb	r6, r6, #32
 8010d7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010d7e:	f000 fa05 	bl	801118c <__hi0bits>
 8010d82:	42b0      	cmp	r0, r6
 8010d84:	dbe7      	blt.n	8010d56 <__gethex+0x456>
 8010d86:	e7f0      	b.n	8010d6a <__gethex+0x46a>
 8010d88:	08016b28 	.word	0x08016b28

08010d8c <L_shift>:
 8010d8c:	f1c2 0208 	rsb	r2, r2, #8
 8010d90:	0092      	lsls	r2, r2, #2
 8010d92:	b570      	push	{r4, r5, r6, lr}
 8010d94:	f1c2 0620 	rsb	r6, r2, #32
 8010d98:	6843      	ldr	r3, [r0, #4]
 8010d9a:	6804      	ldr	r4, [r0, #0]
 8010d9c:	fa03 f506 	lsl.w	r5, r3, r6
 8010da0:	432c      	orrs	r4, r5
 8010da2:	40d3      	lsrs	r3, r2
 8010da4:	6004      	str	r4, [r0, #0]
 8010da6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010daa:	4288      	cmp	r0, r1
 8010dac:	d3f4      	bcc.n	8010d98 <L_shift+0xc>
 8010dae:	bd70      	pop	{r4, r5, r6, pc}

08010db0 <__match>:
 8010db0:	b530      	push	{r4, r5, lr}
 8010db2:	6803      	ldr	r3, [r0, #0]
 8010db4:	3301      	adds	r3, #1
 8010db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dba:	b914      	cbnz	r4, 8010dc2 <__match+0x12>
 8010dbc:	6003      	str	r3, [r0, #0]
 8010dbe:	2001      	movs	r0, #1
 8010dc0:	bd30      	pop	{r4, r5, pc}
 8010dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010dc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010dca:	2d19      	cmp	r5, #25
 8010dcc:	bf98      	it	ls
 8010dce:	3220      	addls	r2, #32
 8010dd0:	42a2      	cmp	r2, r4
 8010dd2:	d0f0      	beq.n	8010db6 <__match+0x6>
 8010dd4:	2000      	movs	r0, #0
 8010dd6:	e7f3      	b.n	8010dc0 <__match+0x10>

08010dd8 <__hexnan>:
 8010dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ddc:	680b      	ldr	r3, [r1, #0]
 8010dde:	115e      	asrs	r6, r3, #5
 8010de0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010de4:	f013 031f 	ands.w	r3, r3, #31
 8010de8:	b087      	sub	sp, #28
 8010dea:	bf18      	it	ne
 8010dec:	3604      	addne	r6, #4
 8010dee:	2500      	movs	r5, #0
 8010df0:	1f37      	subs	r7, r6, #4
 8010df2:	4690      	mov	r8, r2
 8010df4:	6802      	ldr	r2, [r0, #0]
 8010df6:	9301      	str	r3, [sp, #4]
 8010df8:	4682      	mov	sl, r0
 8010dfa:	f846 5c04 	str.w	r5, [r6, #-4]
 8010dfe:	46b9      	mov	r9, r7
 8010e00:	463c      	mov	r4, r7
 8010e02:	9502      	str	r5, [sp, #8]
 8010e04:	46ab      	mov	fp, r5
 8010e06:	7851      	ldrb	r1, [r2, #1]
 8010e08:	1c53      	adds	r3, r2, #1
 8010e0a:	9303      	str	r3, [sp, #12]
 8010e0c:	b341      	cbz	r1, 8010e60 <__hexnan+0x88>
 8010e0e:	4608      	mov	r0, r1
 8010e10:	9205      	str	r2, [sp, #20]
 8010e12:	9104      	str	r1, [sp, #16]
 8010e14:	f7ff fd5e 	bl	80108d4 <__hexdig_fun>
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d14f      	bne.n	8010ebc <__hexnan+0xe4>
 8010e1c:	9904      	ldr	r1, [sp, #16]
 8010e1e:	9a05      	ldr	r2, [sp, #20]
 8010e20:	2920      	cmp	r1, #32
 8010e22:	d818      	bhi.n	8010e56 <__hexnan+0x7e>
 8010e24:	9b02      	ldr	r3, [sp, #8]
 8010e26:	459b      	cmp	fp, r3
 8010e28:	dd13      	ble.n	8010e52 <__hexnan+0x7a>
 8010e2a:	454c      	cmp	r4, r9
 8010e2c:	d206      	bcs.n	8010e3c <__hexnan+0x64>
 8010e2e:	2d07      	cmp	r5, #7
 8010e30:	dc04      	bgt.n	8010e3c <__hexnan+0x64>
 8010e32:	462a      	mov	r2, r5
 8010e34:	4649      	mov	r1, r9
 8010e36:	4620      	mov	r0, r4
 8010e38:	f7ff ffa8 	bl	8010d8c <L_shift>
 8010e3c:	4544      	cmp	r4, r8
 8010e3e:	d950      	bls.n	8010ee2 <__hexnan+0x10a>
 8010e40:	2300      	movs	r3, #0
 8010e42:	f1a4 0904 	sub.w	r9, r4, #4
 8010e46:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e4a:	f8cd b008 	str.w	fp, [sp, #8]
 8010e4e:	464c      	mov	r4, r9
 8010e50:	461d      	mov	r5, r3
 8010e52:	9a03      	ldr	r2, [sp, #12]
 8010e54:	e7d7      	b.n	8010e06 <__hexnan+0x2e>
 8010e56:	2929      	cmp	r1, #41	; 0x29
 8010e58:	d156      	bne.n	8010f08 <__hexnan+0x130>
 8010e5a:	3202      	adds	r2, #2
 8010e5c:	f8ca 2000 	str.w	r2, [sl]
 8010e60:	f1bb 0f00 	cmp.w	fp, #0
 8010e64:	d050      	beq.n	8010f08 <__hexnan+0x130>
 8010e66:	454c      	cmp	r4, r9
 8010e68:	d206      	bcs.n	8010e78 <__hexnan+0xa0>
 8010e6a:	2d07      	cmp	r5, #7
 8010e6c:	dc04      	bgt.n	8010e78 <__hexnan+0xa0>
 8010e6e:	462a      	mov	r2, r5
 8010e70:	4649      	mov	r1, r9
 8010e72:	4620      	mov	r0, r4
 8010e74:	f7ff ff8a 	bl	8010d8c <L_shift>
 8010e78:	4544      	cmp	r4, r8
 8010e7a:	d934      	bls.n	8010ee6 <__hexnan+0x10e>
 8010e7c:	f1a8 0204 	sub.w	r2, r8, #4
 8010e80:	4623      	mov	r3, r4
 8010e82:	f853 1b04 	ldr.w	r1, [r3], #4
 8010e86:	f842 1f04 	str.w	r1, [r2, #4]!
 8010e8a:	429f      	cmp	r7, r3
 8010e8c:	d2f9      	bcs.n	8010e82 <__hexnan+0xaa>
 8010e8e:	1b3b      	subs	r3, r7, r4
 8010e90:	f023 0303 	bic.w	r3, r3, #3
 8010e94:	3304      	adds	r3, #4
 8010e96:	3401      	adds	r4, #1
 8010e98:	3e03      	subs	r6, #3
 8010e9a:	42b4      	cmp	r4, r6
 8010e9c:	bf88      	it	hi
 8010e9e:	2304      	movhi	r3, #4
 8010ea0:	4443      	add	r3, r8
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f843 2b04 	str.w	r2, [r3], #4
 8010ea8:	429f      	cmp	r7, r3
 8010eaa:	d2fb      	bcs.n	8010ea4 <__hexnan+0xcc>
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	b91b      	cbnz	r3, 8010eb8 <__hexnan+0xe0>
 8010eb0:	4547      	cmp	r7, r8
 8010eb2:	d127      	bne.n	8010f04 <__hexnan+0x12c>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	603b      	str	r3, [r7, #0]
 8010eb8:	2005      	movs	r0, #5
 8010eba:	e026      	b.n	8010f0a <__hexnan+0x132>
 8010ebc:	3501      	adds	r5, #1
 8010ebe:	2d08      	cmp	r5, #8
 8010ec0:	f10b 0b01 	add.w	fp, fp, #1
 8010ec4:	dd06      	ble.n	8010ed4 <__hexnan+0xfc>
 8010ec6:	4544      	cmp	r4, r8
 8010ec8:	d9c3      	bls.n	8010e52 <__hexnan+0x7a>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ed0:	2501      	movs	r5, #1
 8010ed2:	3c04      	subs	r4, #4
 8010ed4:	6822      	ldr	r2, [r4, #0]
 8010ed6:	f000 000f 	and.w	r0, r0, #15
 8010eda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010ede:	6022      	str	r2, [r4, #0]
 8010ee0:	e7b7      	b.n	8010e52 <__hexnan+0x7a>
 8010ee2:	2508      	movs	r5, #8
 8010ee4:	e7b5      	b.n	8010e52 <__hexnan+0x7a>
 8010ee6:	9b01      	ldr	r3, [sp, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d0df      	beq.n	8010eac <__hexnan+0xd4>
 8010eec:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef0:	f1c3 0320 	rsb	r3, r3, #32
 8010ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8010ef8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010efc:	401a      	ands	r2, r3
 8010efe:	f846 2c04 	str.w	r2, [r6, #-4]
 8010f02:	e7d3      	b.n	8010eac <__hexnan+0xd4>
 8010f04:	3f04      	subs	r7, #4
 8010f06:	e7d1      	b.n	8010eac <__hexnan+0xd4>
 8010f08:	2004      	movs	r0, #4
 8010f0a:	b007      	add	sp, #28
 8010f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010f10 <_isatty_r>:
 8010f10:	b538      	push	{r3, r4, r5, lr}
 8010f12:	4d06      	ldr	r5, [pc, #24]	; (8010f2c <_isatty_r+0x1c>)
 8010f14:	2300      	movs	r3, #0
 8010f16:	4604      	mov	r4, r0
 8010f18:	4608      	mov	r0, r1
 8010f1a:	602b      	str	r3, [r5, #0]
 8010f1c:	f7f2 ff17 	bl	8003d4e <_isatty>
 8010f20:	1c43      	adds	r3, r0, #1
 8010f22:	d102      	bne.n	8010f2a <_isatty_r+0x1a>
 8010f24:	682b      	ldr	r3, [r5, #0]
 8010f26:	b103      	cbz	r3, 8010f2a <_isatty_r+0x1a>
 8010f28:	6023      	str	r3, [r4, #0]
 8010f2a:	bd38      	pop	{r3, r4, r5, pc}
 8010f2c:	2000a8ac 	.word	0x2000a8ac

08010f30 <_localeconv_r>:
 8010f30:	4800      	ldr	r0, [pc, #0]	; (8010f34 <_localeconv_r+0x4>)
 8010f32:	4770      	bx	lr
 8010f34:	200002a8 	.word	0x200002a8

08010f38 <_lseek_r>:
 8010f38:	b538      	push	{r3, r4, r5, lr}
 8010f3a:	4d07      	ldr	r5, [pc, #28]	; (8010f58 <_lseek_r+0x20>)
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	4608      	mov	r0, r1
 8010f40:	4611      	mov	r1, r2
 8010f42:	2200      	movs	r2, #0
 8010f44:	602a      	str	r2, [r5, #0]
 8010f46:	461a      	mov	r2, r3
 8010f48:	f7f2 ff0c 	bl	8003d64 <_lseek>
 8010f4c:	1c43      	adds	r3, r0, #1
 8010f4e:	d102      	bne.n	8010f56 <_lseek_r+0x1e>
 8010f50:	682b      	ldr	r3, [r5, #0]
 8010f52:	b103      	cbz	r3, 8010f56 <_lseek_r+0x1e>
 8010f54:	6023      	str	r3, [r4, #0]
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
 8010f58:	2000a8ac 	.word	0x2000a8ac

08010f5c <malloc>:
 8010f5c:	4b02      	ldr	r3, [pc, #8]	; (8010f68 <malloc+0xc>)
 8010f5e:	4601      	mov	r1, r0
 8010f60:	6818      	ldr	r0, [r3, #0]
 8010f62:	f7fc bdcb 	b.w	800dafc <_malloc_r>
 8010f66:	bf00      	nop
 8010f68:	20000150 	.word	0x20000150

08010f6c <__ascii_mbtowc>:
 8010f6c:	b082      	sub	sp, #8
 8010f6e:	b901      	cbnz	r1, 8010f72 <__ascii_mbtowc+0x6>
 8010f70:	a901      	add	r1, sp, #4
 8010f72:	b142      	cbz	r2, 8010f86 <__ascii_mbtowc+0x1a>
 8010f74:	b14b      	cbz	r3, 8010f8a <__ascii_mbtowc+0x1e>
 8010f76:	7813      	ldrb	r3, [r2, #0]
 8010f78:	600b      	str	r3, [r1, #0]
 8010f7a:	7812      	ldrb	r2, [r2, #0]
 8010f7c:	1e10      	subs	r0, r2, #0
 8010f7e:	bf18      	it	ne
 8010f80:	2001      	movne	r0, #1
 8010f82:	b002      	add	sp, #8
 8010f84:	4770      	bx	lr
 8010f86:	4610      	mov	r0, r2
 8010f88:	e7fb      	b.n	8010f82 <__ascii_mbtowc+0x16>
 8010f8a:	f06f 0001 	mvn.w	r0, #1
 8010f8e:	e7f8      	b.n	8010f82 <__ascii_mbtowc+0x16>

08010f90 <__malloc_lock>:
 8010f90:	4801      	ldr	r0, [pc, #4]	; (8010f98 <__malloc_lock+0x8>)
 8010f92:	f7fc bcca 	b.w	800d92a <__retarget_lock_acquire_recursive>
 8010f96:	bf00      	nop
 8010f98:	2000a8a0 	.word	0x2000a8a0

08010f9c <__malloc_unlock>:
 8010f9c:	4801      	ldr	r0, [pc, #4]	; (8010fa4 <__malloc_unlock+0x8>)
 8010f9e:	f7fc bcc5 	b.w	800d92c <__retarget_lock_release_recursive>
 8010fa2:	bf00      	nop
 8010fa4:	2000a8a0 	.word	0x2000a8a0

08010fa8 <_Balloc>:
 8010fa8:	b570      	push	{r4, r5, r6, lr}
 8010faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010fac:	4604      	mov	r4, r0
 8010fae:	460d      	mov	r5, r1
 8010fb0:	b976      	cbnz	r6, 8010fd0 <_Balloc+0x28>
 8010fb2:	2010      	movs	r0, #16
 8010fb4:	f7ff ffd2 	bl	8010f5c <malloc>
 8010fb8:	4602      	mov	r2, r0
 8010fba:	6260      	str	r0, [r4, #36]	; 0x24
 8010fbc:	b920      	cbnz	r0, 8010fc8 <_Balloc+0x20>
 8010fbe:	4b18      	ldr	r3, [pc, #96]	; (8011020 <_Balloc+0x78>)
 8010fc0:	4818      	ldr	r0, [pc, #96]	; (8011024 <_Balloc+0x7c>)
 8010fc2:	2166      	movs	r1, #102	; 0x66
 8010fc4:	f001 fe04 	bl	8012bd0 <__assert_func>
 8010fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010fcc:	6006      	str	r6, [r0, #0]
 8010fce:	60c6      	str	r6, [r0, #12]
 8010fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010fd2:	68f3      	ldr	r3, [r6, #12]
 8010fd4:	b183      	cbz	r3, 8010ff8 <_Balloc+0x50>
 8010fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010fde:	b9b8      	cbnz	r0, 8011010 <_Balloc+0x68>
 8010fe0:	2101      	movs	r1, #1
 8010fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8010fe6:	1d72      	adds	r2, r6, #5
 8010fe8:	0092      	lsls	r2, r2, #2
 8010fea:	4620      	mov	r0, r4
 8010fec:	f000 fc9d 	bl	801192a <_calloc_r>
 8010ff0:	b160      	cbz	r0, 801100c <_Balloc+0x64>
 8010ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ff6:	e00e      	b.n	8011016 <_Balloc+0x6e>
 8010ff8:	2221      	movs	r2, #33	; 0x21
 8010ffa:	2104      	movs	r1, #4
 8010ffc:	4620      	mov	r0, r4
 8010ffe:	f000 fc94 	bl	801192a <_calloc_r>
 8011002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011004:	60f0      	str	r0, [r6, #12]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d1e4      	bne.n	8010fd6 <_Balloc+0x2e>
 801100c:	2000      	movs	r0, #0
 801100e:	bd70      	pop	{r4, r5, r6, pc}
 8011010:	6802      	ldr	r2, [r0, #0]
 8011012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011016:	2300      	movs	r3, #0
 8011018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801101c:	e7f7      	b.n	801100e <_Balloc+0x66>
 801101e:	bf00      	nop
 8011020:	08016ab6 	.word	0x08016ab6
 8011024:	08016bb4 	.word	0x08016bb4

08011028 <_Bfree>:
 8011028:	b570      	push	{r4, r5, r6, lr}
 801102a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801102c:	4605      	mov	r5, r0
 801102e:	460c      	mov	r4, r1
 8011030:	b976      	cbnz	r6, 8011050 <_Bfree+0x28>
 8011032:	2010      	movs	r0, #16
 8011034:	f7ff ff92 	bl	8010f5c <malloc>
 8011038:	4602      	mov	r2, r0
 801103a:	6268      	str	r0, [r5, #36]	; 0x24
 801103c:	b920      	cbnz	r0, 8011048 <_Bfree+0x20>
 801103e:	4b09      	ldr	r3, [pc, #36]	; (8011064 <_Bfree+0x3c>)
 8011040:	4809      	ldr	r0, [pc, #36]	; (8011068 <_Bfree+0x40>)
 8011042:	218a      	movs	r1, #138	; 0x8a
 8011044:	f001 fdc4 	bl	8012bd0 <__assert_func>
 8011048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801104c:	6006      	str	r6, [r0, #0]
 801104e:	60c6      	str	r6, [r0, #12]
 8011050:	b13c      	cbz	r4, 8011062 <_Bfree+0x3a>
 8011052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011054:	6862      	ldr	r2, [r4, #4]
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801105c:	6021      	str	r1, [r4, #0]
 801105e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011062:	bd70      	pop	{r4, r5, r6, pc}
 8011064:	08016ab6 	.word	0x08016ab6
 8011068:	08016bb4 	.word	0x08016bb4

0801106c <__multadd>:
 801106c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011070:	690d      	ldr	r5, [r1, #16]
 8011072:	4607      	mov	r7, r0
 8011074:	460c      	mov	r4, r1
 8011076:	461e      	mov	r6, r3
 8011078:	f101 0c14 	add.w	ip, r1, #20
 801107c:	2000      	movs	r0, #0
 801107e:	f8dc 3000 	ldr.w	r3, [ip]
 8011082:	b299      	uxth	r1, r3
 8011084:	fb02 6101 	mla	r1, r2, r1, r6
 8011088:	0c1e      	lsrs	r6, r3, #16
 801108a:	0c0b      	lsrs	r3, r1, #16
 801108c:	fb02 3306 	mla	r3, r2, r6, r3
 8011090:	b289      	uxth	r1, r1
 8011092:	3001      	adds	r0, #1
 8011094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011098:	4285      	cmp	r5, r0
 801109a:	f84c 1b04 	str.w	r1, [ip], #4
 801109e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110a2:	dcec      	bgt.n	801107e <__multadd+0x12>
 80110a4:	b30e      	cbz	r6, 80110ea <__multadd+0x7e>
 80110a6:	68a3      	ldr	r3, [r4, #8]
 80110a8:	42ab      	cmp	r3, r5
 80110aa:	dc19      	bgt.n	80110e0 <__multadd+0x74>
 80110ac:	6861      	ldr	r1, [r4, #4]
 80110ae:	4638      	mov	r0, r7
 80110b0:	3101      	adds	r1, #1
 80110b2:	f7ff ff79 	bl	8010fa8 <_Balloc>
 80110b6:	4680      	mov	r8, r0
 80110b8:	b928      	cbnz	r0, 80110c6 <__multadd+0x5a>
 80110ba:	4602      	mov	r2, r0
 80110bc:	4b0c      	ldr	r3, [pc, #48]	; (80110f0 <__multadd+0x84>)
 80110be:	480d      	ldr	r0, [pc, #52]	; (80110f4 <__multadd+0x88>)
 80110c0:	21b5      	movs	r1, #181	; 0xb5
 80110c2:	f001 fd85 	bl	8012bd0 <__assert_func>
 80110c6:	6922      	ldr	r2, [r4, #16]
 80110c8:	3202      	adds	r2, #2
 80110ca:	f104 010c 	add.w	r1, r4, #12
 80110ce:	0092      	lsls	r2, r2, #2
 80110d0:	300c      	adds	r0, #12
 80110d2:	f7fc fc91 	bl	800d9f8 <memcpy>
 80110d6:	4621      	mov	r1, r4
 80110d8:	4638      	mov	r0, r7
 80110da:	f7ff ffa5 	bl	8011028 <_Bfree>
 80110de:	4644      	mov	r4, r8
 80110e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80110e4:	3501      	adds	r5, #1
 80110e6:	615e      	str	r6, [r3, #20]
 80110e8:	6125      	str	r5, [r4, #16]
 80110ea:	4620      	mov	r0, r4
 80110ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110f0:	08016b28 	.word	0x08016b28
 80110f4:	08016bb4 	.word	0x08016bb4

080110f8 <__s2b>:
 80110f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110fc:	460c      	mov	r4, r1
 80110fe:	4615      	mov	r5, r2
 8011100:	461f      	mov	r7, r3
 8011102:	2209      	movs	r2, #9
 8011104:	3308      	adds	r3, #8
 8011106:	4606      	mov	r6, r0
 8011108:	fb93 f3f2 	sdiv	r3, r3, r2
 801110c:	2100      	movs	r1, #0
 801110e:	2201      	movs	r2, #1
 8011110:	429a      	cmp	r2, r3
 8011112:	db09      	blt.n	8011128 <__s2b+0x30>
 8011114:	4630      	mov	r0, r6
 8011116:	f7ff ff47 	bl	8010fa8 <_Balloc>
 801111a:	b940      	cbnz	r0, 801112e <__s2b+0x36>
 801111c:	4602      	mov	r2, r0
 801111e:	4b19      	ldr	r3, [pc, #100]	; (8011184 <__s2b+0x8c>)
 8011120:	4819      	ldr	r0, [pc, #100]	; (8011188 <__s2b+0x90>)
 8011122:	21ce      	movs	r1, #206	; 0xce
 8011124:	f001 fd54 	bl	8012bd0 <__assert_func>
 8011128:	0052      	lsls	r2, r2, #1
 801112a:	3101      	adds	r1, #1
 801112c:	e7f0      	b.n	8011110 <__s2b+0x18>
 801112e:	9b08      	ldr	r3, [sp, #32]
 8011130:	6143      	str	r3, [r0, #20]
 8011132:	2d09      	cmp	r5, #9
 8011134:	f04f 0301 	mov.w	r3, #1
 8011138:	6103      	str	r3, [r0, #16]
 801113a:	dd16      	ble.n	801116a <__s2b+0x72>
 801113c:	f104 0909 	add.w	r9, r4, #9
 8011140:	46c8      	mov	r8, r9
 8011142:	442c      	add	r4, r5
 8011144:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011148:	4601      	mov	r1, r0
 801114a:	3b30      	subs	r3, #48	; 0x30
 801114c:	220a      	movs	r2, #10
 801114e:	4630      	mov	r0, r6
 8011150:	f7ff ff8c 	bl	801106c <__multadd>
 8011154:	45a0      	cmp	r8, r4
 8011156:	d1f5      	bne.n	8011144 <__s2b+0x4c>
 8011158:	f1a5 0408 	sub.w	r4, r5, #8
 801115c:	444c      	add	r4, r9
 801115e:	1b2d      	subs	r5, r5, r4
 8011160:	1963      	adds	r3, r4, r5
 8011162:	42bb      	cmp	r3, r7
 8011164:	db04      	blt.n	8011170 <__s2b+0x78>
 8011166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801116a:	340a      	adds	r4, #10
 801116c:	2509      	movs	r5, #9
 801116e:	e7f6      	b.n	801115e <__s2b+0x66>
 8011170:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011174:	4601      	mov	r1, r0
 8011176:	3b30      	subs	r3, #48	; 0x30
 8011178:	220a      	movs	r2, #10
 801117a:	4630      	mov	r0, r6
 801117c:	f7ff ff76 	bl	801106c <__multadd>
 8011180:	e7ee      	b.n	8011160 <__s2b+0x68>
 8011182:	bf00      	nop
 8011184:	08016b28 	.word	0x08016b28
 8011188:	08016bb4 	.word	0x08016bb4

0801118c <__hi0bits>:
 801118c:	0c03      	lsrs	r3, r0, #16
 801118e:	041b      	lsls	r3, r3, #16
 8011190:	b9d3      	cbnz	r3, 80111c8 <__hi0bits+0x3c>
 8011192:	0400      	lsls	r0, r0, #16
 8011194:	2310      	movs	r3, #16
 8011196:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801119a:	bf04      	itt	eq
 801119c:	0200      	lsleq	r0, r0, #8
 801119e:	3308      	addeq	r3, #8
 80111a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80111a4:	bf04      	itt	eq
 80111a6:	0100      	lsleq	r0, r0, #4
 80111a8:	3304      	addeq	r3, #4
 80111aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80111ae:	bf04      	itt	eq
 80111b0:	0080      	lsleq	r0, r0, #2
 80111b2:	3302      	addeq	r3, #2
 80111b4:	2800      	cmp	r0, #0
 80111b6:	db05      	blt.n	80111c4 <__hi0bits+0x38>
 80111b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80111bc:	f103 0301 	add.w	r3, r3, #1
 80111c0:	bf08      	it	eq
 80111c2:	2320      	moveq	r3, #32
 80111c4:	4618      	mov	r0, r3
 80111c6:	4770      	bx	lr
 80111c8:	2300      	movs	r3, #0
 80111ca:	e7e4      	b.n	8011196 <__hi0bits+0xa>

080111cc <__lo0bits>:
 80111cc:	6803      	ldr	r3, [r0, #0]
 80111ce:	f013 0207 	ands.w	r2, r3, #7
 80111d2:	4601      	mov	r1, r0
 80111d4:	d00b      	beq.n	80111ee <__lo0bits+0x22>
 80111d6:	07da      	lsls	r2, r3, #31
 80111d8:	d423      	bmi.n	8011222 <__lo0bits+0x56>
 80111da:	0798      	lsls	r0, r3, #30
 80111dc:	bf49      	itett	mi
 80111de:	085b      	lsrmi	r3, r3, #1
 80111e0:	089b      	lsrpl	r3, r3, #2
 80111e2:	2001      	movmi	r0, #1
 80111e4:	600b      	strmi	r3, [r1, #0]
 80111e6:	bf5c      	itt	pl
 80111e8:	600b      	strpl	r3, [r1, #0]
 80111ea:	2002      	movpl	r0, #2
 80111ec:	4770      	bx	lr
 80111ee:	b298      	uxth	r0, r3
 80111f0:	b9a8      	cbnz	r0, 801121e <__lo0bits+0x52>
 80111f2:	0c1b      	lsrs	r3, r3, #16
 80111f4:	2010      	movs	r0, #16
 80111f6:	b2da      	uxtb	r2, r3
 80111f8:	b90a      	cbnz	r2, 80111fe <__lo0bits+0x32>
 80111fa:	3008      	adds	r0, #8
 80111fc:	0a1b      	lsrs	r3, r3, #8
 80111fe:	071a      	lsls	r2, r3, #28
 8011200:	bf04      	itt	eq
 8011202:	091b      	lsreq	r3, r3, #4
 8011204:	3004      	addeq	r0, #4
 8011206:	079a      	lsls	r2, r3, #30
 8011208:	bf04      	itt	eq
 801120a:	089b      	lsreq	r3, r3, #2
 801120c:	3002      	addeq	r0, #2
 801120e:	07da      	lsls	r2, r3, #31
 8011210:	d403      	bmi.n	801121a <__lo0bits+0x4e>
 8011212:	085b      	lsrs	r3, r3, #1
 8011214:	f100 0001 	add.w	r0, r0, #1
 8011218:	d005      	beq.n	8011226 <__lo0bits+0x5a>
 801121a:	600b      	str	r3, [r1, #0]
 801121c:	4770      	bx	lr
 801121e:	4610      	mov	r0, r2
 8011220:	e7e9      	b.n	80111f6 <__lo0bits+0x2a>
 8011222:	2000      	movs	r0, #0
 8011224:	4770      	bx	lr
 8011226:	2020      	movs	r0, #32
 8011228:	4770      	bx	lr
	...

0801122c <__i2b>:
 801122c:	b510      	push	{r4, lr}
 801122e:	460c      	mov	r4, r1
 8011230:	2101      	movs	r1, #1
 8011232:	f7ff feb9 	bl	8010fa8 <_Balloc>
 8011236:	4602      	mov	r2, r0
 8011238:	b928      	cbnz	r0, 8011246 <__i2b+0x1a>
 801123a:	4b05      	ldr	r3, [pc, #20]	; (8011250 <__i2b+0x24>)
 801123c:	4805      	ldr	r0, [pc, #20]	; (8011254 <__i2b+0x28>)
 801123e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011242:	f001 fcc5 	bl	8012bd0 <__assert_func>
 8011246:	2301      	movs	r3, #1
 8011248:	6144      	str	r4, [r0, #20]
 801124a:	6103      	str	r3, [r0, #16]
 801124c:	bd10      	pop	{r4, pc}
 801124e:	bf00      	nop
 8011250:	08016b28 	.word	0x08016b28
 8011254:	08016bb4 	.word	0x08016bb4

08011258 <__multiply>:
 8011258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801125c:	4691      	mov	r9, r2
 801125e:	690a      	ldr	r2, [r1, #16]
 8011260:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011264:	429a      	cmp	r2, r3
 8011266:	bfb8      	it	lt
 8011268:	460b      	movlt	r3, r1
 801126a:	460c      	mov	r4, r1
 801126c:	bfbc      	itt	lt
 801126e:	464c      	movlt	r4, r9
 8011270:	4699      	movlt	r9, r3
 8011272:	6927      	ldr	r7, [r4, #16]
 8011274:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011278:	68a3      	ldr	r3, [r4, #8]
 801127a:	6861      	ldr	r1, [r4, #4]
 801127c:	eb07 060a 	add.w	r6, r7, sl
 8011280:	42b3      	cmp	r3, r6
 8011282:	b085      	sub	sp, #20
 8011284:	bfb8      	it	lt
 8011286:	3101      	addlt	r1, #1
 8011288:	f7ff fe8e 	bl	8010fa8 <_Balloc>
 801128c:	b930      	cbnz	r0, 801129c <__multiply+0x44>
 801128e:	4602      	mov	r2, r0
 8011290:	4b44      	ldr	r3, [pc, #272]	; (80113a4 <__multiply+0x14c>)
 8011292:	4845      	ldr	r0, [pc, #276]	; (80113a8 <__multiply+0x150>)
 8011294:	f240 115d 	movw	r1, #349	; 0x15d
 8011298:	f001 fc9a 	bl	8012bd0 <__assert_func>
 801129c:	f100 0514 	add.w	r5, r0, #20
 80112a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80112a4:	462b      	mov	r3, r5
 80112a6:	2200      	movs	r2, #0
 80112a8:	4543      	cmp	r3, r8
 80112aa:	d321      	bcc.n	80112f0 <__multiply+0x98>
 80112ac:	f104 0314 	add.w	r3, r4, #20
 80112b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80112b4:	f109 0314 	add.w	r3, r9, #20
 80112b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80112bc:	9202      	str	r2, [sp, #8]
 80112be:	1b3a      	subs	r2, r7, r4
 80112c0:	3a15      	subs	r2, #21
 80112c2:	f022 0203 	bic.w	r2, r2, #3
 80112c6:	3204      	adds	r2, #4
 80112c8:	f104 0115 	add.w	r1, r4, #21
 80112cc:	428f      	cmp	r7, r1
 80112ce:	bf38      	it	cc
 80112d0:	2204      	movcc	r2, #4
 80112d2:	9201      	str	r2, [sp, #4]
 80112d4:	9a02      	ldr	r2, [sp, #8]
 80112d6:	9303      	str	r3, [sp, #12]
 80112d8:	429a      	cmp	r2, r3
 80112da:	d80c      	bhi.n	80112f6 <__multiply+0x9e>
 80112dc:	2e00      	cmp	r6, #0
 80112de:	dd03      	ble.n	80112e8 <__multiply+0x90>
 80112e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d05a      	beq.n	801139e <__multiply+0x146>
 80112e8:	6106      	str	r6, [r0, #16]
 80112ea:	b005      	add	sp, #20
 80112ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112f0:	f843 2b04 	str.w	r2, [r3], #4
 80112f4:	e7d8      	b.n	80112a8 <__multiply+0x50>
 80112f6:	f8b3 a000 	ldrh.w	sl, [r3]
 80112fa:	f1ba 0f00 	cmp.w	sl, #0
 80112fe:	d024      	beq.n	801134a <__multiply+0xf2>
 8011300:	f104 0e14 	add.w	lr, r4, #20
 8011304:	46a9      	mov	r9, r5
 8011306:	f04f 0c00 	mov.w	ip, #0
 801130a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801130e:	f8d9 1000 	ldr.w	r1, [r9]
 8011312:	fa1f fb82 	uxth.w	fp, r2
 8011316:	b289      	uxth	r1, r1
 8011318:	fb0a 110b 	mla	r1, sl, fp, r1
 801131c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011320:	f8d9 2000 	ldr.w	r2, [r9]
 8011324:	4461      	add	r1, ip
 8011326:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801132a:	fb0a c20b 	mla	r2, sl, fp, ip
 801132e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011332:	b289      	uxth	r1, r1
 8011334:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011338:	4577      	cmp	r7, lr
 801133a:	f849 1b04 	str.w	r1, [r9], #4
 801133e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011342:	d8e2      	bhi.n	801130a <__multiply+0xb2>
 8011344:	9a01      	ldr	r2, [sp, #4]
 8011346:	f845 c002 	str.w	ip, [r5, r2]
 801134a:	9a03      	ldr	r2, [sp, #12]
 801134c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011350:	3304      	adds	r3, #4
 8011352:	f1b9 0f00 	cmp.w	r9, #0
 8011356:	d020      	beq.n	801139a <__multiply+0x142>
 8011358:	6829      	ldr	r1, [r5, #0]
 801135a:	f104 0c14 	add.w	ip, r4, #20
 801135e:	46ae      	mov	lr, r5
 8011360:	f04f 0a00 	mov.w	sl, #0
 8011364:	f8bc b000 	ldrh.w	fp, [ip]
 8011368:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801136c:	fb09 220b 	mla	r2, r9, fp, r2
 8011370:	4492      	add	sl, r2
 8011372:	b289      	uxth	r1, r1
 8011374:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011378:	f84e 1b04 	str.w	r1, [lr], #4
 801137c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011380:	f8be 1000 	ldrh.w	r1, [lr]
 8011384:	0c12      	lsrs	r2, r2, #16
 8011386:	fb09 1102 	mla	r1, r9, r2, r1
 801138a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801138e:	4567      	cmp	r7, ip
 8011390:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011394:	d8e6      	bhi.n	8011364 <__multiply+0x10c>
 8011396:	9a01      	ldr	r2, [sp, #4]
 8011398:	50a9      	str	r1, [r5, r2]
 801139a:	3504      	adds	r5, #4
 801139c:	e79a      	b.n	80112d4 <__multiply+0x7c>
 801139e:	3e01      	subs	r6, #1
 80113a0:	e79c      	b.n	80112dc <__multiply+0x84>
 80113a2:	bf00      	nop
 80113a4:	08016b28 	.word	0x08016b28
 80113a8:	08016bb4 	.word	0x08016bb4

080113ac <__pow5mult>:
 80113ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b0:	4615      	mov	r5, r2
 80113b2:	f012 0203 	ands.w	r2, r2, #3
 80113b6:	4606      	mov	r6, r0
 80113b8:	460f      	mov	r7, r1
 80113ba:	d007      	beq.n	80113cc <__pow5mult+0x20>
 80113bc:	4c25      	ldr	r4, [pc, #148]	; (8011454 <__pow5mult+0xa8>)
 80113be:	3a01      	subs	r2, #1
 80113c0:	2300      	movs	r3, #0
 80113c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80113c6:	f7ff fe51 	bl	801106c <__multadd>
 80113ca:	4607      	mov	r7, r0
 80113cc:	10ad      	asrs	r5, r5, #2
 80113ce:	d03d      	beq.n	801144c <__pow5mult+0xa0>
 80113d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80113d2:	b97c      	cbnz	r4, 80113f4 <__pow5mult+0x48>
 80113d4:	2010      	movs	r0, #16
 80113d6:	f7ff fdc1 	bl	8010f5c <malloc>
 80113da:	4602      	mov	r2, r0
 80113dc:	6270      	str	r0, [r6, #36]	; 0x24
 80113de:	b928      	cbnz	r0, 80113ec <__pow5mult+0x40>
 80113e0:	4b1d      	ldr	r3, [pc, #116]	; (8011458 <__pow5mult+0xac>)
 80113e2:	481e      	ldr	r0, [pc, #120]	; (801145c <__pow5mult+0xb0>)
 80113e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80113e8:	f001 fbf2 	bl	8012bd0 <__assert_func>
 80113ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113f0:	6004      	str	r4, [r0, #0]
 80113f2:	60c4      	str	r4, [r0, #12]
 80113f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80113f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113fc:	b94c      	cbnz	r4, 8011412 <__pow5mult+0x66>
 80113fe:	f240 2171 	movw	r1, #625	; 0x271
 8011402:	4630      	mov	r0, r6
 8011404:	f7ff ff12 	bl	801122c <__i2b>
 8011408:	2300      	movs	r3, #0
 801140a:	f8c8 0008 	str.w	r0, [r8, #8]
 801140e:	4604      	mov	r4, r0
 8011410:	6003      	str	r3, [r0, #0]
 8011412:	f04f 0900 	mov.w	r9, #0
 8011416:	07eb      	lsls	r3, r5, #31
 8011418:	d50a      	bpl.n	8011430 <__pow5mult+0x84>
 801141a:	4639      	mov	r1, r7
 801141c:	4622      	mov	r2, r4
 801141e:	4630      	mov	r0, r6
 8011420:	f7ff ff1a 	bl	8011258 <__multiply>
 8011424:	4639      	mov	r1, r7
 8011426:	4680      	mov	r8, r0
 8011428:	4630      	mov	r0, r6
 801142a:	f7ff fdfd 	bl	8011028 <_Bfree>
 801142e:	4647      	mov	r7, r8
 8011430:	106d      	asrs	r5, r5, #1
 8011432:	d00b      	beq.n	801144c <__pow5mult+0xa0>
 8011434:	6820      	ldr	r0, [r4, #0]
 8011436:	b938      	cbnz	r0, 8011448 <__pow5mult+0x9c>
 8011438:	4622      	mov	r2, r4
 801143a:	4621      	mov	r1, r4
 801143c:	4630      	mov	r0, r6
 801143e:	f7ff ff0b 	bl	8011258 <__multiply>
 8011442:	6020      	str	r0, [r4, #0]
 8011444:	f8c0 9000 	str.w	r9, [r0]
 8011448:	4604      	mov	r4, r0
 801144a:	e7e4      	b.n	8011416 <__pow5mult+0x6a>
 801144c:	4638      	mov	r0, r7
 801144e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011452:	bf00      	nop
 8011454:	08016d00 	.word	0x08016d00
 8011458:	08016ab6 	.word	0x08016ab6
 801145c:	08016bb4 	.word	0x08016bb4

08011460 <__lshift>:
 8011460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011464:	460c      	mov	r4, r1
 8011466:	6849      	ldr	r1, [r1, #4]
 8011468:	6923      	ldr	r3, [r4, #16]
 801146a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801146e:	68a3      	ldr	r3, [r4, #8]
 8011470:	4607      	mov	r7, r0
 8011472:	4691      	mov	r9, r2
 8011474:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011478:	f108 0601 	add.w	r6, r8, #1
 801147c:	42b3      	cmp	r3, r6
 801147e:	db0b      	blt.n	8011498 <__lshift+0x38>
 8011480:	4638      	mov	r0, r7
 8011482:	f7ff fd91 	bl	8010fa8 <_Balloc>
 8011486:	4605      	mov	r5, r0
 8011488:	b948      	cbnz	r0, 801149e <__lshift+0x3e>
 801148a:	4602      	mov	r2, r0
 801148c:	4b2a      	ldr	r3, [pc, #168]	; (8011538 <__lshift+0xd8>)
 801148e:	482b      	ldr	r0, [pc, #172]	; (801153c <__lshift+0xdc>)
 8011490:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011494:	f001 fb9c 	bl	8012bd0 <__assert_func>
 8011498:	3101      	adds	r1, #1
 801149a:	005b      	lsls	r3, r3, #1
 801149c:	e7ee      	b.n	801147c <__lshift+0x1c>
 801149e:	2300      	movs	r3, #0
 80114a0:	f100 0114 	add.w	r1, r0, #20
 80114a4:	f100 0210 	add.w	r2, r0, #16
 80114a8:	4618      	mov	r0, r3
 80114aa:	4553      	cmp	r3, sl
 80114ac:	db37      	blt.n	801151e <__lshift+0xbe>
 80114ae:	6920      	ldr	r0, [r4, #16]
 80114b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80114b4:	f104 0314 	add.w	r3, r4, #20
 80114b8:	f019 091f 	ands.w	r9, r9, #31
 80114bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80114c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80114c4:	d02f      	beq.n	8011526 <__lshift+0xc6>
 80114c6:	f1c9 0e20 	rsb	lr, r9, #32
 80114ca:	468a      	mov	sl, r1
 80114cc:	f04f 0c00 	mov.w	ip, #0
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	fa02 f209 	lsl.w	r2, r2, r9
 80114d6:	ea42 020c 	orr.w	r2, r2, ip
 80114da:	f84a 2b04 	str.w	r2, [sl], #4
 80114de:	f853 2b04 	ldr.w	r2, [r3], #4
 80114e2:	4298      	cmp	r0, r3
 80114e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80114e8:	d8f2      	bhi.n	80114d0 <__lshift+0x70>
 80114ea:	1b03      	subs	r3, r0, r4
 80114ec:	3b15      	subs	r3, #21
 80114ee:	f023 0303 	bic.w	r3, r3, #3
 80114f2:	3304      	adds	r3, #4
 80114f4:	f104 0215 	add.w	r2, r4, #21
 80114f8:	4290      	cmp	r0, r2
 80114fa:	bf38      	it	cc
 80114fc:	2304      	movcc	r3, #4
 80114fe:	f841 c003 	str.w	ip, [r1, r3]
 8011502:	f1bc 0f00 	cmp.w	ip, #0
 8011506:	d001      	beq.n	801150c <__lshift+0xac>
 8011508:	f108 0602 	add.w	r6, r8, #2
 801150c:	3e01      	subs	r6, #1
 801150e:	4638      	mov	r0, r7
 8011510:	612e      	str	r6, [r5, #16]
 8011512:	4621      	mov	r1, r4
 8011514:	f7ff fd88 	bl	8011028 <_Bfree>
 8011518:	4628      	mov	r0, r5
 801151a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801151e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011522:	3301      	adds	r3, #1
 8011524:	e7c1      	b.n	80114aa <__lshift+0x4a>
 8011526:	3904      	subs	r1, #4
 8011528:	f853 2b04 	ldr.w	r2, [r3], #4
 801152c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011530:	4298      	cmp	r0, r3
 8011532:	d8f9      	bhi.n	8011528 <__lshift+0xc8>
 8011534:	e7ea      	b.n	801150c <__lshift+0xac>
 8011536:	bf00      	nop
 8011538:	08016b28 	.word	0x08016b28
 801153c:	08016bb4 	.word	0x08016bb4

08011540 <__mcmp>:
 8011540:	b530      	push	{r4, r5, lr}
 8011542:	6902      	ldr	r2, [r0, #16]
 8011544:	690c      	ldr	r4, [r1, #16]
 8011546:	1b12      	subs	r2, r2, r4
 8011548:	d10e      	bne.n	8011568 <__mcmp+0x28>
 801154a:	f100 0314 	add.w	r3, r0, #20
 801154e:	3114      	adds	r1, #20
 8011550:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011554:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011558:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801155c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011560:	42a5      	cmp	r5, r4
 8011562:	d003      	beq.n	801156c <__mcmp+0x2c>
 8011564:	d305      	bcc.n	8011572 <__mcmp+0x32>
 8011566:	2201      	movs	r2, #1
 8011568:	4610      	mov	r0, r2
 801156a:	bd30      	pop	{r4, r5, pc}
 801156c:	4283      	cmp	r3, r0
 801156e:	d3f3      	bcc.n	8011558 <__mcmp+0x18>
 8011570:	e7fa      	b.n	8011568 <__mcmp+0x28>
 8011572:	f04f 32ff 	mov.w	r2, #4294967295
 8011576:	e7f7      	b.n	8011568 <__mcmp+0x28>

08011578 <__mdiff>:
 8011578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157c:	460c      	mov	r4, r1
 801157e:	4606      	mov	r6, r0
 8011580:	4611      	mov	r1, r2
 8011582:	4620      	mov	r0, r4
 8011584:	4690      	mov	r8, r2
 8011586:	f7ff ffdb 	bl	8011540 <__mcmp>
 801158a:	1e05      	subs	r5, r0, #0
 801158c:	d110      	bne.n	80115b0 <__mdiff+0x38>
 801158e:	4629      	mov	r1, r5
 8011590:	4630      	mov	r0, r6
 8011592:	f7ff fd09 	bl	8010fa8 <_Balloc>
 8011596:	b930      	cbnz	r0, 80115a6 <__mdiff+0x2e>
 8011598:	4b3a      	ldr	r3, [pc, #232]	; (8011684 <__mdiff+0x10c>)
 801159a:	4602      	mov	r2, r0
 801159c:	f240 2132 	movw	r1, #562	; 0x232
 80115a0:	4839      	ldr	r0, [pc, #228]	; (8011688 <__mdiff+0x110>)
 80115a2:	f001 fb15 	bl	8012bd0 <__assert_func>
 80115a6:	2301      	movs	r3, #1
 80115a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80115ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115b0:	bfa4      	itt	ge
 80115b2:	4643      	movge	r3, r8
 80115b4:	46a0      	movge	r8, r4
 80115b6:	4630      	mov	r0, r6
 80115b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80115bc:	bfa6      	itte	ge
 80115be:	461c      	movge	r4, r3
 80115c0:	2500      	movge	r5, #0
 80115c2:	2501      	movlt	r5, #1
 80115c4:	f7ff fcf0 	bl	8010fa8 <_Balloc>
 80115c8:	b920      	cbnz	r0, 80115d4 <__mdiff+0x5c>
 80115ca:	4b2e      	ldr	r3, [pc, #184]	; (8011684 <__mdiff+0x10c>)
 80115cc:	4602      	mov	r2, r0
 80115ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 80115d2:	e7e5      	b.n	80115a0 <__mdiff+0x28>
 80115d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80115d8:	6926      	ldr	r6, [r4, #16]
 80115da:	60c5      	str	r5, [r0, #12]
 80115dc:	f104 0914 	add.w	r9, r4, #20
 80115e0:	f108 0514 	add.w	r5, r8, #20
 80115e4:	f100 0e14 	add.w	lr, r0, #20
 80115e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80115ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80115f0:	f108 0210 	add.w	r2, r8, #16
 80115f4:	46f2      	mov	sl, lr
 80115f6:	2100      	movs	r1, #0
 80115f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80115fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011600:	fa1f f883 	uxth.w	r8, r3
 8011604:	fa11 f18b 	uxtah	r1, r1, fp
 8011608:	0c1b      	lsrs	r3, r3, #16
 801160a:	eba1 0808 	sub.w	r8, r1, r8
 801160e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011612:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011616:	fa1f f888 	uxth.w	r8, r8
 801161a:	1419      	asrs	r1, r3, #16
 801161c:	454e      	cmp	r6, r9
 801161e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011622:	f84a 3b04 	str.w	r3, [sl], #4
 8011626:	d8e7      	bhi.n	80115f8 <__mdiff+0x80>
 8011628:	1b33      	subs	r3, r6, r4
 801162a:	3b15      	subs	r3, #21
 801162c:	f023 0303 	bic.w	r3, r3, #3
 8011630:	3304      	adds	r3, #4
 8011632:	3415      	adds	r4, #21
 8011634:	42a6      	cmp	r6, r4
 8011636:	bf38      	it	cc
 8011638:	2304      	movcc	r3, #4
 801163a:	441d      	add	r5, r3
 801163c:	4473      	add	r3, lr
 801163e:	469e      	mov	lr, r3
 8011640:	462e      	mov	r6, r5
 8011642:	4566      	cmp	r6, ip
 8011644:	d30e      	bcc.n	8011664 <__mdiff+0xec>
 8011646:	f10c 0203 	add.w	r2, ip, #3
 801164a:	1b52      	subs	r2, r2, r5
 801164c:	f022 0203 	bic.w	r2, r2, #3
 8011650:	3d03      	subs	r5, #3
 8011652:	45ac      	cmp	ip, r5
 8011654:	bf38      	it	cc
 8011656:	2200      	movcc	r2, #0
 8011658:	441a      	add	r2, r3
 801165a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801165e:	b17b      	cbz	r3, 8011680 <__mdiff+0x108>
 8011660:	6107      	str	r7, [r0, #16]
 8011662:	e7a3      	b.n	80115ac <__mdiff+0x34>
 8011664:	f856 8b04 	ldr.w	r8, [r6], #4
 8011668:	fa11 f288 	uxtah	r2, r1, r8
 801166c:	1414      	asrs	r4, r2, #16
 801166e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011672:	b292      	uxth	r2, r2
 8011674:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011678:	f84e 2b04 	str.w	r2, [lr], #4
 801167c:	1421      	asrs	r1, r4, #16
 801167e:	e7e0      	b.n	8011642 <__mdiff+0xca>
 8011680:	3f01      	subs	r7, #1
 8011682:	e7ea      	b.n	801165a <__mdiff+0xe2>
 8011684:	08016b28 	.word	0x08016b28
 8011688:	08016bb4 	.word	0x08016bb4

0801168c <__ulp>:
 801168c:	b082      	sub	sp, #8
 801168e:	ed8d 0b00 	vstr	d0, [sp]
 8011692:	9b01      	ldr	r3, [sp, #4]
 8011694:	4912      	ldr	r1, [pc, #72]	; (80116e0 <__ulp+0x54>)
 8011696:	4019      	ands	r1, r3
 8011698:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801169c:	2900      	cmp	r1, #0
 801169e:	dd05      	ble.n	80116ac <__ulp+0x20>
 80116a0:	2200      	movs	r2, #0
 80116a2:	460b      	mov	r3, r1
 80116a4:	ec43 2b10 	vmov	d0, r2, r3
 80116a8:	b002      	add	sp, #8
 80116aa:	4770      	bx	lr
 80116ac:	4249      	negs	r1, r1
 80116ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80116b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80116b6:	f04f 0200 	mov.w	r2, #0
 80116ba:	f04f 0300 	mov.w	r3, #0
 80116be:	da04      	bge.n	80116ca <__ulp+0x3e>
 80116c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80116c4:	fa41 f300 	asr.w	r3, r1, r0
 80116c8:	e7ec      	b.n	80116a4 <__ulp+0x18>
 80116ca:	f1a0 0114 	sub.w	r1, r0, #20
 80116ce:	291e      	cmp	r1, #30
 80116d0:	bfda      	itte	le
 80116d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80116d6:	fa20 f101 	lsrle.w	r1, r0, r1
 80116da:	2101      	movgt	r1, #1
 80116dc:	460a      	mov	r2, r1
 80116de:	e7e1      	b.n	80116a4 <__ulp+0x18>
 80116e0:	7ff00000 	.word	0x7ff00000

080116e4 <__b2d>:
 80116e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116e6:	6905      	ldr	r5, [r0, #16]
 80116e8:	f100 0714 	add.w	r7, r0, #20
 80116ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80116f0:	1f2e      	subs	r6, r5, #4
 80116f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80116f6:	4620      	mov	r0, r4
 80116f8:	f7ff fd48 	bl	801118c <__hi0bits>
 80116fc:	f1c0 0320 	rsb	r3, r0, #32
 8011700:	280a      	cmp	r0, #10
 8011702:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011780 <__b2d+0x9c>
 8011706:	600b      	str	r3, [r1, #0]
 8011708:	dc14      	bgt.n	8011734 <__b2d+0x50>
 801170a:	f1c0 0e0b 	rsb	lr, r0, #11
 801170e:	fa24 f10e 	lsr.w	r1, r4, lr
 8011712:	42b7      	cmp	r7, r6
 8011714:	ea41 030c 	orr.w	r3, r1, ip
 8011718:	bf34      	ite	cc
 801171a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801171e:	2100      	movcs	r1, #0
 8011720:	3015      	adds	r0, #21
 8011722:	fa04 f000 	lsl.w	r0, r4, r0
 8011726:	fa21 f10e 	lsr.w	r1, r1, lr
 801172a:	ea40 0201 	orr.w	r2, r0, r1
 801172e:	ec43 2b10 	vmov	d0, r2, r3
 8011732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011734:	42b7      	cmp	r7, r6
 8011736:	bf3a      	itte	cc
 8011738:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801173c:	f1a5 0608 	subcc.w	r6, r5, #8
 8011740:	2100      	movcs	r1, #0
 8011742:	380b      	subs	r0, #11
 8011744:	d017      	beq.n	8011776 <__b2d+0x92>
 8011746:	f1c0 0c20 	rsb	ip, r0, #32
 801174a:	fa04 f500 	lsl.w	r5, r4, r0
 801174e:	42be      	cmp	r6, r7
 8011750:	fa21 f40c 	lsr.w	r4, r1, ip
 8011754:	ea45 0504 	orr.w	r5, r5, r4
 8011758:	bf8c      	ite	hi
 801175a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801175e:	2400      	movls	r4, #0
 8011760:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011764:	fa01 f000 	lsl.w	r0, r1, r0
 8011768:	fa24 f40c 	lsr.w	r4, r4, ip
 801176c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011770:	ea40 0204 	orr.w	r2, r0, r4
 8011774:	e7db      	b.n	801172e <__b2d+0x4a>
 8011776:	ea44 030c 	orr.w	r3, r4, ip
 801177a:	460a      	mov	r2, r1
 801177c:	e7d7      	b.n	801172e <__b2d+0x4a>
 801177e:	bf00      	nop
 8011780:	3ff00000 	.word	0x3ff00000

08011784 <__d2b>:
 8011784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011788:	4689      	mov	r9, r1
 801178a:	2101      	movs	r1, #1
 801178c:	ec57 6b10 	vmov	r6, r7, d0
 8011790:	4690      	mov	r8, r2
 8011792:	f7ff fc09 	bl	8010fa8 <_Balloc>
 8011796:	4604      	mov	r4, r0
 8011798:	b930      	cbnz	r0, 80117a8 <__d2b+0x24>
 801179a:	4602      	mov	r2, r0
 801179c:	4b25      	ldr	r3, [pc, #148]	; (8011834 <__d2b+0xb0>)
 801179e:	4826      	ldr	r0, [pc, #152]	; (8011838 <__d2b+0xb4>)
 80117a0:	f240 310a 	movw	r1, #778	; 0x30a
 80117a4:	f001 fa14 	bl	8012bd0 <__assert_func>
 80117a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80117ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80117b0:	bb35      	cbnz	r5, 8011800 <__d2b+0x7c>
 80117b2:	2e00      	cmp	r6, #0
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	d028      	beq.n	801180a <__d2b+0x86>
 80117b8:	4668      	mov	r0, sp
 80117ba:	9600      	str	r6, [sp, #0]
 80117bc:	f7ff fd06 	bl	80111cc <__lo0bits>
 80117c0:	9900      	ldr	r1, [sp, #0]
 80117c2:	b300      	cbz	r0, 8011806 <__d2b+0x82>
 80117c4:	9a01      	ldr	r2, [sp, #4]
 80117c6:	f1c0 0320 	rsb	r3, r0, #32
 80117ca:	fa02 f303 	lsl.w	r3, r2, r3
 80117ce:	430b      	orrs	r3, r1
 80117d0:	40c2      	lsrs	r2, r0
 80117d2:	6163      	str	r3, [r4, #20]
 80117d4:	9201      	str	r2, [sp, #4]
 80117d6:	9b01      	ldr	r3, [sp, #4]
 80117d8:	61a3      	str	r3, [r4, #24]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	bf14      	ite	ne
 80117de:	2202      	movne	r2, #2
 80117e0:	2201      	moveq	r2, #1
 80117e2:	6122      	str	r2, [r4, #16]
 80117e4:	b1d5      	cbz	r5, 801181c <__d2b+0x98>
 80117e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80117ea:	4405      	add	r5, r0
 80117ec:	f8c9 5000 	str.w	r5, [r9]
 80117f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80117f4:	f8c8 0000 	str.w	r0, [r8]
 80117f8:	4620      	mov	r0, r4
 80117fa:	b003      	add	sp, #12
 80117fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011804:	e7d5      	b.n	80117b2 <__d2b+0x2e>
 8011806:	6161      	str	r1, [r4, #20]
 8011808:	e7e5      	b.n	80117d6 <__d2b+0x52>
 801180a:	a801      	add	r0, sp, #4
 801180c:	f7ff fcde 	bl	80111cc <__lo0bits>
 8011810:	9b01      	ldr	r3, [sp, #4]
 8011812:	6163      	str	r3, [r4, #20]
 8011814:	2201      	movs	r2, #1
 8011816:	6122      	str	r2, [r4, #16]
 8011818:	3020      	adds	r0, #32
 801181a:	e7e3      	b.n	80117e4 <__d2b+0x60>
 801181c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011820:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011824:	f8c9 0000 	str.w	r0, [r9]
 8011828:	6918      	ldr	r0, [r3, #16]
 801182a:	f7ff fcaf 	bl	801118c <__hi0bits>
 801182e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011832:	e7df      	b.n	80117f4 <__d2b+0x70>
 8011834:	08016b28 	.word	0x08016b28
 8011838:	08016bb4 	.word	0x08016bb4

0801183c <__ratio>:
 801183c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011840:	4688      	mov	r8, r1
 8011842:	4669      	mov	r1, sp
 8011844:	4681      	mov	r9, r0
 8011846:	f7ff ff4d 	bl	80116e4 <__b2d>
 801184a:	a901      	add	r1, sp, #4
 801184c:	4640      	mov	r0, r8
 801184e:	ec55 4b10 	vmov	r4, r5, d0
 8011852:	f7ff ff47 	bl	80116e4 <__b2d>
 8011856:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801185a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801185e:	eba3 0c02 	sub.w	ip, r3, r2
 8011862:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011866:	1a9b      	subs	r3, r3, r2
 8011868:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801186c:	ec51 0b10 	vmov	r0, r1, d0
 8011870:	2b00      	cmp	r3, #0
 8011872:	bfd6      	itet	le
 8011874:	460a      	movle	r2, r1
 8011876:	462a      	movgt	r2, r5
 8011878:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801187c:	468b      	mov	fp, r1
 801187e:	462f      	mov	r7, r5
 8011880:	bfd4      	ite	le
 8011882:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011886:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801188a:	4620      	mov	r0, r4
 801188c:	ee10 2a10 	vmov	r2, s0
 8011890:	465b      	mov	r3, fp
 8011892:	4639      	mov	r1, r7
 8011894:	f7ee ffea 	bl	800086c <__aeabi_ddiv>
 8011898:	ec41 0b10 	vmov	d0, r0, r1
 801189c:	b003      	add	sp, #12
 801189e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118a2 <__copybits>:
 80118a2:	3901      	subs	r1, #1
 80118a4:	b570      	push	{r4, r5, r6, lr}
 80118a6:	1149      	asrs	r1, r1, #5
 80118a8:	6914      	ldr	r4, [r2, #16]
 80118aa:	3101      	adds	r1, #1
 80118ac:	f102 0314 	add.w	r3, r2, #20
 80118b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80118b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80118b8:	1f05      	subs	r5, r0, #4
 80118ba:	42a3      	cmp	r3, r4
 80118bc:	d30c      	bcc.n	80118d8 <__copybits+0x36>
 80118be:	1aa3      	subs	r3, r4, r2
 80118c0:	3b11      	subs	r3, #17
 80118c2:	f023 0303 	bic.w	r3, r3, #3
 80118c6:	3211      	adds	r2, #17
 80118c8:	42a2      	cmp	r2, r4
 80118ca:	bf88      	it	hi
 80118cc:	2300      	movhi	r3, #0
 80118ce:	4418      	add	r0, r3
 80118d0:	2300      	movs	r3, #0
 80118d2:	4288      	cmp	r0, r1
 80118d4:	d305      	bcc.n	80118e2 <__copybits+0x40>
 80118d6:	bd70      	pop	{r4, r5, r6, pc}
 80118d8:	f853 6b04 	ldr.w	r6, [r3], #4
 80118dc:	f845 6f04 	str.w	r6, [r5, #4]!
 80118e0:	e7eb      	b.n	80118ba <__copybits+0x18>
 80118e2:	f840 3b04 	str.w	r3, [r0], #4
 80118e6:	e7f4      	b.n	80118d2 <__copybits+0x30>

080118e8 <__any_on>:
 80118e8:	f100 0214 	add.w	r2, r0, #20
 80118ec:	6900      	ldr	r0, [r0, #16]
 80118ee:	114b      	asrs	r3, r1, #5
 80118f0:	4298      	cmp	r0, r3
 80118f2:	b510      	push	{r4, lr}
 80118f4:	db11      	blt.n	801191a <__any_on+0x32>
 80118f6:	dd0a      	ble.n	801190e <__any_on+0x26>
 80118f8:	f011 011f 	ands.w	r1, r1, #31
 80118fc:	d007      	beq.n	801190e <__any_on+0x26>
 80118fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011902:	fa24 f001 	lsr.w	r0, r4, r1
 8011906:	fa00 f101 	lsl.w	r1, r0, r1
 801190a:	428c      	cmp	r4, r1
 801190c:	d10b      	bne.n	8011926 <__any_on+0x3e>
 801190e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011912:	4293      	cmp	r3, r2
 8011914:	d803      	bhi.n	801191e <__any_on+0x36>
 8011916:	2000      	movs	r0, #0
 8011918:	bd10      	pop	{r4, pc}
 801191a:	4603      	mov	r3, r0
 801191c:	e7f7      	b.n	801190e <__any_on+0x26>
 801191e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011922:	2900      	cmp	r1, #0
 8011924:	d0f5      	beq.n	8011912 <__any_on+0x2a>
 8011926:	2001      	movs	r0, #1
 8011928:	e7f6      	b.n	8011918 <__any_on+0x30>

0801192a <_calloc_r>:
 801192a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801192c:	fba1 2402 	umull	r2, r4, r1, r2
 8011930:	b94c      	cbnz	r4, 8011946 <_calloc_r+0x1c>
 8011932:	4611      	mov	r1, r2
 8011934:	9201      	str	r2, [sp, #4]
 8011936:	f7fc f8e1 	bl	800dafc <_malloc_r>
 801193a:	9a01      	ldr	r2, [sp, #4]
 801193c:	4605      	mov	r5, r0
 801193e:	b930      	cbnz	r0, 801194e <_calloc_r+0x24>
 8011940:	4628      	mov	r0, r5
 8011942:	b003      	add	sp, #12
 8011944:	bd30      	pop	{r4, r5, pc}
 8011946:	220c      	movs	r2, #12
 8011948:	6002      	str	r2, [r0, #0]
 801194a:	2500      	movs	r5, #0
 801194c:	e7f8      	b.n	8011940 <_calloc_r+0x16>
 801194e:	4621      	mov	r1, r4
 8011950:	f7fc f860 	bl	800da14 <memset>
 8011954:	e7f4      	b.n	8011940 <_calloc_r+0x16>

08011956 <__ssputs_r>:
 8011956:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801195a:	688e      	ldr	r6, [r1, #8]
 801195c:	429e      	cmp	r6, r3
 801195e:	4682      	mov	sl, r0
 8011960:	460c      	mov	r4, r1
 8011962:	4690      	mov	r8, r2
 8011964:	461f      	mov	r7, r3
 8011966:	d838      	bhi.n	80119da <__ssputs_r+0x84>
 8011968:	898a      	ldrh	r2, [r1, #12]
 801196a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801196e:	d032      	beq.n	80119d6 <__ssputs_r+0x80>
 8011970:	6825      	ldr	r5, [r4, #0]
 8011972:	6909      	ldr	r1, [r1, #16]
 8011974:	eba5 0901 	sub.w	r9, r5, r1
 8011978:	6965      	ldr	r5, [r4, #20]
 801197a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801197e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011982:	3301      	adds	r3, #1
 8011984:	444b      	add	r3, r9
 8011986:	106d      	asrs	r5, r5, #1
 8011988:	429d      	cmp	r5, r3
 801198a:	bf38      	it	cc
 801198c:	461d      	movcc	r5, r3
 801198e:	0553      	lsls	r3, r2, #21
 8011990:	d531      	bpl.n	80119f6 <__ssputs_r+0xa0>
 8011992:	4629      	mov	r1, r5
 8011994:	f7fc f8b2 	bl	800dafc <_malloc_r>
 8011998:	4606      	mov	r6, r0
 801199a:	b950      	cbnz	r0, 80119b2 <__ssputs_r+0x5c>
 801199c:	230c      	movs	r3, #12
 801199e:	f8ca 3000 	str.w	r3, [sl]
 80119a2:	89a3      	ldrh	r3, [r4, #12]
 80119a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119a8:	81a3      	strh	r3, [r4, #12]
 80119aa:	f04f 30ff 	mov.w	r0, #4294967295
 80119ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119b2:	6921      	ldr	r1, [r4, #16]
 80119b4:	464a      	mov	r2, r9
 80119b6:	f7fc f81f 	bl	800d9f8 <memcpy>
 80119ba:	89a3      	ldrh	r3, [r4, #12]
 80119bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80119c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119c4:	81a3      	strh	r3, [r4, #12]
 80119c6:	6126      	str	r6, [r4, #16]
 80119c8:	6165      	str	r5, [r4, #20]
 80119ca:	444e      	add	r6, r9
 80119cc:	eba5 0509 	sub.w	r5, r5, r9
 80119d0:	6026      	str	r6, [r4, #0]
 80119d2:	60a5      	str	r5, [r4, #8]
 80119d4:	463e      	mov	r6, r7
 80119d6:	42be      	cmp	r6, r7
 80119d8:	d900      	bls.n	80119dc <__ssputs_r+0x86>
 80119da:	463e      	mov	r6, r7
 80119dc:	6820      	ldr	r0, [r4, #0]
 80119de:	4632      	mov	r2, r6
 80119e0:	4641      	mov	r1, r8
 80119e2:	f001 f96f 	bl	8012cc4 <memmove>
 80119e6:	68a3      	ldr	r3, [r4, #8]
 80119e8:	1b9b      	subs	r3, r3, r6
 80119ea:	60a3      	str	r3, [r4, #8]
 80119ec:	6823      	ldr	r3, [r4, #0]
 80119ee:	4433      	add	r3, r6
 80119f0:	6023      	str	r3, [r4, #0]
 80119f2:	2000      	movs	r0, #0
 80119f4:	e7db      	b.n	80119ae <__ssputs_r+0x58>
 80119f6:	462a      	mov	r2, r5
 80119f8:	f001 f97e 	bl	8012cf8 <_realloc_r>
 80119fc:	4606      	mov	r6, r0
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d1e1      	bne.n	80119c6 <__ssputs_r+0x70>
 8011a02:	6921      	ldr	r1, [r4, #16]
 8011a04:	4650      	mov	r0, sl
 8011a06:	f7fc f80d 	bl	800da24 <_free_r>
 8011a0a:	e7c7      	b.n	801199c <__ssputs_r+0x46>

08011a0c <_svfiprintf_r>:
 8011a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a10:	4698      	mov	r8, r3
 8011a12:	898b      	ldrh	r3, [r1, #12]
 8011a14:	061b      	lsls	r3, r3, #24
 8011a16:	b09d      	sub	sp, #116	; 0x74
 8011a18:	4607      	mov	r7, r0
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	4614      	mov	r4, r2
 8011a1e:	d50e      	bpl.n	8011a3e <_svfiprintf_r+0x32>
 8011a20:	690b      	ldr	r3, [r1, #16]
 8011a22:	b963      	cbnz	r3, 8011a3e <_svfiprintf_r+0x32>
 8011a24:	2140      	movs	r1, #64	; 0x40
 8011a26:	f7fc f869 	bl	800dafc <_malloc_r>
 8011a2a:	6028      	str	r0, [r5, #0]
 8011a2c:	6128      	str	r0, [r5, #16]
 8011a2e:	b920      	cbnz	r0, 8011a3a <_svfiprintf_r+0x2e>
 8011a30:	230c      	movs	r3, #12
 8011a32:	603b      	str	r3, [r7, #0]
 8011a34:	f04f 30ff 	mov.w	r0, #4294967295
 8011a38:	e0d1      	b.n	8011bde <_svfiprintf_r+0x1d2>
 8011a3a:	2340      	movs	r3, #64	; 0x40
 8011a3c:	616b      	str	r3, [r5, #20]
 8011a3e:	2300      	movs	r3, #0
 8011a40:	9309      	str	r3, [sp, #36]	; 0x24
 8011a42:	2320      	movs	r3, #32
 8011a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a4c:	2330      	movs	r3, #48	; 0x30
 8011a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011bf8 <_svfiprintf_r+0x1ec>
 8011a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a56:	f04f 0901 	mov.w	r9, #1
 8011a5a:	4623      	mov	r3, r4
 8011a5c:	469a      	mov	sl, r3
 8011a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a62:	b10a      	cbz	r2, 8011a68 <_svfiprintf_r+0x5c>
 8011a64:	2a25      	cmp	r2, #37	; 0x25
 8011a66:	d1f9      	bne.n	8011a5c <_svfiprintf_r+0x50>
 8011a68:	ebba 0b04 	subs.w	fp, sl, r4
 8011a6c:	d00b      	beq.n	8011a86 <_svfiprintf_r+0x7a>
 8011a6e:	465b      	mov	r3, fp
 8011a70:	4622      	mov	r2, r4
 8011a72:	4629      	mov	r1, r5
 8011a74:	4638      	mov	r0, r7
 8011a76:	f7ff ff6e 	bl	8011956 <__ssputs_r>
 8011a7a:	3001      	adds	r0, #1
 8011a7c:	f000 80aa 	beq.w	8011bd4 <_svfiprintf_r+0x1c8>
 8011a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a82:	445a      	add	r2, fp
 8011a84:	9209      	str	r2, [sp, #36]	; 0x24
 8011a86:	f89a 3000 	ldrb.w	r3, [sl]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f000 80a2 	beq.w	8011bd4 <_svfiprintf_r+0x1c8>
 8011a90:	2300      	movs	r3, #0
 8011a92:	f04f 32ff 	mov.w	r2, #4294967295
 8011a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a9a:	f10a 0a01 	add.w	sl, sl, #1
 8011a9e:	9304      	str	r3, [sp, #16]
 8011aa0:	9307      	str	r3, [sp, #28]
 8011aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8011aa8:	4654      	mov	r4, sl
 8011aaa:	2205      	movs	r2, #5
 8011aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ab0:	4851      	ldr	r0, [pc, #324]	; (8011bf8 <_svfiprintf_r+0x1ec>)
 8011ab2:	f7ee fba5 	bl	8000200 <memchr>
 8011ab6:	9a04      	ldr	r2, [sp, #16]
 8011ab8:	b9d8      	cbnz	r0, 8011af2 <_svfiprintf_r+0xe6>
 8011aba:	06d0      	lsls	r0, r2, #27
 8011abc:	bf44      	itt	mi
 8011abe:	2320      	movmi	r3, #32
 8011ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ac4:	0711      	lsls	r1, r2, #28
 8011ac6:	bf44      	itt	mi
 8011ac8:	232b      	movmi	r3, #43	; 0x2b
 8011aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ace:	f89a 3000 	ldrb.w	r3, [sl]
 8011ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8011ad4:	d015      	beq.n	8011b02 <_svfiprintf_r+0xf6>
 8011ad6:	9a07      	ldr	r2, [sp, #28]
 8011ad8:	4654      	mov	r4, sl
 8011ada:	2000      	movs	r0, #0
 8011adc:	f04f 0c0a 	mov.w	ip, #10
 8011ae0:	4621      	mov	r1, r4
 8011ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ae6:	3b30      	subs	r3, #48	; 0x30
 8011ae8:	2b09      	cmp	r3, #9
 8011aea:	d94e      	bls.n	8011b8a <_svfiprintf_r+0x17e>
 8011aec:	b1b0      	cbz	r0, 8011b1c <_svfiprintf_r+0x110>
 8011aee:	9207      	str	r2, [sp, #28]
 8011af0:	e014      	b.n	8011b1c <_svfiprintf_r+0x110>
 8011af2:	eba0 0308 	sub.w	r3, r0, r8
 8011af6:	fa09 f303 	lsl.w	r3, r9, r3
 8011afa:	4313      	orrs	r3, r2
 8011afc:	9304      	str	r3, [sp, #16]
 8011afe:	46a2      	mov	sl, r4
 8011b00:	e7d2      	b.n	8011aa8 <_svfiprintf_r+0x9c>
 8011b02:	9b03      	ldr	r3, [sp, #12]
 8011b04:	1d19      	adds	r1, r3, #4
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	9103      	str	r1, [sp, #12]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	bfbb      	ittet	lt
 8011b0e:	425b      	neglt	r3, r3
 8011b10:	f042 0202 	orrlt.w	r2, r2, #2
 8011b14:	9307      	strge	r3, [sp, #28]
 8011b16:	9307      	strlt	r3, [sp, #28]
 8011b18:	bfb8      	it	lt
 8011b1a:	9204      	strlt	r2, [sp, #16]
 8011b1c:	7823      	ldrb	r3, [r4, #0]
 8011b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8011b20:	d10c      	bne.n	8011b3c <_svfiprintf_r+0x130>
 8011b22:	7863      	ldrb	r3, [r4, #1]
 8011b24:	2b2a      	cmp	r3, #42	; 0x2a
 8011b26:	d135      	bne.n	8011b94 <_svfiprintf_r+0x188>
 8011b28:	9b03      	ldr	r3, [sp, #12]
 8011b2a:	1d1a      	adds	r2, r3, #4
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	9203      	str	r2, [sp, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	bfb8      	it	lt
 8011b34:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b38:	3402      	adds	r4, #2
 8011b3a:	9305      	str	r3, [sp, #20]
 8011b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011c08 <_svfiprintf_r+0x1fc>
 8011b40:	7821      	ldrb	r1, [r4, #0]
 8011b42:	2203      	movs	r2, #3
 8011b44:	4650      	mov	r0, sl
 8011b46:	f7ee fb5b 	bl	8000200 <memchr>
 8011b4a:	b140      	cbz	r0, 8011b5e <_svfiprintf_r+0x152>
 8011b4c:	2340      	movs	r3, #64	; 0x40
 8011b4e:	eba0 000a 	sub.w	r0, r0, sl
 8011b52:	fa03 f000 	lsl.w	r0, r3, r0
 8011b56:	9b04      	ldr	r3, [sp, #16]
 8011b58:	4303      	orrs	r3, r0
 8011b5a:	3401      	adds	r4, #1
 8011b5c:	9304      	str	r3, [sp, #16]
 8011b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b62:	4826      	ldr	r0, [pc, #152]	; (8011bfc <_svfiprintf_r+0x1f0>)
 8011b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b68:	2206      	movs	r2, #6
 8011b6a:	f7ee fb49 	bl	8000200 <memchr>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	d038      	beq.n	8011be4 <_svfiprintf_r+0x1d8>
 8011b72:	4b23      	ldr	r3, [pc, #140]	; (8011c00 <_svfiprintf_r+0x1f4>)
 8011b74:	bb1b      	cbnz	r3, 8011bbe <_svfiprintf_r+0x1b2>
 8011b76:	9b03      	ldr	r3, [sp, #12]
 8011b78:	3307      	adds	r3, #7
 8011b7a:	f023 0307 	bic.w	r3, r3, #7
 8011b7e:	3308      	adds	r3, #8
 8011b80:	9303      	str	r3, [sp, #12]
 8011b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b84:	4433      	add	r3, r6
 8011b86:	9309      	str	r3, [sp, #36]	; 0x24
 8011b88:	e767      	b.n	8011a5a <_svfiprintf_r+0x4e>
 8011b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b8e:	460c      	mov	r4, r1
 8011b90:	2001      	movs	r0, #1
 8011b92:	e7a5      	b.n	8011ae0 <_svfiprintf_r+0xd4>
 8011b94:	2300      	movs	r3, #0
 8011b96:	3401      	adds	r4, #1
 8011b98:	9305      	str	r3, [sp, #20]
 8011b9a:	4619      	mov	r1, r3
 8011b9c:	f04f 0c0a 	mov.w	ip, #10
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ba6:	3a30      	subs	r2, #48	; 0x30
 8011ba8:	2a09      	cmp	r2, #9
 8011baa:	d903      	bls.n	8011bb4 <_svfiprintf_r+0x1a8>
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d0c5      	beq.n	8011b3c <_svfiprintf_r+0x130>
 8011bb0:	9105      	str	r1, [sp, #20]
 8011bb2:	e7c3      	b.n	8011b3c <_svfiprintf_r+0x130>
 8011bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bb8:	4604      	mov	r4, r0
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e7f0      	b.n	8011ba0 <_svfiprintf_r+0x194>
 8011bbe:	ab03      	add	r3, sp, #12
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	462a      	mov	r2, r5
 8011bc4:	4b0f      	ldr	r3, [pc, #60]	; (8011c04 <_svfiprintf_r+0x1f8>)
 8011bc6:	a904      	add	r1, sp, #16
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7fc f8ab 	bl	800dd24 <_printf_float>
 8011bce:	1c42      	adds	r2, r0, #1
 8011bd0:	4606      	mov	r6, r0
 8011bd2:	d1d6      	bne.n	8011b82 <_svfiprintf_r+0x176>
 8011bd4:	89ab      	ldrh	r3, [r5, #12]
 8011bd6:	065b      	lsls	r3, r3, #25
 8011bd8:	f53f af2c 	bmi.w	8011a34 <_svfiprintf_r+0x28>
 8011bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bde:	b01d      	add	sp, #116	; 0x74
 8011be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be4:	ab03      	add	r3, sp, #12
 8011be6:	9300      	str	r3, [sp, #0]
 8011be8:	462a      	mov	r2, r5
 8011bea:	4b06      	ldr	r3, [pc, #24]	; (8011c04 <_svfiprintf_r+0x1f8>)
 8011bec:	a904      	add	r1, sp, #16
 8011bee:	4638      	mov	r0, r7
 8011bf0:	f7fc fb3c 	bl	800e26c <_printf_i>
 8011bf4:	e7eb      	b.n	8011bce <_svfiprintf_r+0x1c2>
 8011bf6:	bf00      	nop
 8011bf8:	08016d0c 	.word	0x08016d0c
 8011bfc:	08016d16 	.word	0x08016d16
 8011c00:	0800dd25 	.word	0x0800dd25
 8011c04:	08011957 	.word	0x08011957
 8011c08:	08016d12 	.word	0x08016d12

08011c0c <__sfputc_r>:
 8011c0c:	6893      	ldr	r3, [r2, #8]
 8011c0e:	3b01      	subs	r3, #1
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	b410      	push	{r4}
 8011c14:	6093      	str	r3, [r2, #8]
 8011c16:	da08      	bge.n	8011c2a <__sfputc_r+0x1e>
 8011c18:	6994      	ldr	r4, [r2, #24]
 8011c1a:	42a3      	cmp	r3, r4
 8011c1c:	db01      	blt.n	8011c22 <__sfputc_r+0x16>
 8011c1e:	290a      	cmp	r1, #10
 8011c20:	d103      	bne.n	8011c2a <__sfputc_r+0x1e>
 8011c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c26:	f7fd be95 	b.w	800f954 <__swbuf_r>
 8011c2a:	6813      	ldr	r3, [r2, #0]
 8011c2c:	1c58      	adds	r0, r3, #1
 8011c2e:	6010      	str	r0, [r2, #0]
 8011c30:	7019      	strb	r1, [r3, #0]
 8011c32:	4608      	mov	r0, r1
 8011c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011c38:	4770      	bx	lr

08011c3a <__sfputs_r>:
 8011c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3c:	4606      	mov	r6, r0
 8011c3e:	460f      	mov	r7, r1
 8011c40:	4614      	mov	r4, r2
 8011c42:	18d5      	adds	r5, r2, r3
 8011c44:	42ac      	cmp	r4, r5
 8011c46:	d101      	bne.n	8011c4c <__sfputs_r+0x12>
 8011c48:	2000      	movs	r0, #0
 8011c4a:	e007      	b.n	8011c5c <__sfputs_r+0x22>
 8011c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c50:	463a      	mov	r2, r7
 8011c52:	4630      	mov	r0, r6
 8011c54:	f7ff ffda 	bl	8011c0c <__sfputc_r>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d1f3      	bne.n	8011c44 <__sfputs_r+0xa>
 8011c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011c60 <_vfiprintf_r>:
 8011c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c64:	460d      	mov	r5, r1
 8011c66:	b09d      	sub	sp, #116	; 0x74
 8011c68:	4614      	mov	r4, r2
 8011c6a:	4698      	mov	r8, r3
 8011c6c:	4606      	mov	r6, r0
 8011c6e:	b118      	cbz	r0, 8011c78 <_vfiprintf_r+0x18>
 8011c70:	6983      	ldr	r3, [r0, #24]
 8011c72:	b90b      	cbnz	r3, 8011c78 <_vfiprintf_r+0x18>
 8011c74:	f7fb fd96 	bl	800d7a4 <__sinit>
 8011c78:	4b89      	ldr	r3, [pc, #548]	; (8011ea0 <_vfiprintf_r+0x240>)
 8011c7a:	429d      	cmp	r5, r3
 8011c7c:	d11b      	bne.n	8011cb6 <_vfiprintf_r+0x56>
 8011c7e:	6875      	ldr	r5, [r6, #4]
 8011c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011c82:	07d9      	lsls	r1, r3, #31
 8011c84:	d405      	bmi.n	8011c92 <_vfiprintf_r+0x32>
 8011c86:	89ab      	ldrh	r3, [r5, #12]
 8011c88:	059a      	lsls	r2, r3, #22
 8011c8a:	d402      	bmi.n	8011c92 <_vfiprintf_r+0x32>
 8011c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c8e:	f7fb fe4c 	bl	800d92a <__retarget_lock_acquire_recursive>
 8011c92:	89ab      	ldrh	r3, [r5, #12]
 8011c94:	071b      	lsls	r3, r3, #28
 8011c96:	d501      	bpl.n	8011c9c <_vfiprintf_r+0x3c>
 8011c98:	692b      	ldr	r3, [r5, #16]
 8011c9a:	b9eb      	cbnz	r3, 8011cd8 <_vfiprintf_r+0x78>
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	4630      	mov	r0, r6
 8011ca0:	f7fd febc 	bl	800fa1c <__swsetup_r>
 8011ca4:	b1c0      	cbz	r0, 8011cd8 <_vfiprintf_r+0x78>
 8011ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ca8:	07dc      	lsls	r4, r3, #31
 8011caa:	d50e      	bpl.n	8011cca <_vfiprintf_r+0x6a>
 8011cac:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb0:	b01d      	add	sp, #116	; 0x74
 8011cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cb6:	4b7b      	ldr	r3, [pc, #492]	; (8011ea4 <_vfiprintf_r+0x244>)
 8011cb8:	429d      	cmp	r5, r3
 8011cba:	d101      	bne.n	8011cc0 <_vfiprintf_r+0x60>
 8011cbc:	68b5      	ldr	r5, [r6, #8]
 8011cbe:	e7df      	b.n	8011c80 <_vfiprintf_r+0x20>
 8011cc0:	4b79      	ldr	r3, [pc, #484]	; (8011ea8 <_vfiprintf_r+0x248>)
 8011cc2:	429d      	cmp	r5, r3
 8011cc4:	bf08      	it	eq
 8011cc6:	68f5      	ldreq	r5, [r6, #12]
 8011cc8:	e7da      	b.n	8011c80 <_vfiprintf_r+0x20>
 8011cca:	89ab      	ldrh	r3, [r5, #12]
 8011ccc:	0598      	lsls	r0, r3, #22
 8011cce:	d4ed      	bmi.n	8011cac <_vfiprintf_r+0x4c>
 8011cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011cd2:	f7fb fe2b 	bl	800d92c <__retarget_lock_release_recursive>
 8011cd6:	e7e9      	b.n	8011cac <_vfiprintf_r+0x4c>
 8011cd8:	2300      	movs	r3, #0
 8011cda:	9309      	str	r3, [sp, #36]	; 0x24
 8011cdc:	2320      	movs	r3, #32
 8011cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8011ce6:	2330      	movs	r3, #48	; 0x30
 8011ce8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011eac <_vfiprintf_r+0x24c>
 8011cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011cf0:	f04f 0901 	mov.w	r9, #1
 8011cf4:	4623      	mov	r3, r4
 8011cf6:	469a      	mov	sl, r3
 8011cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cfc:	b10a      	cbz	r2, 8011d02 <_vfiprintf_r+0xa2>
 8011cfe:	2a25      	cmp	r2, #37	; 0x25
 8011d00:	d1f9      	bne.n	8011cf6 <_vfiprintf_r+0x96>
 8011d02:	ebba 0b04 	subs.w	fp, sl, r4
 8011d06:	d00b      	beq.n	8011d20 <_vfiprintf_r+0xc0>
 8011d08:	465b      	mov	r3, fp
 8011d0a:	4622      	mov	r2, r4
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	4630      	mov	r0, r6
 8011d10:	f7ff ff93 	bl	8011c3a <__sfputs_r>
 8011d14:	3001      	adds	r0, #1
 8011d16:	f000 80aa 	beq.w	8011e6e <_vfiprintf_r+0x20e>
 8011d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d1c:	445a      	add	r2, fp
 8011d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8011d20:	f89a 3000 	ldrb.w	r3, [sl]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f000 80a2 	beq.w	8011e6e <_vfiprintf_r+0x20e>
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d34:	f10a 0a01 	add.w	sl, sl, #1
 8011d38:	9304      	str	r3, [sp, #16]
 8011d3a:	9307      	str	r3, [sp, #28]
 8011d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d40:	931a      	str	r3, [sp, #104]	; 0x68
 8011d42:	4654      	mov	r4, sl
 8011d44:	2205      	movs	r2, #5
 8011d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d4a:	4858      	ldr	r0, [pc, #352]	; (8011eac <_vfiprintf_r+0x24c>)
 8011d4c:	f7ee fa58 	bl	8000200 <memchr>
 8011d50:	9a04      	ldr	r2, [sp, #16]
 8011d52:	b9d8      	cbnz	r0, 8011d8c <_vfiprintf_r+0x12c>
 8011d54:	06d1      	lsls	r1, r2, #27
 8011d56:	bf44      	itt	mi
 8011d58:	2320      	movmi	r3, #32
 8011d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d5e:	0713      	lsls	r3, r2, #28
 8011d60:	bf44      	itt	mi
 8011d62:	232b      	movmi	r3, #43	; 0x2b
 8011d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011d68:	f89a 3000 	ldrb.w	r3, [sl]
 8011d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8011d6e:	d015      	beq.n	8011d9c <_vfiprintf_r+0x13c>
 8011d70:	9a07      	ldr	r2, [sp, #28]
 8011d72:	4654      	mov	r4, sl
 8011d74:	2000      	movs	r0, #0
 8011d76:	f04f 0c0a 	mov.w	ip, #10
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d80:	3b30      	subs	r3, #48	; 0x30
 8011d82:	2b09      	cmp	r3, #9
 8011d84:	d94e      	bls.n	8011e24 <_vfiprintf_r+0x1c4>
 8011d86:	b1b0      	cbz	r0, 8011db6 <_vfiprintf_r+0x156>
 8011d88:	9207      	str	r2, [sp, #28]
 8011d8a:	e014      	b.n	8011db6 <_vfiprintf_r+0x156>
 8011d8c:	eba0 0308 	sub.w	r3, r0, r8
 8011d90:	fa09 f303 	lsl.w	r3, r9, r3
 8011d94:	4313      	orrs	r3, r2
 8011d96:	9304      	str	r3, [sp, #16]
 8011d98:	46a2      	mov	sl, r4
 8011d9a:	e7d2      	b.n	8011d42 <_vfiprintf_r+0xe2>
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	1d19      	adds	r1, r3, #4
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	9103      	str	r1, [sp, #12]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	bfbb      	ittet	lt
 8011da8:	425b      	neglt	r3, r3
 8011daa:	f042 0202 	orrlt.w	r2, r2, #2
 8011dae:	9307      	strge	r3, [sp, #28]
 8011db0:	9307      	strlt	r3, [sp, #28]
 8011db2:	bfb8      	it	lt
 8011db4:	9204      	strlt	r2, [sp, #16]
 8011db6:	7823      	ldrb	r3, [r4, #0]
 8011db8:	2b2e      	cmp	r3, #46	; 0x2e
 8011dba:	d10c      	bne.n	8011dd6 <_vfiprintf_r+0x176>
 8011dbc:	7863      	ldrb	r3, [r4, #1]
 8011dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8011dc0:	d135      	bne.n	8011e2e <_vfiprintf_r+0x1ce>
 8011dc2:	9b03      	ldr	r3, [sp, #12]
 8011dc4:	1d1a      	adds	r2, r3, #4
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	9203      	str	r2, [sp, #12]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	bfb8      	it	lt
 8011dce:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dd2:	3402      	adds	r4, #2
 8011dd4:	9305      	str	r3, [sp, #20]
 8011dd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011ebc <_vfiprintf_r+0x25c>
 8011dda:	7821      	ldrb	r1, [r4, #0]
 8011ddc:	2203      	movs	r2, #3
 8011dde:	4650      	mov	r0, sl
 8011de0:	f7ee fa0e 	bl	8000200 <memchr>
 8011de4:	b140      	cbz	r0, 8011df8 <_vfiprintf_r+0x198>
 8011de6:	2340      	movs	r3, #64	; 0x40
 8011de8:	eba0 000a 	sub.w	r0, r0, sl
 8011dec:	fa03 f000 	lsl.w	r0, r3, r0
 8011df0:	9b04      	ldr	r3, [sp, #16]
 8011df2:	4303      	orrs	r3, r0
 8011df4:	3401      	adds	r4, #1
 8011df6:	9304      	str	r3, [sp, #16]
 8011df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dfc:	482c      	ldr	r0, [pc, #176]	; (8011eb0 <_vfiprintf_r+0x250>)
 8011dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e02:	2206      	movs	r2, #6
 8011e04:	f7ee f9fc 	bl	8000200 <memchr>
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d03f      	beq.n	8011e8c <_vfiprintf_r+0x22c>
 8011e0c:	4b29      	ldr	r3, [pc, #164]	; (8011eb4 <_vfiprintf_r+0x254>)
 8011e0e:	bb1b      	cbnz	r3, 8011e58 <_vfiprintf_r+0x1f8>
 8011e10:	9b03      	ldr	r3, [sp, #12]
 8011e12:	3307      	adds	r3, #7
 8011e14:	f023 0307 	bic.w	r3, r3, #7
 8011e18:	3308      	adds	r3, #8
 8011e1a:	9303      	str	r3, [sp, #12]
 8011e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e1e:	443b      	add	r3, r7
 8011e20:	9309      	str	r3, [sp, #36]	; 0x24
 8011e22:	e767      	b.n	8011cf4 <_vfiprintf_r+0x94>
 8011e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8011e28:	460c      	mov	r4, r1
 8011e2a:	2001      	movs	r0, #1
 8011e2c:	e7a5      	b.n	8011d7a <_vfiprintf_r+0x11a>
 8011e2e:	2300      	movs	r3, #0
 8011e30:	3401      	adds	r4, #1
 8011e32:	9305      	str	r3, [sp, #20]
 8011e34:	4619      	mov	r1, r3
 8011e36:	f04f 0c0a 	mov.w	ip, #10
 8011e3a:	4620      	mov	r0, r4
 8011e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e40:	3a30      	subs	r2, #48	; 0x30
 8011e42:	2a09      	cmp	r2, #9
 8011e44:	d903      	bls.n	8011e4e <_vfiprintf_r+0x1ee>
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d0c5      	beq.n	8011dd6 <_vfiprintf_r+0x176>
 8011e4a:	9105      	str	r1, [sp, #20]
 8011e4c:	e7c3      	b.n	8011dd6 <_vfiprintf_r+0x176>
 8011e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e52:	4604      	mov	r4, r0
 8011e54:	2301      	movs	r3, #1
 8011e56:	e7f0      	b.n	8011e3a <_vfiprintf_r+0x1da>
 8011e58:	ab03      	add	r3, sp, #12
 8011e5a:	9300      	str	r3, [sp, #0]
 8011e5c:	462a      	mov	r2, r5
 8011e5e:	4b16      	ldr	r3, [pc, #88]	; (8011eb8 <_vfiprintf_r+0x258>)
 8011e60:	a904      	add	r1, sp, #16
 8011e62:	4630      	mov	r0, r6
 8011e64:	f7fb ff5e 	bl	800dd24 <_printf_float>
 8011e68:	4607      	mov	r7, r0
 8011e6a:	1c78      	adds	r0, r7, #1
 8011e6c:	d1d6      	bne.n	8011e1c <_vfiprintf_r+0x1bc>
 8011e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e70:	07d9      	lsls	r1, r3, #31
 8011e72:	d405      	bmi.n	8011e80 <_vfiprintf_r+0x220>
 8011e74:	89ab      	ldrh	r3, [r5, #12]
 8011e76:	059a      	lsls	r2, r3, #22
 8011e78:	d402      	bmi.n	8011e80 <_vfiprintf_r+0x220>
 8011e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e7c:	f7fb fd56 	bl	800d92c <__retarget_lock_release_recursive>
 8011e80:	89ab      	ldrh	r3, [r5, #12]
 8011e82:	065b      	lsls	r3, r3, #25
 8011e84:	f53f af12 	bmi.w	8011cac <_vfiprintf_r+0x4c>
 8011e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e8a:	e711      	b.n	8011cb0 <_vfiprintf_r+0x50>
 8011e8c:	ab03      	add	r3, sp, #12
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	462a      	mov	r2, r5
 8011e92:	4b09      	ldr	r3, [pc, #36]	; (8011eb8 <_vfiprintf_r+0x258>)
 8011e94:	a904      	add	r1, sp, #16
 8011e96:	4630      	mov	r0, r6
 8011e98:	f7fc f9e8 	bl	800e26c <_printf_i>
 8011e9c:	e7e4      	b.n	8011e68 <_vfiprintf_r+0x208>
 8011e9e:	bf00      	nop
 8011ea0:	080168d4 	.word	0x080168d4
 8011ea4:	080168f4 	.word	0x080168f4
 8011ea8:	080168b4 	.word	0x080168b4
 8011eac:	08016d0c 	.word	0x08016d0c
 8011eb0:	08016d16 	.word	0x08016d16
 8011eb4:	0800dd25 	.word	0x0800dd25
 8011eb8:	08011c3b 	.word	0x08011c3b
 8011ebc:	08016d12 	.word	0x08016d12

08011ec0 <_putc_r>:
 8011ec0:	b570      	push	{r4, r5, r6, lr}
 8011ec2:	460d      	mov	r5, r1
 8011ec4:	4614      	mov	r4, r2
 8011ec6:	4606      	mov	r6, r0
 8011ec8:	b118      	cbz	r0, 8011ed2 <_putc_r+0x12>
 8011eca:	6983      	ldr	r3, [r0, #24]
 8011ecc:	b90b      	cbnz	r3, 8011ed2 <_putc_r+0x12>
 8011ece:	f7fb fc69 	bl	800d7a4 <__sinit>
 8011ed2:	4b1c      	ldr	r3, [pc, #112]	; (8011f44 <_putc_r+0x84>)
 8011ed4:	429c      	cmp	r4, r3
 8011ed6:	d124      	bne.n	8011f22 <_putc_r+0x62>
 8011ed8:	6874      	ldr	r4, [r6, #4]
 8011eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011edc:	07d8      	lsls	r0, r3, #31
 8011ede:	d405      	bmi.n	8011eec <_putc_r+0x2c>
 8011ee0:	89a3      	ldrh	r3, [r4, #12]
 8011ee2:	0599      	lsls	r1, r3, #22
 8011ee4:	d402      	bmi.n	8011eec <_putc_r+0x2c>
 8011ee6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ee8:	f7fb fd1f 	bl	800d92a <__retarget_lock_acquire_recursive>
 8011eec:	68a3      	ldr	r3, [r4, #8]
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	60a3      	str	r3, [r4, #8]
 8011ef4:	da05      	bge.n	8011f02 <_putc_r+0x42>
 8011ef6:	69a2      	ldr	r2, [r4, #24]
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	db1c      	blt.n	8011f36 <_putc_r+0x76>
 8011efc:	b2eb      	uxtb	r3, r5
 8011efe:	2b0a      	cmp	r3, #10
 8011f00:	d019      	beq.n	8011f36 <_putc_r+0x76>
 8011f02:	6823      	ldr	r3, [r4, #0]
 8011f04:	1c5a      	adds	r2, r3, #1
 8011f06:	6022      	str	r2, [r4, #0]
 8011f08:	701d      	strb	r5, [r3, #0]
 8011f0a:	b2ed      	uxtb	r5, r5
 8011f0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f0e:	07da      	lsls	r2, r3, #31
 8011f10:	d405      	bmi.n	8011f1e <_putc_r+0x5e>
 8011f12:	89a3      	ldrh	r3, [r4, #12]
 8011f14:	059b      	lsls	r3, r3, #22
 8011f16:	d402      	bmi.n	8011f1e <_putc_r+0x5e>
 8011f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f1a:	f7fb fd07 	bl	800d92c <__retarget_lock_release_recursive>
 8011f1e:	4628      	mov	r0, r5
 8011f20:	bd70      	pop	{r4, r5, r6, pc}
 8011f22:	4b09      	ldr	r3, [pc, #36]	; (8011f48 <_putc_r+0x88>)
 8011f24:	429c      	cmp	r4, r3
 8011f26:	d101      	bne.n	8011f2c <_putc_r+0x6c>
 8011f28:	68b4      	ldr	r4, [r6, #8]
 8011f2a:	e7d6      	b.n	8011eda <_putc_r+0x1a>
 8011f2c:	4b07      	ldr	r3, [pc, #28]	; (8011f4c <_putc_r+0x8c>)
 8011f2e:	429c      	cmp	r4, r3
 8011f30:	bf08      	it	eq
 8011f32:	68f4      	ldreq	r4, [r6, #12]
 8011f34:	e7d1      	b.n	8011eda <_putc_r+0x1a>
 8011f36:	4629      	mov	r1, r5
 8011f38:	4622      	mov	r2, r4
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	f7fd fd0a 	bl	800f954 <__swbuf_r>
 8011f40:	4605      	mov	r5, r0
 8011f42:	e7e3      	b.n	8011f0c <_putc_r+0x4c>
 8011f44:	080168d4 	.word	0x080168d4
 8011f48:	080168f4 	.word	0x080168f4
 8011f4c:	080168b4 	.word	0x080168b4

08011f50 <_read_r>:
 8011f50:	b538      	push	{r3, r4, r5, lr}
 8011f52:	4d07      	ldr	r5, [pc, #28]	; (8011f70 <_read_r+0x20>)
 8011f54:	4604      	mov	r4, r0
 8011f56:	4608      	mov	r0, r1
 8011f58:	4611      	mov	r1, r2
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	602a      	str	r2, [r5, #0]
 8011f5e:	461a      	mov	r2, r3
 8011f60:	f7f1 fea0 	bl	8003ca4 <_read>
 8011f64:	1c43      	adds	r3, r0, #1
 8011f66:	d102      	bne.n	8011f6e <_read_r+0x1e>
 8011f68:	682b      	ldr	r3, [r5, #0]
 8011f6a:	b103      	cbz	r3, 8011f6e <_read_r+0x1e>
 8011f6c:	6023      	str	r3, [r4, #0]
 8011f6e:	bd38      	pop	{r3, r4, r5, pc}
 8011f70:	2000a8ac 	.word	0x2000a8ac
 8011f74:	00000000 	.word	0x00000000

08011f78 <nan>:
 8011f78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011f80 <nan+0x8>
 8011f7c:	4770      	bx	lr
 8011f7e:	bf00      	nop
 8011f80:	00000000 	.word	0x00000000
 8011f84:	7ff80000 	.word	0x7ff80000

08011f88 <strncmp>:
 8011f88:	b510      	push	{r4, lr}
 8011f8a:	b17a      	cbz	r2, 8011fac <strncmp+0x24>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	3901      	subs	r1, #1
 8011f90:	1884      	adds	r4, r0, r2
 8011f92:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011f96:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011f9a:	4290      	cmp	r0, r2
 8011f9c:	d101      	bne.n	8011fa2 <strncmp+0x1a>
 8011f9e:	42a3      	cmp	r3, r4
 8011fa0:	d101      	bne.n	8011fa6 <strncmp+0x1e>
 8011fa2:	1a80      	subs	r0, r0, r2
 8011fa4:	bd10      	pop	{r4, pc}
 8011fa6:	2800      	cmp	r0, #0
 8011fa8:	d1f3      	bne.n	8011f92 <strncmp+0xa>
 8011faa:	e7fa      	b.n	8011fa2 <strncmp+0x1a>
 8011fac:	4610      	mov	r0, r2
 8011fae:	e7f9      	b.n	8011fa4 <strncmp+0x1c>

08011fb0 <wcvt>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	b085      	sub	sp, #20
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	461d      	mov	r5, r3
 8011fba:	4614      	mov	r4, r2
 8011fbc:	bfbc      	itt	lt
 8011fbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8011fc2:	4614      	movlt	r4, r2
 8011fc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011fc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011fc8:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8011fcc:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8011fd0:	bfb6      	itet	lt
 8011fd2:	461d      	movlt	r5, r3
 8011fd4:	2300      	movge	r3, #0
 8011fd6:	232d      	movlt	r3, #45	; 0x2d
 8011fd8:	6013      	str	r3, [r2, #0]
 8011fda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011fdc:	f023 0820 	bic.w	r8, r3, #32
 8011fe0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fe4:	d005      	beq.n	8011ff2 <wcvt+0x42>
 8011fe6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011fea:	d100      	bne.n	8011fee <wcvt+0x3e>
 8011fec:	3601      	adds	r6, #1
 8011fee:	2102      	movs	r1, #2
 8011ff0:	e000      	b.n	8011ff4 <wcvt+0x44>
 8011ff2:	2103      	movs	r1, #3
 8011ff4:	ab03      	add	r3, sp, #12
 8011ff6:	9301      	str	r3, [sp, #4]
 8011ff8:	ab02      	add	r3, sp, #8
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	ec45 4b10 	vmov	d0, r4, r5
 8012000:	4653      	mov	r3, sl
 8012002:	4632      	mov	r2, r6
 8012004:	f7fd fe14 	bl	800fc30 <_dtoa_r>
 8012008:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801200c:	4607      	mov	r7, r0
 801200e:	d112      	bne.n	8012036 <wcvt+0x86>
 8012010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012012:	07db      	lsls	r3, r3, #31
 8012014:	d40f      	bmi.n	8012036 <wcvt+0x86>
 8012016:	9b03      	ldr	r3, [sp, #12]
 8012018:	1bdb      	subs	r3, r3, r7
 801201a:	f8cb 3000 	str.w	r3, [fp]
 801201e:	2300      	movs	r3, #0
 8012020:	f8db 2000 	ldr.w	r2, [fp]
 8012024:	429a      	cmp	r2, r3
 8012026:	dd02      	ble.n	801202e <wcvt+0x7e>
 8012028:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801202a:	4293      	cmp	r3, r2
 801202c:	db2a      	blt.n	8012084 <wcvt+0xd4>
 801202e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8012030:	b005      	add	sp, #20
 8012032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012036:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801203a:	eb07 0906 	add.w	r9, r7, r6
 801203e:	d110      	bne.n	8012062 <wcvt+0xb2>
 8012040:	783b      	ldrb	r3, [r7, #0]
 8012042:	2b30      	cmp	r3, #48	; 0x30
 8012044:	d10a      	bne.n	801205c <wcvt+0xac>
 8012046:	2200      	movs	r2, #0
 8012048:	2300      	movs	r3, #0
 801204a:	4620      	mov	r0, r4
 801204c:	4629      	mov	r1, r5
 801204e:	f7ee fd4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8012052:	b918      	cbnz	r0, 801205c <wcvt+0xac>
 8012054:	f1c6 0601 	rsb	r6, r6, #1
 8012058:	f8ca 6000 	str.w	r6, [sl]
 801205c:	f8da 3000 	ldr.w	r3, [sl]
 8012060:	4499      	add	r9, r3
 8012062:	2200      	movs	r2, #0
 8012064:	2300      	movs	r3, #0
 8012066:	4620      	mov	r0, r4
 8012068:	4629      	mov	r1, r5
 801206a:	f7ee fd3d 	bl	8000ae8 <__aeabi_dcmpeq>
 801206e:	b108      	cbz	r0, 8012074 <wcvt+0xc4>
 8012070:	f8cd 900c 	str.w	r9, [sp, #12]
 8012074:	2230      	movs	r2, #48	; 0x30
 8012076:	9b03      	ldr	r3, [sp, #12]
 8012078:	454b      	cmp	r3, r9
 801207a:	d2cc      	bcs.n	8012016 <wcvt+0x66>
 801207c:	1c59      	adds	r1, r3, #1
 801207e:	9103      	str	r1, [sp, #12]
 8012080:	701a      	strb	r2, [r3, #0]
 8012082:	e7f8      	b.n	8012076 <wcvt+0xc6>
 8012084:	9914      	ldr	r1, [sp, #80]	; 0x50
 8012086:	5cfa      	ldrb	r2, [r7, r3]
 8012088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801208c:	3301      	adds	r3, #1
 801208e:	e7c7      	b.n	8012020 <wcvt+0x70>

08012090 <_svfwprintf_r>:
 8012090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012094:	ed2d 8b04 	vpush	{d8-d9}
 8012098:	b0d3      	sub	sp, #332	; 0x14c
 801209a:	461d      	mov	r5, r3
 801209c:	2300      	movs	r3, #0
 801209e:	4689      	mov	r9, r1
 80120a0:	9319      	str	r3, [sp, #100]	; 0x64
 80120a2:	4683      	mov	fp, r0
 80120a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80120a6:	f7fe ff43 	bl	8010f30 <_localeconv_r>
 80120aa:	6803      	ldr	r3, [r0, #0]
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	9316      	str	r3, [sp, #88]	; 0x58
 80120b0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80120b4:	061e      	lsls	r6, r3, #24
 80120b6:	d51a      	bpl.n	80120ee <_svfwprintf_r+0x5e>
 80120b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80120bc:	b9bb      	cbnz	r3, 80120ee <_svfwprintf_r+0x5e>
 80120be:	2140      	movs	r1, #64	; 0x40
 80120c0:	4658      	mov	r0, fp
 80120c2:	f7fb fd1b 	bl	800dafc <_malloc_r>
 80120c6:	f8c9 0000 	str.w	r0, [r9]
 80120ca:	f8c9 0010 	str.w	r0, [r9, #16]
 80120ce:	b958      	cbnz	r0, 80120e8 <_svfwprintf_r+0x58>
 80120d0:	230c      	movs	r3, #12
 80120d2:	f8cb 3000 	str.w	r3, [fp]
 80120d6:	f04f 33ff 	mov.w	r3, #4294967295
 80120da:	930d      	str	r3, [sp, #52]	; 0x34
 80120dc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80120de:	b053      	add	sp, #332	; 0x14c
 80120e0:	ecbd 8b04 	vpop	{d8-d9}
 80120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120e8:	2340      	movs	r3, #64	; 0x40
 80120ea:	f8c9 3014 	str.w	r3, [r9, #20]
 80120ee:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 8012328 <_svfwprintf_r+0x298>
 80120f2:	2300      	movs	r3, #0
 80120f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80120f6:	9311      	str	r3, [sp, #68]	; 0x44
 80120f8:	930d      	str	r3, [sp, #52]	; 0x34
 80120fa:	eeb0 8a47 	vmov.f32	s16, s14
 80120fe:	eef0 8a67 	vmov.f32	s17, s15
 8012102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012104:	461c      	mov	r4, r3
 8012106:	f853 2b04 	ldr.w	r2, [r3], #4
 801210a:	b10a      	cbz	r2, 8012110 <_svfwprintf_r+0x80>
 801210c:	2a25      	cmp	r2, #37	; 0x25
 801210e:	d1f9      	bne.n	8012104 <_svfwprintf_r+0x74>
 8012110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012112:	42a3      	cmp	r3, r4
 8012114:	d00d      	beq.n	8012132 <_svfwprintf_r+0xa2>
 8012116:	1ae6      	subs	r6, r4, r3
 8012118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801211a:	4633      	mov	r3, r6
 801211c:	4649      	mov	r1, r9
 801211e:	4658      	mov	r0, fp
 8012120:	f7ff fc19 	bl	8011956 <__ssputs_r>
 8012124:	3001      	adds	r0, #1
 8012126:	f000 80e9 	beq.w	80122fc <_svfwprintf_r+0x26c>
 801212a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801212c:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 8012130:	930d      	str	r3, [sp, #52]	; 0x34
 8012132:	6823      	ldr	r3, [r4, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	f000 80e1 	beq.w	80122fc <_svfwprintf_r+0x26c>
 801213a:	2100      	movs	r1, #0
 801213c:	1d22      	adds	r2, r4, #4
 801213e:	9115      	str	r1, [sp, #84]	; 0x54
 8012140:	460e      	mov	r6, r1
 8012142:	f04f 34ff 	mov.w	r4, #4294967295
 8012146:	910c      	str	r1, [sp, #48]	; 0x30
 8012148:	460f      	mov	r7, r1
 801214a:	200a      	movs	r0, #10
 801214c:	4613      	mov	r3, r2
 801214e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012152:	9209      	str	r2, [sp, #36]	; 0x24
 8012154:	930b      	str	r3, [sp, #44]	; 0x2c
 8012156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012158:	2b39      	cmp	r3, #57	; 0x39
 801215a:	d84c      	bhi.n	80121f6 <_svfwprintf_r+0x166>
 801215c:	2b1f      	cmp	r3, #31
 801215e:	d94f      	bls.n	8012200 <_svfwprintf_r+0x170>
 8012160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012162:	3b20      	subs	r3, #32
 8012164:	2b19      	cmp	r3, #25
 8012166:	d84a      	bhi.n	80121fe <_svfwprintf_r+0x16e>
 8012168:	e8df f003 	tbb	[pc, r3]
 801216c:	7049496b 	.word	0x7049496b
 8012170:	49494949 	.word	0x49494949
 8012174:	6c734949 	.word	0x6c734949
 8012178:	497d7a49 	.word	0x497d7a49
 801217c:	9b9b9b98 	.word	0x9b9b9b98
 8012180:	9b9b9b9b 	.word	0x9b9b9b9b
 8012184:	9b9b      	.short	0x9b9b
 8012186:	2b33      	cmp	r3, #51	; 0x33
 8012188:	d839      	bhi.n	80121fe <_svfwprintf_r+0x16e>
 801218a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801218e:	00e5      	.short	0x00e5
 8012190:	00e50038 	.word	0x00e50038
 8012194:	00380038 	.word	0x00380038
 8012198:	00380038 	.word	0x00380038
 801219c:	0038009c 	.word	0x0038009c
 80121a0:	00380038 	.word	0x00380038
 80121a4:	00380038 	.word	0x00380038
 80121a8:	00380038 	.word	0x00380038
 80121ac:	00380038 	.word	0x00380038
 80121b0:	00380038 	.word	0x00380038
 80121b4:	0038031e 	.word	0x0038031e
 80121b8:	00380038 	.word	0x00380038
 80121bc:	00380038 	.word	0x00380038
 80121c0:	00380038 	.word	0x00380038
 80121c4:	00380038 	.word	0x00380038
 80121c8:	00a50038 	.word	0x00a50038
 80121cc:	00e500d3 	.word	0x00e500d3
 80121d0:	00e500e5 	.word	0x00e500e5
 80121d4:	00d3009f 	.word	0x00d3009f
 80121d8:	00380038 	.word	0x00380038
 80121dc:	003800a2 	.word	0x003800a2
 80121e0:	02950284 	.word	0x02950284
 80121e4:	00a202b3 	.word	0x00a202b3
 80121e8:	02c20038 	.word	0x02c20038
 80121ec:	03120038 	.word	0x03120038
 80121f0:	00380038 	.word	0x00380038
 80121f4:	0042      	.short	0x0042
 80121f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121f8:	3b45      	subs	r3, #69	; 0x45
 80121fa:	2b33      	cmp	r3, #51	; 0x33
 80121fc:	d9c3      	bls.n	8012186 <_svfwprintf_r+0xf6>
 80121fe:	b111      	cbz	r1, 8012206 <_svfwprintf_r+0x176>
 8012200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012202:	2b00      	cmp	r3, #0
 8012204:	d07a      	beq.n	80122fc <_svfwprintf_r+0x26c>
 8012206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012208:	932a      	str	r3, [sp, #168]	; 0xa8
 801220a:	2000      	movs	r0, #0
 801220c:	9015      	str	r0, [sp, #84]	; 0x54
 801220e:	950a      	str	r5, [sp, #40]	; 0x28
 8012210:	e081      	b.n	8012316 <_svfwprintf_r+0x286>
 8012212:	b101      	cbz	r1, 8012216 <_svfwprintf_r+0x186>
 8012214:	9615      	str	r6, [sp, #84]	; 0x54
 8012216:	4b46      	ldr	r3, [pc, #280]	; (8012330 <_svfwprintf_r+0x2a0>)
 8012218:	930f      	str	r3, [sp, #60]	; 0x3c
 801221a:	462a      	mov	r2, r5
 801221c:	06f8      	lsls	r0, r7, #27
 801221e:	f852 3b04 	ldr.w	r3, [r2], #4
 8012222:	920a      	str	r2, [sp, #40]	; 0x28
 8012224:	d402      	bmi.n	801222c <_svfwprintf_r+0x19c>
 8012226:	0679      	lsls	r1, r7, #25
 8012228:	bf48      	it	mi
 801222a:	b29b      	uxthmi	r3, r3
 801222c:	07fa      	lsls	r2, r7, #31
 801222e:	d506      	bpl.n	801223e <_svfwprintf_r+0x1ae>
 8012230:	b12b      	cbz	r3, 801223e <_svfwprintf_r+0x1ae>
 8012232:	2230      	movs	r2, #48	; 0x30
 8012234:	921a      	str	r2, [sp, #104]	; 0x68
 8012236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012238:	921b      	str	r2, [sp, #108]	; 0x6c
 801223a:	f047 0702 	orr.w	r7, r7, #2
 801223e:	2202      	movs	r2, #2
 8012240:	e242      	b.n	80126c8 <_svfwprintf_r+0x638>
 8012242:	b90e      	cbnz	r6, 8012248 <_svfwprintf_r+0x1b8>
 8012244:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012246:	2101      	movs	r1, #1
 8012248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801224a:	e77f      	b.n	801214c <_svfwprintf_r+0xbc>
 801224c:	f047 0701 	orr.w	r7, r7, #1
 8012250:	e7fa      	b.n	8012248 <_svfwprintf_r+0x1b8>
 8012252:	f855 3b04 	ldr.w	r3, [r5], #4
 8012256:	930c      	str	r3, [sp, #48]	; 0x30
 8012258:	2b00      	cmp	r3, #0
 801225a:	daf5      	bge.n	8012248 <_svfwprintf_r+0x1b8>
 801225c:	425b      	negs	r3, r3
 801225e:	930c      	str	r3, [sp, #48]	; 0x30
 8012260:	f047 0704 	orr.w	r7, r7, #4
 8012264:	e7f0      	b.n	8012248 <_svfwprintf_r+0x1b8>
 8012266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012268:	f852 3b04 	ldr.w	r3, [r2], #4
 801226c:	9309      	str	r3, [sp, #36]	; 0x24
 801226e:	2b2a      	cmp	r3, #42	; 0x2a
 8012270:	d112      	bne.n	8012298 <_svfwprintf_r+0x208>
 8012272:	f855 4b04 	ldr.w	r4, [r5], #4
 8012276:	920b      	str	r2, [sp, #44]	; 0x2c
 8012278:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 801227c:	e7e4      	b.n	8012248 <_svfwprintf_r+0x1b8>
 801227e:	fb00 3404 	mla	r4, r0, r4, r3
 8012282:	f852 3b04 	ldr.w	r3, [r2], #4
 8012286:	9309      	str	r3, [sp, #36]	; 0x24
 8012288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801228a:	3b30      	subs	r3, #48	; 0x30
 801228c:	2b09      	cmp	r3, #9
 801228e:	d9f6      	bls.n	801227e <_svfwprintf_r+0x1ee>
 8012290:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8012294:	920b      	str	r2, [sp, #44]	; 0x2c
 8012296:	e75e      	b.n	8012156 <_svfwprintf_r+0xc6>
 8012298:	2400      	movs	r4, #0
 801229a:	e7f5      	b.n	8012288 <_svfwprintf_r+0x1f8>
 801229c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80122a0:	e7d2      	b.n	8012248 <_svfwprintf_r+0x1b8>
 80122a2:	2300      	movs	r3, #0
 80122a4:	930c      	str	r3, [sp, #48]	; 0x30
 80122a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122aa:	fb00 3302 	mla	r3, r0, r2, r3
 80122ae:	3b30      	subs	r3, #48	; 0x30
 80122b0:	930c      	str	r3, [sp, #48]	; 0x30
 80122b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80122b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80122ba:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80122be:	2b09      	cmp	r3, #9
 80122c0:	9209      	str	r2, [sp, #36]	; 0x24
 80122c2:	d9f0      	bls.n	80122a6 <_svfwprintf_r+0x216>
 80122c4:	e747      	b.n	8012156 <_svfwprintf_r+0xc6>
 80122c6:	f047 0708 	orr.w	r7, r7, #8
 80122ca:	e7bd      	b.n	8012248 <_svfwprintf_r+0x1b8>
 80122cc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 80122d0:	e7ba      	b.n	8012248 <_svfwprintf_r+0x1b8>
 80122d2:	f047 0710 	orr.w	r7, r7, #16
 80122d6:	e7b7      	b.n	8012248 <_svfwprintf_r+0x1b8>
 80122d8:	b101      	cbz	r1, 80122dc <_svfwprintf_r+0x24c>
 80122da:	9615      	str	r6, [sp, #84]	; 0x54
 80122dc:	462b      	mov	r3, r5
 80122de:	06fd      	lsls	r5, r7, #27
 80122e0:	f853 0b04 	ldr.w	r0, [r3], #4
 80122e4:	930a      	str	r3, [sp, #40]	; 0x28
 80122e6:	d412      	bmi.n	801230e <_svfwprintf_r+0x27e>
 80122e8:	f000 fc90 	bl	8012c0c <btowc>
 80122ec:	1c44      	adds	r4, r0, #1
 80122ee:	d10e      	bne.n	801230e <_svfwprintf_r+0x27e>
 80122f0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80122f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122f8:	f8a9 300c 	strh.w	r3, [r9, #12]
 80122fc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8012300:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012306:	bf18      	it	ne
 8012308:	f04f 33ff 	movne.w	r3, #4294967295
 801230c:	e6e5      	b.n	80120da <_svfwprintf_r+0x4a>
 801230e:	902a      	str	r0, [sp, #168]	; 0xa8
 8012310:	2000      	movs	r0, #0
 8012312:	902b      	str	r0, [sp, #172]	; 0xac
 8012314:	9015      	str	r0, [sp, #84]	; 0x54
 8012316:	4680      	mov	r8, r0
 8012318:	2401      	movs	r4, #1
 801231a:	4606      	mov	r6, r0
 801231c:	4605      	mov	r5, r0
 801231e:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8012322:	e104      	b.n	801252e <_svfwprintf_r+0x49e>
 8012324:	f3af 8000 	nop.w
	...
 8012330:	08016da4 	.word	0x08016da4
 8012334:	b101      	cbz	r1, 8012338 <_svfwprintf_r+0x2a8>
 8012336:	9615      	str	r6, [sp, #84]	; 0x54
 8012338:	462a      	mov	r2, r5
 801233a:	06f9      	lsls	r1, r7, #27
 801233c:	f852 3b04 	ldr.w	r3, [r2], #4
 8012340:	920a      	str	r2, [sp, #40]	; 0x28
 8012342:	d402      	bmi.n	801234a <_svfwprintf_r+0x2ba>
 8012344:	067a      	lsls	r2, r7, #25
 8012346:	bf48      	it	mi
 8012348:	b21b      	sxthmi	r3, r3
 801234a:	2b00      	cmp	r3, #0
 801234c:	da02      	bge.n	8012354 <_svfwprintf_r+0x2c4>
 801234e:	222d      	movs	r2, #45	; 0x2d
 8012350:	425b      	negs	r3, r3
 8012352:	9215      	str	r2, [sp, #84]	; 0x54
 8012354:	2201      	movs	r2, #1
 8012356:	e1b9      	b.n	80126cc <_svfwprintf_r+0x63c>
 8012358:	b101      	cbz	r1, 801235c <_svfwprintf_r+0x2cc>
 801235a:	9615      	str	r6, [sp, #84]	; 0x54
 801235c:	3507      	adds	r5, #7
 801235e:	f025 0307 	bic.w	r3, r5, #7
 8012362:	ecb3 7b02 	vldmia	r3!, {d7}
 8012366:	930a      	str	r3, [sp, #40]	; 0x28
 8012368:	eeb0 8a47 	vmov.f32	s16, s14
 801236c:	eef0 8a67 	vmov.f32	s17, s15
 8012370:	ee18 3a90 	vmov	r3, s17
 8012374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012378:	ee09 3a90 	vmov	s19, r3
 801237c:	eeb0 9a47 	vmov.f32	s18, s14
 8012380:	4ba6      	ldr	r3, [pc, #664]	; (801261c <_svfwprintf_r+0x58c>)
 8012382:	ec51 0b19 	vmov	r0, r1, d9
 8012386:	f04f 32ff 	mov.w	r2, #4294967295
 801238a:	f7ee fbdf 	bl	8000b4c <__aeabi_dcmpun>
 801238e:	b9f0      	cbnz	r0, 80123ce <_svfwprintf_r+0x33e>
 8012390:	4ba2      	ldr	r3, [pc, #648]	; (801261c <_svfwprintf_r+0x58c>)
 8012392:	ec51 0b19 	vmov	r0, r1, d9
 8012396:	f04f 32ff 	mov.w	r2, #4294967295
 801239a:	f7ee fbb9 	bl	8000b10 <__aeabi_dcmple>
 801239e:	b9b0      	cbnz	r0, 80123ce <_svfwprintf_r+0x33e>
 80123a0:	ec51 0b18 	vmov	r0, r1, d8
 80123a4:	2200      	movs	r2, #0
 80123a6:	2300      	movs	r3, #0
 80123a8:	f7ee fba8 	bl	8000afc <__aeabi_dcmplt>
 80123ac:	b108      	cbz	r0, 80123b2 <_svfwprintf_r+0x322>
 80123ae:	232d      	movs	r3, #45	; 0x2d
 80123b0:	9315      	str	r3, [sp, #84]	; 0x54
 80123b2:	4b9b      	ldr	r3, [pc, #620]	; (8012620 <_svfwprintf_r+0x590>)
 80123b4:	489b      	ldr	r0, [pc, #620]	; (8012624 <_svfwprintf_r+0x594>)
 80123b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123b8:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 80123bc:	2a47      	cmp	r2, #71	; 0x47
 80123be:	bf94      	ite	ls
 80123c0:	469a      	movls	sl, r3
 80123c2:	4682      	movhi	sl, r0
 80123c4:	f04f 0800 	mov.w	r8, #0
 80123c8:	2403      	movs	r4, #3
 80123ca:	4646      	mov	r6, r8
 80123cc:	e3d4      	b.n	8012b78 <_svfwprintf_r+0xae8>
 80123ce:	ec53 2b18 	vmov	r2, r3, d8
 80123d2:	ec51 0b18 	vmov	r0, r1, d8
 80123d6:	f7ee fbb9 	bl	8000b4c <__aeabi_dcmpun>
 80123da:	b140      	cbz	r0, 80123ee <_svfwprintf_r+0x35e>
 80123dc:	ee18 3a90 	vmov	r3, s17
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	bfbc      	itt	lt
 80123e4:	232d      	movlt	r3, #45	; 0x2d
 80123e6:	9315      	strlt	r3, [sp, #84]	; 0x54
 80123e8:	488f      	ldr	r0, [pc, #572]	; (8012628 <_svfwprintf_r+0x598>)
 80123ea:	4b90      	ldr	r3, [pc, #576]	; (801262c <_svfwprintf_r+0x59c>)
 80123ec:	e7e3      	b.n	80123b6 <_svfwprintf_r+0x326>
 80123ee:	1c63      	adds	r3, r4, #1
 80123f0:	f000 810f 	beq.w	8012612 <_svfwprintf_r+0x582>
 80123f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123f6:	f023 0320 	bic.w	r3, r3, #32
 80123fa:	2b47      	cmp	r3, #71	; 0x47
 80123fc:	d102      	bne.n	8012404 <_svfwprintf_r+0x374>
 80123fe:	2c00      	cmp	r4, #0
 8012400:	bf08      	it	eq
 8012402:	2401      	moveq	r4, #1
 8012404:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8012408:	930e      	str	r3, [sp, #56]	; 0x38
 801240a:	2328      	movs	r3, #40	; 0x28
 801240c:	9307      	str	r3, [sp, #28]
 801240e:	ab19      	add	r3, sp, #100	; 0x64
 8012410:	9305      	str	r3, [sp, #20]
 8012412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012414:	9304      	str	r3, [sp, #16]
 8012416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012418:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 801241c:	ae18      	add	r6, sp, #96	; 0x60
 801241e:	ad17      	add	r5, sp, #92	; 0x5c
 8012420:	e9cd 4300 	strd	r4, r3, [sp]
 8012424:	f8cd 8018 	str.w	r8, [sp, #24]
 8012428:	ec53 2b18 	vmov	r2, r3, d8
 801242c:	9603      	str	r6, [sp, #12]
 801242e:	9502      	str	r5, [sp, #8]
 8012430:	4658      	mov	r0, fp
 8012432:	f7ff fdbd 	bl	8011fb0 <wcvt>
 8012436:	4540      	cmp	r0, r8
 8012438:	4682      	mov	sl, r0
 801243a:	f040 80ec 	bne.w	8012616 <_svfwprintf_r+0x586>
 801243e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8012440:	2928      	cmp	r1, #40	; 0x28
 8012442:	f340 80e8 	ble.w	8012616 <_svfwprintf_r+0x586>
 8012446:	0089      	lsls	r1, r1, #2
 8012448:	4658      	mov	r0, fp
 801244a:	f7fb fb57 	bl	800dafc <_malloc_r>
 801244e:	4680      	mov	r8, r0
 8012450:	2800      	cmp	r0, #0
 8012452:	f43f af4d 	beq.w	80122f0 <_svfwprintf_r+0x260>
 8012456:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012458:	9502      	str	r5, [sp, #8]
 801245a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 801245e:	ab19      	add	r3, sp, #100	; 0x64
 8012460:	9305      	str	r3, [sp, #20]
 8012462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012464:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8012468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801246a:	4658      	mov	r0, fp
 801246c:	e9cd 4300 	strd	r4, r3, [sp]
 8012470:	ec53 2b18 	vmov	r2, r3, d8
 8012474:	f7ff fd9c 	bl	8011fb0 <wcvt>
 8012478:	4682      	mov	sl, r0
 801247a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801247c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801247e:	f023 0320 	bic.w	r3, r3, #32
 8012482:	2b47      	cmp	r3, #71	; 0x47
 8012484:	f040 80d6 	bne.w	8012634 <_svfwprintf_r+0x5a4>
 8012488:	1cee      	adds	r6, r5, #3
 801248a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801248c:	db02      	blt.n	8012494 <_svfwprintf_r+0x404>
 801248e:	42ac      	cmp	r4, r5
 8012490:	f280 80ec 	bge.w	801266c <_svfwprintf_r+0x5dc>
 8012494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012496:	3b02      	subs	r3, #2
 8012498:	9309      	str	r3, [sp, #36]	; 0x24
 801249a:	1e6b      	subs	r3, r5, #1
 801249c:	2b00      	cmp	r3, #0
 801249e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124a0:	9318      	str	r3, [sp, #96]	; 0x60
 80124a2:	bfb8      	it	lt
 80124a4:	f1c5 0301 	rsblt	r3, r5, #1
 80124a8:	921c      	str	r2, [sp, #112]	; 0x70
 80124aa:	bfb4      	ite	lt
 80124ac:	222d      	movlt	r2, #45	; 0x2d
 80124ae:	222b      	movge	r2, #43	; 0x2b
 80124b0:	2b09      	cmp	r3, #9
 80124b2:	921d      	str	r2, [sp, #116]	; 0x74
 80124b4:	f340 80d1 	ble.w	801265a <_svfwprintf_r+0x5ca>
 80124b8:	a82a      	add	r0, sp, #168	; 0xa8
 80124ba:	250a      	movs	r5, #10
 80124bc:	4602      	mov	r2, r0
 80124be:	fb93 f4f5 	sdiv	r4, r3, r5
 80124c2:	fb05 3114 	mls	r1, r5, r4, r3
 80124c6:	3130      	adds	r1, #48	; 0x30
 80124c8:	f842 1c04 	str.w	r1, [r2, #-4]
 80124cc:	4619      	mov	r1, r3
 80124ce:	2963      	cmp	r1, #99	; 0x63
 80124d0:	f1a0 0004 	sub.w	r0, r0, #4
 80124d4:	4623      	mov	r3, r4
 80124d6:	dcf1      	bgt.n	80124bc <_svfwprintf_r+0x42c>
 80124d8:	3330      	adds	r3, #48	; 0x30
 80124da:	f840 3c04 	str.w	r3, [r0, #-4]
 80124de:	f1a2 0108 	sub.w	r1, r2, #8
 80124e2:	a81e      	add	r0, sp, #120	; 0x78
 80124e4:	ab2a      	add	r3, sp, #168	; 0xa8
 80124e6:	4299      	cmp	r1, r3
 80124e8:	f0c0 80b2 	bcc.w	8012650 <_svfwprintf_r+0x5c0>
 80124ec:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 80124f0:	1aa4      	subs	r4, r4, r2
 80124f2:	f024 0403 	bic.w	r4, r4, #3
 80124f6:	3a0b      	subs	r2, #11
 80124f8:	4293      	cmp	r3, r2
 80124fa:	bf38      	it	cc
 80124fc:	2400      	movcc	r4, #0
 80124fe:	ab1e      	add	r3, sp, #120	; 0x78
 8012500:	441c      	add	r4, r3
 8012502:	a81c      	add	r0, sp, #112	; 0x70
 8012504:	1a24      	subs	r4, r4, r0
 8012506:	10a3      	asrs	r3, r4, #2
 8012508:	9311      	str	r3, [sp, #68]	; 0x44
 801250a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801250c:	2b01      	cmp	r3, #1
 801250e:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 8012512:	dc02      	bgt.n	801251a <_svfwprintf_r+0x48a>
 8012514:	f017 0501 	ands.w	r5, r7, #1
 8012518:	d001      	beq.n	801251e <_svfwprintf_r+0x48e>
 801251a:	3401      	adds	r4, #1
 801251c:	2500      	movs	r5, #0
 801251e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012520:	2e00      	cmp	r6, #0
 8012522:	f000 817e 	beq.w	8012822 <_svfwprintf_r+0x792>
 8012526:	232d      	movs	r3, #45	; 0x2d
 8012528:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801252a:	9315      	str	r3, [sp, #84]	; 0x54
 801252c:	2600      	movs	r6, #0
 801252e:	42a6      	cmp	r6, r4
 8012530:	4633      	mov	r3, r6
 8012532:	bfb8      	it	lt
 8012534:	4623      	movlt	r3, r4
 8012536:	930e      	str	r3, [sp, #56]	; 0x38
 8012538:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801253a:	b113      	cbz	r3, 8012542 <_svfwprintf_r+0x4b2>
 801253c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801253e:	3301      	adds	r3, #1
 8012540:	930e      	str	r3, [sp, #56]	; 0x38
 8012542:	f017 0302 	ands.w	r3, r7, #2
 8012546:	9312      	str	r3, [sp, #72]	; 0x48
 8012548:	bf1e      	ittt	ne
 801254a:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 801254c:	3302      	addne	r3, #2
 801254e:	930e      	strne	r3, [sp, #56]	; 0x38
 8012550:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8012554:	9313      	str	r3, [sp, #76]	; 0x4c
 8012556:	f000 8166 	beq.w	8012826 <_svfwprintf_r+0x796>
 801255a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801255c:	b143      	cbz	r3, 8012570 <_svfwprintf_r+0x4e0>
 801255e:	2304      	movs	r3, #4
 8012560:	aa15      	add	r2, sp, #84	; 0x54
 8012562:	4649      	mov	r1, r9
 8012564:	4658      	mov	r0, fp
 8012566:	f7ff f9f6 	bl	8011956 <__ssputs_r>
 801256a:	3001      	adds	r0, #1
 801256c:	f000 816e 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012572:	b143      	cbz	r3, 8012586 <_svfwprintf_r+0x4f6>
 8012574:	2308      	movs	r3, #8
 8012576:	aa1a      	add	r2, sp, #104	; 0x68
 8012578:	4649      	mov	r1, r9
 801257a:	4658      	mov	r0, fp
 801257c:	f7ff f9eb 	bl	8011956 <__ssputs_r>
 8012580:	3001      	adds	r0, #1
 8012582:	f000 8163 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012588:	2b80      	cmp	r3, #128	; 0x80
 801258a:	d113      	bne.n	80125b4 <_svfwprintf_r+0x524>
 801258c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801258e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012590:	1a9b      	subs	r3, r3, r2
 8012592:	2b00      	cmp	r3, #0
 8012594:	9310      	str	r3, [sp, #64]	; 0x40
 8012596:	dd0d      	ble.n	80125b4 <_svfwprintf_r+0x524>
 8012598:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801259a:	4a25      	ldr	r2, [pc, #148]	; (8012630 <_svfwprintf_r+0x5a0>)
 801259c:	2b10      	cmp	r3, #16
 801259e:	f300 816a 	bgt.w	8012876 <_svfwprintf_r+0x7e6>
 80125a2:	4a23      	ldr	r2, [pc, #140]	; (8012630 <_svfwprintf_r+0x5a0>)
 80125a4:	009b      	lsls	r3, r3, #2
 80125a6:	4649      	mov	r1, r9
 80125a8:	4658      	mov	r0, fp
 80125aa:	f7ff f9d4 	bl	8011956 <__ssputs_r>
 80125ae:	3001      	adds	r0, #1
 80125b0:	f000 814c 	beq.w	801284c <_svfwprintf_r+0x7bc>
 80125b4:	1b36      	subs	r6, r6, r4
 80125b6:	2e00      	cmp	r6, #0
 80125b8:	dd0c      	ble.n	80125d4 <_svfwprintf_r+0x544>
 80125ba:	2e10      	cmp	r6, #16
 80125bc:	4a1c      	ldr	r2, [pc, #112]	; (8012630 <_svfwprintf_r+0x5a0>)
 80125be:	f300 8165 	bgt.w	801288c <_svfwprintf_r+0x7fc>
 80125c2:	4a1b      	ldr	r2, [pc, #108]	; (8012630 <_svfwprintf_r+0x5a0>)
 80125c4:	00b3      	lsls	r3, r6, #2
 80125c6:	4649      	mov	r1, r9
 80125c8:	4658      	mov	r0, fp
 80125ca:	f7ff f9c4 	bl	8011956 <__ssputs_r>
 80125ce:	3001      	adds	r0, #1
 80125d0:	f000 813c 	beq.w	801284c <_svfwprintf_r+0x7bc>
 80125d4:	05f9      	lsls	r1, r7, #23
 80125d6:	f100 8162 	bmi.w	801289e <_svfwprintf_r+0x80e>
 80125da:	00a3      	lsls	r3, r4, #2
 80125dc:	4652      	mov	r2, sl
 80125de:	4649      	mov	r1, r9
 80125e0:	4658      	mov	r0, fp
 80125e2:	f7ff f9b8 	bl	8011956 <__ssputs_r>
 80125e6:	3001      	adds	r0, #1
 80125e8:	f000 8130 	beq.w	801284c <_svfwprintf_r+0x7bc>
 80125ec:	077a      	lsls	r2, r7, #29
 80125ee:	f100 8281 	bmi.w	8012af4 <_svfwprintf_r+0xa64>
 80125f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80125f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80125f8:	428a      	cmp	r2, r1
 80125fa:	bfac      	ite	ge
 80125fc:	189b      	addge	r3, r3, r2
 80125fe:	185b      	addlt	r3, r3, r1
 8012600:	930d      	str	r3, [sp, #52]	; 0x34
 8012602:	f1b8 0f00 	cmp.w	r8, #0
 8012606:	d055      	beq.n	80126b4 <_svfwprintf_r+0x624>
 8012608:	4641      	mov	r1, r8
 801260a:	4658      	mov	r0, fp
 801260c:	f7fb fa0a 	bl	800da24 <_free_r>
 8012610:	e050      	b.n	80126b4 <_svfwprintf_r+0x624>
 8012612:	2406      	movs	r4, #6
 8012614:	e6f6      	b.n	8012404 <_svfwprintf_r+0x374>
 8012616:	f04f 0800 	mov.w	r8, #0
 801261a:	e72e      	b.n	801247a <_svfwprintf_r+0x3ea>
 801261c:	7fefffff 	.word	0x7fefffff
 8012620:	08016d20 	.word	0x08016d20
 8012624:	08016d30 	.word	0x08016d30
 8012628:	08016d50 	.word	0x08016d50
 801262c:	08016d40 	.word	0x08016d40
 8012630:	08016e30 	.word	0x08016e30
 8012634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012636:	2b66      	cmp	r3, #102	; 0x66
 8012638:	f47f af2f 	bne.w	801249a <_svfwprintf_r+0x40a>
 801263c:	f007 0301 	and.w	r3, r7, #1
 8012640:	2d00      	cmp	r5, #0
 8012642:	ea43 0304 	orr.w	r3, r3, r4
 8012646:	dd0e      	ble.n	8012666 <_svfwprintf_r+0x5d6>
 8012648:	b1fb      	cbz	r3, 801268a <_svfwprintf_r+0x5fa>
 801264a:	3401      	adds	r4, #1
 801264c:	442c      	add	r4, r5
 801264e:	e766      	b.n	801251e <_svfwprintf_r+0x48e>
 8012650:	f851 4b04 	ldr.w	r4, [r1], #4
 8012654:	f840 4b04 	str.w	r4, [r0], #4
 8012658:	e745      	b.n	80124e6 <_svfwprintf_r+0x456>
 801265a:	2230      	movs	r2, #48	; 0x30
 801265c:	4413      	add	r3, r2
 801265e:	921e      	str	r2, [sp, #120]	; 0x78
 8012660:	931f      	str	r3, [sp, #124]	; 0x7c
 8012662:	ac20      	add	r4, sp, #128	; 0x80
 8012664:	e74d      	b.n	8012502 <_svfwprintf_r+0x472>
 8012666:	b193      	cbz	r3, 801268e <_svfwprintf_r+0x5fe>
 8012668:	3402      	adds	r4, #2
 801266a:	e758      	b.n	801251e <_svfwprintf_r+0x48e>
 801266c:	42ab      	cmp	r3, r5
 801266e:	dc05      	bgt.n	801267c <_svfwprintf_r+0x5ec>
 8012670:	07fc      	lsls	r4, r7, #31
 8012672:	d50e      	bpl.n	8012692 <_svfwprintf_r+0x602>
 8012674:	1c6c      	adds	r4, r5, #1
 8012676:	2367      	movs	r3, #103	; 0x67
 8012678:	9309      	str	r3, [sp, #36]	; 0x24
 801267a:	e750      	b.n	801251e <_svfwprintf_r+0x48e>
 801267c:	2d00      	cmp	r5, #0
 801267e:	bfd4      	ite	le
 8012680:	f1c5 0402 	rsble	r4, r5, #2
 8012684:	2401      	movgt	r4, #1
 8012686:	441c      	add	r4, r3
 8012688:	e7f5      	b.n	8012676 <_svfwprintf_r+0x5e6>
 801268a:	462c      	mov	r4, r5
 801268c:	e747      	b.n	801251e <_svfwprintf_r+0x48e>
 801268e:	2401      	movs	r4, #1
 8012690:	e745      	b.n	801251e <_svfwprintf_r+0x48e>
 8012692:	462c      	mov	r4, r5
 8012694:	e7ef      	b.n	8012676 <_svfwprintf_r+0x5e6>
 8012696:	b101      	cbz	r1, 801269a <_svfwprintf_r+0x60a>
 8012698:	9615      	str	r6, [sp, #84]	; 0x54
 801269a:	1d2b      	adds	r3, r5, #4
 801269c:	06f8      	lsls	r0, r7, #27
 801269e:	930a      	str	r3, [sp, #40]	; 0x28
 80126a0:	d503      	bpl.n	80126aa <_svfwprintf_r+0x61a>
 80126a2:	682b      	ldr	r3, [r5, #0]
 80126a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126a6:	601a      	str	r2, [r3, #0]
 80126a8:	e004      	b.n	80126b4 <_svfwprintf_r+0x624>
 80126aa:	0679      	lsls	r1, r7, #25
 80126ac:	d5f9      	bpl.n	80126a2 <_svfwprintf_r+0x612>
 80126ae:	682b      	ldr	r3, [r5, #0]
 80126b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126b2:	801a      	strh	r2, [r3, #0]
 80126b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80126b6:	e524      	b.n	8012102 <_svfwprintf_r+0x72>
 80126b8:	462a      	mov	r2, r5
 80126ba:	f017 0110 	ands.w	r1, r7, #16
 80126be:	f852 3b04 	ldr.w	r3, [r2], #4
 80126c2:	920a      	str	r2, [sp, #40]	; 0x28
 80126c4:	d011      	beq.n	80126ea <_svfwprintf_r+0x65a>
 80126c6:	2200      	movs	r2, #0
 80126c8:	2100      	movs	r1, #0
 80126ca:	9115      	str	r1, [sp, #84]	; 0x54
 80126cc:	1c66      	adds	r6, r4, #1
 80126ce:	f000 822e 	beq.w	8012b2e <_svfwprintf_r+0xa9e>
 80126d2:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f040 822d 	bne.w	8012b36 <_svfwprintf_r+0xaa6>
 80126dc:	2c00      	cmp	r4, #0
 80126de:	f000 8098 	beq.w	8012812 <_svfwprintf_r+0x782>
 80126e2:	2a01      	cmp	r2, #1
 80126e4:	f040 822a 	bne.w	8012b3c <_svfwprintf_r+0xaac>
 80126e8:	e075      	b.n	80127d6 <_svfwprintf_r+0x746>
 80126ea:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 80126ee:	d0eb      	beq.n	80126c8 <_svfwprintf_r+0x638>
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	e7e8      	b.n	80126c6 <_svfwprintf_r+0x636>
 80126f4:	462a      	mov	r2, r5
 80126f6:	2178      	movs	r1, #120	; 0x78
 80126f8:	f852 3b04 	ldr.w	r3, [r2], #4
 80126fc:	920a      	str	r2, [sp, #40]	; 0x28
 80126fe:	2230      	movs	r2, #48	; 0x30
 8012700:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 8012704:	4a9e      	ldr	r2, [pc, #632]	; (8012980 <_svfwprintf_r+0x8f0>)
 8012706:	920f      	str	r2, [sp, #60]	; 0x3c
 8012708:	f047 0702 	orr.w	r7, r7, #2
 801270c:	2202      	movs	r2, #2
 801270e:	9109      	str	r1, [sp, #36]	; 0x24
 8012710:	e7da      	b.n	80126c8 <_svfwprintf_r+0x638>
 8012712:	462b      	mov	r3, r5
 8012714:	2600      	movs	r6, #0
 8012716:	f853 ab04 	ldr.w	sl, [r3], #4
 801271a:	930a      	str	r3, [sp, #40]	; 0x28
 801271c:	f017 0510 	ands.w	r5, r7, #16
 8012720:	9615      	str	r6, [sp, #84]	; 0x54
 8012722:	d12d      	bne.n	8012780 <_svfwprintf_r+0x6f0>
 8012724:	1c62      	adds	r2, r4, #1
 8012726:	d014      	beq.n	8012752 <_svfwprintf_r+0x6c2>
 8012728:	4622      	mov	r2, r4
 801272a:	4629      	mov	r1, r5
 801272c:	4650      	mov	r0, sl
 801272e:	4626      	mov	r6, r4
 8012730:	f7ed fd66 	bl	8000200 <memchr>
 8012734:	b108      	cbz	r0, 801273a <_svfwprintf_r+0x6aa>
 8012736:	eba0 060a 	sub.w	r6, r0, sl
 801273a:	2e27      	cmp	r6, #39	; 0x27
 801273c:	d90e      	bls.n	801275c <_svfwprintf_r+0x6cc>
 801273e:	1c71      	adds	r1, r6, #1
 8012740:	0089      	lsls	r1, r1, #2
 8012742:	4658      	mov	r0, fp
 8012744:	f7fb f9da 	bl	800dafc <_malloc_r>
 8012748:	2800      	cmp	r0, #0
 801274a:	f43f add1 	beq.w	80122f0 <_svfwprintf_r+0x260>
 801274e:	4680      	mov	r8, r0
 8012750:	e007      	b.n	8012762 <_svfwprintf_r+0x6d2>
 8012752:	4650      	mov	r0, sl
 8012754:	f7ed fd46 	bl	80001e4 <strlen>
 8012758:	4606      	mov	r6, r0
 801275a:	e7ee      	b.n	801273a <_svfwprintf_r+0x6aa>
 801275c:	f04f 0800 	mov.w	r8, #0
 8012760:	a82a      	add	r0, sp, #168	; 0xa8
 8012762:	4634      	mov	r4, r6
 8012764:	2300      	movs	r3, #0
 8012766:	42b3      	cmp	r3, r6
 8012768:	d104      	bne.n	8012774 <_svfwprintf_r+0x6e4>
 801276a:	2600      	movs	r6, #0
 801276c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8012770:	4682      	mov	sl, r0
 8012772:	e6dc      	b.n	801252e <_svfwprintf_r+0x49e>
 8012774:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8012778:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801277c:	3301      	adds	r3, #1
 801277e:	e7f2      	b.n	8012766 <_svfwprintf_r+0x6d6>
 8012780:	1c63      	adds	r3, r4, #1
 8012782:	d011      	beq.n	80127a8 <_svfwprintf_r+0x718>
 8012784:	4622      	mov	r2, r4
 8012786:	4631      	mov	r1, r6
 8012788:	4650      	mov	r0, sl
 801278a:	f000 fa11 	bl	8012bb0 <wmemchr>
 801278e:	4680      	mov	r8, r0
 8012790:	2800      	cmp	r0, #0
 8012792:	f43f ae1a 	beq.w	80123ca <_svfwprintf_r+0x33a>
 8012796:	eba0 080a 	sub.w	r8, r0, sl
 801279a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 801279e:	4544      	cmp	r4, r8
 80127a0:	bfa8      	it	ge
 80127a2:	4644      	movge	r4, r8
 80127a4:	46b0      	mov	r8, r6
 80127a6:	e610      	b.n	80123ca <_svfwprintf_r+0x33a>
 80127a8:	4650      	mov	r0, sl
 80127aa:	f000 f9eb 	bl	8012b84 <wcslen>
 80127ae:	4604      	mov	r4, r0
 80127b0:	e7f8      	b.n	80127a4 <_svfwprintf_r+0x714>
 80127b2:	462a      	mov	r2, r5
 80127b4:	06fe      	lsls	r6, r7, #27
 80127b6:	f852 3b04 	ldr.w	r3, [r2], #4
 80127ba:	920a      	str	r2, [sp, #40]	; 0x28
 80127bc:	d501      	bpl.n	80127c2 <_svfwprintf_r+0x732>
 80127be:	2201      	movs	r2, #1
 80127c0:	e782      	b.n	80126c8 <_svfwprintf_r+0x638>
 80127c2:	067d      	lsls	r5, r7, #25
 80127c4:	bf48      	it	mi
 80127c6:	b29b      	uxthmi	r3, r3
 80127c8:	e7f9      	b.n	80127be <_svfwprintf_r+0x72e>
 80127ca:	b101      	cbz	r1, 80127ce <_svfwprintf_r+0x73e>
 80127cc:	9615      	str	r6, [sp, #84]	; 0x54
 80127ce:	4b6d      	ldr	r3, [pc, #436]	; (8012984 <_svfwprintf_r+0x8f4>)
 80127d0:	e522      	b.n	8012218 <_svfwprintf_r+0x188>
 80127d2:	2b09      	cmp	r3, #9
 80127d4:	d804      	bhi.n	80127e0 <_svfwprintf_r+0x750>
 80127d6:	3330      	adds	r3, #48	; 0x30
 80127d8:	9351      	str	r3, [sp, #324]	; 0x144
 80127da:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 80127de:	e1c3      	b.n	8012b68 <_svfwprintf_r+0xad8>
 80127e0:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 80127e4:	250a      	movs	r5, #10
 80127e6:	fbb3 f0f5 	udiv	r0, r3, r5
 80127ea:	fb05 3210 	mls	r2, r5, r0, r3
 80127ee:	3230      	adds	r2, #48	; 0x30
 80127f0:	f84a 2d04 	str.w	r2, [sl, #-4]!
 80127f4:	461a      	mov	r2, r3
 80127f6:	2a09      	cmp	r2, #9
 80127f8:	4603      	mov	r3, r0
 80127fa:	d8f4      	bhi.n	80127e6 <_svfwprintf_r+0x756>
 80127fc:	e1b4      	b.n	8012b68 <_svfwprintf_r+0xad8>
 80127fe:	f003 020f 	and.w	r2, r3, #15
 8012802:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012804:	091b      	lsrs	r3, r3, #4
 8012806:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801280a:	f84a 2d04 	str.w	r2, [sl, #-4]!
 801280e:	d1f6      	bne.n	80127fe <_svfwprintf_r+0x76e>
 8012810:	e1aa      	b.n	8012b68 <_svfwprintf_r+0xad8>
 8012812:	b91a      	cbnz	r2, 801281c <_svfwprintf_r+0x78c>
 8012814:	07f8      	lsls	r0, r7, #31
 8012816:	d501      	bpl.n	801281c <_svfwprintf_r+0x78c>
 8012818:	2330      	movs	r3, #48	; 0x30
 801281a:	e7dd      	b.n	80127d8 <_svfwprintf_r+0x748>
 801281c:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8012820:	e1a2      	b.n	8012b68 <_svfwprintf_r+0xad8>
 8012822:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012824:	e683      	b.n	801252e <_svfwprintf_r+0x49e>
 8012826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	2b00      	cmp	r3, #0
 801282e:	9310      	str	r3, [sp, #64]	; 0x40
 8012830:	f77f ae93 	ble.w	801255a <_svfwprintf_r+0x4ca>
 8012834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012836:	2b10      	cmp	r3, #16
 8012838:	dc11      	bgt.n	801285e <_svfwprintf_r+0x7ce>
 801283a:	4a53      	ldr	r2, [pc, #332]	; (8012988 <_svfwprintf_r+0x8f8>)
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4649      	mov	r1, r9
 8012840:	4658      	mov	r0, fp
 8012842:	f7ff f888 	bl	8011956 <__ssputs_r>
 8012846:	3001      	adds	r0, #1
 8012848:	f47f ae87 	bne.w	801255a <_svfwprintf_r+0x4ca>
 801284c:	f1b8 0f00 	cmp.w	r8, #0
 8012850:	f43f ad54 	beq.w	80122fc <_svfwprintf_r+0x26c>
 8012854:	4641      	mov	r1, r8
 8012856:	4658      	mov	r0, fp
 8012858:	f7fb f8e4 	bl	800da24 <_free_r>
 801285c:	e54e      	b.n	80122fc <_svfwprintf_r+0x26c>
 801285e:	4a4a      	ldr	r2, [pc, #296]	; (8012988 <_svfwprintf_r+0x8f8>)
 8012860:	2340      	movs	r3, #64	; 0x40
 8012862:	4649      	mov	r1, r9
 8012864:	4658      	mov	r0, fp
 8012866:	f7ff f876 	bl	8011956 <__ssputs_r>
 801286a:	3001      	adds	r0, #1
 801286c:	d0ee      	beq.n	801284c <_svfwprintf_r+0x7bc>
 801286e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012870:	3b10      	subs	r3, #16
 8012872:	9310      	str	r3, [sp, #64]	; 0x40
 8012874:	e7de      	b.n	8012834 <_svfwprintf_r+0x7a4>
 8012876:	2340      	movs	r3, #64	; 0x40
 8012878:	4649      	mov	r1, r9
 801287a:	4658      	mov	r0, fp
 801287c:	f7ff f86b 	bl	8011956 <__ssputs_r>
 8012880:	3001      	adds	r0, #1
 8012882:	d0e3      	beq.n	801284c <_svfwprintf_r+0x7bc>
 8012884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012886:	3b10      	subs	r3, #16
 8012888:	9310      	str	r3, [sp, #64]	; 0x40
 801288a:	e685      	b.n	8012598 <_svfwprintf_r+0x508>
 801288c:	2340      	movs	r3, #64	; 0x40
 801288e:	4649      	mov	r1, r9
 8012890:	4658      	mov	r0, fp
 8012892:	f7ff f860 	bl	8011956 <__ssputs_r>
 8012896:	3001      	adds	r0, #1
 8012898:	d0d8      	beq.n	801284c <_svfwprintf_r+0x7bc>
 801289a:	3e10      	subs	r6, #16
 801289c:	e68d      	b.n	80125ba <_svfwprintf_r+0x52a>
 801289e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128a0:	2b65      	cmp	r3, #101	; 0x65
 80128a2:	f240 80e5 	bls.w	8012a70 <_svfwprintf_r+0x9e0>
 80128a6:	ec51 0b18 	vmov	r0, r1, d8
 80128aa:	2200      	movs	r2, #0
 80128ac:	2300      	movs	r3, #0
 80128ae:	f7ee f91b 	bl	8000ae8 <__aeabi_dcmpeq>
 80128b2:	b358      	cbz	r0, 801290c <_svfwprintf_r+0x87c>
 80128b4:	4a35      	ldr	r2, [pc, #212]	; (801298c <_svfwprintf_r+0x8fc>)
 80128b6:	2304      	movs	r3, #4
 80128b8:	4649      	mov	r1, r9
 80128ba:	4658      	mov	r0, fp
 80128bc:	f7ff f84b 	bl	8011956 <__ssputs_r>
 80128c0:	3001      	adds	r0, #1
 80128c2:	d0c3      	beq.n	801284c <_svfwprintf_r+0x7bc>
 80128c4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80128c8:	429a      	cmp	r2, r3
 80128ca:	db02      	blt.n	80128d2 <_svfwprintf_r+0x842>
 80128cc:	07fb      	lsls	r3, r7, #31
 80128ce:	f57f ae8d 	bpl.w	80125ec <_svfwprintf_r+0x55c>
 80128d2:	2304      	movs	r3, #4
 80128d4:	aa16      	add	r2, sp, #88	; 0x58
 80128d6:	4649      	mov	r1, r9
 80128d8:	4658      	mov	r0, fp
 80128da:	f7ff f83c 	bl	8011956 <__ssputs_r>
 80128de:	3001      	adds	r0, #1
 80128e0:	d0b4      	beq.n	801284c <_svfwprintf_r+0x7bc>
 80128e2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80128e4:	3c01      	subs	r4, #1
 80128e6:	2c00      	cmp	r4, #0
 80128e8:	f77f ae80 	ble.w	80125ec <_svfwprintf_r+0x55c>
 80128ec:	4d28      	ldr	r5, [pc, #160]	; (8012990 <_svfwprintf_r+0x900>)
 80128ee:	2c10      	cmp	r4, #16
 80128f0:	dc02      	bgt.n	80128f8 <_svfwprintf_r+0x868>
 80128f2:	00a3      	lsls	r3, r4, #2
 80128f4:	4a26      	ldr	r2, [pc, #152]	; (8012990 <_svfwprintf_r+0x900>)
 80128f6:	e672      	b.n	80125de <_svfwprintf_r+0x54e>
 80128f8:	2340      	movs	r3, #64	; 0x40
 80128fa:	462a      	mov	r2, r5
 80128fc:	4649      	mov	r1, r9
 80128fe:	4658      	mov	r0, fp
 8012900:	f7ff f829 	bl	8011956 <__ssputs_r>
 8012904:	3001      	adds	r0, #1
 8012906:	d0a1      	beq.n	801284c <_svfwprintf_r+0x7bc>
 8012908:	3c10      	subs	r4, #16
 801290a:	e7f0      	b.n	80128ee <_svfwprintf_r+0x85e>
 801290c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801290e:	2b00      	cmp	r3, #0
 8012910:	dc40      	bgt.n	8012994 <_svfwprintf_r+0x904>
 8012912:	4a1e      	ldr	r2, [pc, #120]	; (801298c <_svfwprintf_r+0x8fc>)
 8012914:	2304      	movs	r3, #4
 8012916:	4649      	mov	r1, r9
 8012918:	4658      	mov	r0, fp
 801291a:	f7ff f81c 	bl	8011956 <__ssputs_r>
 801291e:	3001      	adds	r0, #1
 8012920:	d094      	beq.n	801284c <_svfwprintf_r+0x7bc>
 8012922:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 8012926:	4313      	orrs	r3, r2
 8012928:	f007 0201 	and.w	r2, r7, #1
 801292c:	4313      	orrs	r3, r2
 801292e:	f43f ae5d 	beq.w	80125ec <_svfwprintf_r+0x55c>
 8012932:	2304      	movs	r3, #4
 8012934:	aa16      	add	r2, sp, #88	; 0x58
 8012936:	4649      	mov	r1, r9
 8012938:	4658      	mov	r0, fp
 801293a:	f7ff f80c 	bl	8011956 <__ssputs_r>
 801293e:	3001      	adds	r0, #1
 8012940:	d084      	beq.n	801284c <_svfwprintf_r+0x7bc>
 8012942:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8012944:	2c00      	cmp	r4, #0
 8012946:	da0c      	bge.n	8012962 <_svfwprintf_r+0x8d2>
 8012948:	4d11      	ldr	r5, [pc, #68]	; (8012990 <_svfwprintf_r+0x900>)
 801294a:	4264      	negs	r4, r4
 801294c:	2c10      	cmp	r4, #16
 801294e:	dc0b      	bgt.n	8012968 <_svfwprintf_r+0x8d8>
 8012950:	4a0f      	ldr	r2, [pc, #60]	; (8012990 <_svfwprintf_r+0x900>)
 8012952:	00a3      	lsls	r3, r4, #2
 8012954:	4649      	mov	r1, r9
 8012956:	4658      	mov	r0, fp
 8012958:	f7fe fffd 	bl	8011956 <__ssputs_r>
 801295c:	3001      	adds	r0, #1
 801295e:	f43f af75 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012962:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012964:	009b      	lsls	r3, r3, #2
 8012966:	e639      	b.n	80125dc <_svfwprintf_r+0x54c>
 8012968:	2340      	movs	r3, #64	; 0x40
 801296a:	462a      	mov	r2, r5
 801296c:	4649      	mov	r1, r9
 801296e:	4658      	mov	r0, fp
 8012970:	f7fe fff1 	bl	8011956 <__ssputs_r>
 8012974:	3001      	adds	r0, #1
 8012976:	f43f af69 	beq.w	801284c <_svfwprintf_r+0x7bc>
 801297a:	3c10      	subs	r4, #16
 801297c:	e7e6      	b.n	801294c <_svfwprintf_r+0x8bc>
 801297e:	bf00      	nop
 8012980:	08016da4 	.word	0x08016da4
 8012984:	08016d60 	.word	0x08016d60
 8012988:	08016df0 	.word	0x08016df0
 801298c:	08016de8 	.word	0x08016de8
 8012990:	08016e30 	.word	0x08016e30
 8012994:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8012996:	f344 041d 	sbfx	r4, r4, #0, #30
 801299a:	42ac      	cmp	r4, r5
 801299c:	bfa8      	it	ge
 801299e:	462c      	movge	r4, r5
 80129a0:	2c00      	cmp	r4, #0
 80129a2:	dc20      	bgt.n	80129e6 <_svfwprintf_r+0x956>
 80129a4:	2c00      	cmp	r4, #0
 80129a6:	bfac      	ite	ge
 80129a8:	1b2e      	subge	r6, r5, r4
 80129aa:	462e      	movlt	r6, r5
 80129ac:	2e00      	cmp	r6, #0
 80129ae:	dd0b      	ble.n	80129c8 <_svfwprintf_r+0x938>
 80129b0:	4c72      	ldr	r4, [pc, #456]	; (8012b7c <_svfwprintf_r+0xaec>)
 80129b2:	2e10      	cmp	r6, #16
 80129b4:	dc20      	bgt.n	80129f8 <_svfwprintf_r+0x968>
 80129b6:	4a71      	ldr	r2, [pc, #452]	; (8012b7c <_svfwprintf_r+0xaec>)
 80129b8:	00b3      	lsls	r3, r6, #2
 80129ba:	4649      	mov	r1, r9
 80129bc:	4658      	mov	r0, fp
 80129be:	f7fe ffca 	bl	8011956 <__ssputs_r>
 80129c2:	3001      	adds	r0, #1
 80129c4:	f43f af42 	beq.w	801284c <_svfwprintf_r+0x7bc>
 80129c8:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80129cc:	429a      	cmp	r2, r3
 80129ce:	ea4f 0585 	mov.w	r5, r5, lsl #2
 80129d2:	da1c      	bge.n	8012a0e <_svfwprintf_r+0x97e>
 80129d4:	2304      	movs	r3, #4
 80129d6:	aa16      	add	r2, sp, #88	; 0x58
 80129d8:	4649      	mov	r1, r9
 80129da:	4658      	mov	r0, fp
 80129dc:	f7fe ffbb 	bl	8011956 <__ssputs_r>
 80129e0:	3001      	adds	r0, #1
 80129e2:	d116      	bne.n	8012a12 <_svfwprintf_r+0x982>
 80129e4:	e732      	b.n	801284c <_svfwprintf_r+0x7bc>
 80129e6:	00a3      	lsls	r3, r4, #2
 80129e8:	4652      	mov	r2, sl
 80129ea:	4649      	mov	r1, r9
 80129ec:	4658      	mov	r0, fp
 80129ee:	f7fe ffb2 	bl	8011956 <__ssputs_r>
 80129f2:	3001      	adds	r0, #1
 80129f4:	d1d6      	bne.n	80129a4 <_svfwprintf_r+0x914>
 80129f6:	e729      	b.n	801284c <_svfwprintf_r+0x7bc>
 80129f8:	2340      	movs	r3, #64	; 0x40
 80129fa:	4622      	mov	r2, r4
 80129fc:	4649      	mov	r1, r9
 80129fe:	4658      	mov	r0, fp
 8012a00:	f7fe ffa9 	bl	8011956 <__ssputs_r>
 8012a04:	3001      	adds	r0, #1
 8012a06:	f43f af21 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012a0a:	3e10      	subs	r6, #16
 8012a0c:	e7d1      	b.n	80129b2 <_svfwprintf_r+0x922>
 8012a0e:	07fe      	lsls	r6, r7, #31
 8012a10:	d4e0      	bmi.n	80129d4 <_svfwprintf_r+0x944>
 8012a12:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a14:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 8012a18:	10a2      	asrs	r2, r4, #2
 8012a1a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8012a1c:	1b1c      	subs	r4, r3, r4
 8012a1e:	4294      	cmp	r4, r2
 8012a20:	bfa8      	it	ge
 8012a22:	4614      	movge	r4, r2
 8012a24:	2c00      	cmp	r4, #0
 8012a26:	dd09      	ble.n	8012a3c <_svfwprintf_r+0x9ac>
 8012a28:	00a3      	lsls	r3, r4, #2
 8012a2a:	eb0a 0205 	add.w	r2, sl, r5
 8012a2e:	4649      	mov	r1, r9
 8012a30:	4658      	mov	r0, fp
 8012a32:	f7fe ff90 	bl	8011956 <__ssputs_r>
 8012a36:	3001      	adds	r0, #1
 8012a38:	f43f af08 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012a3c:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 8012a40:	2c00      	cmp	r4, #0
 8012a42:	eba5 0503 	sub.w	r5, r5, r3
 8012a46:	bfa8      	it	ge
 8012a48:	1b2d      	subge	r5, r5, r4
 8012a4a:	2d00      	cmp	r5, #0
 8012a4c:	f77f adce 	ble.w	80125ec <_svfwprintf_r+0x55c>
 8012a50:	4c4a      	ldr	r4, [pc, #296]	; (8012b7c <_svfwprintf_r+0xaec>)
 8012a52:	2d10      	cmp	r5, #16
 8012a54:	dc01      	bgt.n	8012a5a <_svfwprintf_r+0x9ca>
 8012a56:	00ab      	lsls	r3, r5, #2
 8012a58:	e74c      	b.n	80128f4 <_svfwprintf_r+0x864>
 8012a5a:	2340      	movs	r3, #64	; 0x40
 8012a5c:	4622      	mov	r2, r4
 8012a5e:	4649      	mov	r1, r9
 8012a60:	4658      	mov	r0, fp
 8012a62:	f7fe ff78 	bl	8011956 <__ssputs_r>
 8012a66:	3001      	adds	r0, #1
 8012a68:	f43f aef0 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012a6c:	3d10      	subs	r5, #16
 8012a6e:	e7f0      	b.n	8012a52 <_svfwprintf_r+0x9c2>
 8012a70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	4652      	mov	r2, sl
 8012a76:	f04f 0304 	mov.w	r3, #4
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	4658      	mov	r0, fp
 8012a7e:	dc01      	bgt.n	8012a84 <_svfwprintf_r+0x9f4>
 8012a80:	07fc      	lsls	r4, r7, #31
 8012a82:	d51b      	bpl.n	8012abc <_svfwprintf_r+0xa2c>
 8012a84:	f7fe ff67 	bl	8011956 <__ssputs_r>
 8012a88:	3001      	adds	r0, #1
 8012a8a:	f43f aedf 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012a8e:	2304      	movs	r3, #4
 8012a90:	aa16      	add	r2, sp, #88	; 0x58
 8012a92:	4649      	mov	r1, r9
 8012a94:	4658      	mov	r0, fp
 8012a96:	f7fe ff5e 	bl	8011956 <__ssputs_r>
 8012a9a:	3001      	adds	r0, #1
 8012a9c:	f43f aed6 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012aa0:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8012aa2:	ec51 0b18 	vmov	r0, r1, d8
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	3c01      	subs	r4, #1
 8012aac:	f7ee f81c 	bl	8000ae8 <__aeabi_dcmpeq>
 8012ab0:	b968      	cbnz	r0, 8012ace <_svfwprintf_r+0xa3e>
 8012ab2:	00a3      	lsls	r3, r4, #2
 8012ab4:	f10a 0204 	add.w	r2, sl, #4
 8012ab8:	4649      	mov	r1, r9
 8012aba:	4658      	mov	r0, fp
 8012abc:	f7fe ff4b 	bl	8011956 <__ssputs_r>
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	f43f aec3 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012ac6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012ac8:	aa1c      	add	r2, sp, #112	; 0x70
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	e587      	b.n	80125de <_svfwprintf_r+0x54e>
 8012ace:	2c00      	cmp	r4, #0
 8012ad0:	ddf9      	ble.n	8012ac6 <_svfwprintf_r+0xa36>
 8012ad2:	4d2a      	ldr	r5, [pc, #168]	; (8012b7c <_svfwprintf_r+0xaec>)
 8012ad4:	2c10      	cmp	r4, #16
 8012ad6:	dc02      	bgt.n	8012ade <_svfwprintf_r+0xa4e>
 8012ad8:	4a28      	ldr	r2, [pc, #160]	; (8012b7c <_svfwprintf_r+0xaec>)
 8012ada:	00a3      	lsls	r3, r4, #2
 8012adc:	e7ec      	b.n	8012ab8 <_svfwprintf_r+0xa28>
 8012ade:	2340      	movs	r3, #64	; 0x40
 8012ae0:	462a      	mov	r2, r5
 8012ae2:	4649      	mov	r1, r9
 8012ae4:	4658      	mov	r0, fp
 8012ae6:	f7fe ff36 	bl	8011956 <__ssputs_r>
 8012aea:	3001      	adds	r0, #1
 8012aec:	f43f aeae 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012af0:	3c10      	subs	r4, #16
 8012af2:	e7ef      	b.n	8012ad4 <_svfwprintf_r+0xa44>
 8012af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012af8:	1a9c      	subs	r4, r3, r2
 8012afa:	2c00      	cmp	r4, #0
 8012afc:	f77f ad79 	ble.w	80125f2 <_svfwprintf_r+0x562>
 8012b00:	2c10      	cmp	r4, #16
 8012b02:	dc09      	bgt.n	8012b18 <_svfwprintf_r+0xa88>
 8012b04:	4a1e      	ldr	r2, [pc, #120]	; (8012b80 <_svfwprintf_r+0xaf0>)
 8012b06:	00a3      	lsls	r3, r4, #2
 8012b08:	4649      	mov	r1, r9
 8012b0a:	4658      	mov	r0, fp
 8012b0c:	f7fe ff23 	bl	8011956 <__ssputs_r>
 8012b10:	3001      	adds	r0, #1
 8012b12:	f47f ad6e 	bne.w	80125f2 <_svfwprintf_r+0x562>
 8012b16:	e699      	b.n	801284c <_svfwprintf_r+0x7bc>
 8012b18:	4a19      	ldr	r2, [pc, #100]	; (8012b80 <_svfwprintf_r+0xaf0>)
 8012b1a:	2340      	movs	r3, #64	; 0x40
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	4658      	mov	r0, fp
 8012b20:	f7fe ff19 	bl	8011956 <__ssputs_r>
 8012b24:	3001      	adds	r0, #1
 8012b26:	f43f ae91 	beq.w	801284c <_svfwprintf_r+0x7bc>
 8012b2a:	3c10      	subs	r4, #16
 8012b2c:	e7e8      	b.n	8012b00 <_svfwprintf_r+0xa70>
 8012b2e:	4639      	mov	r1, r7
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f43f add6 	beq.w	80126e2 <_svfwprintf_r+0x652>
 8012b36:	2a01      	cmp	r2, #1
 8012b38:	f43f ae4b 	beq.w	80127d2 <_svfwprintf_r+0x742>
 8012b3c:	2a02      	cmp	r2, #2
 8012b3e:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8012b42:	f43f ae5c 	beq.w	80127fe <_svfwprintf_r+0x76e>
 8012b46:	f003 0207 	and.w	r2, r3, #7
 8012b4a:	3230      	adds	r2, #48	; 0x30
 8012b4c:	08db      	lsrs	r3, r3, #3
 8012b4e:	4650      	mov	r0, sl
 8012b50:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8012b54:	d1f7      	bne.n	8012b46 <_svfwprintf_r+0xab6>
 8012b56:	07cd      	lsls	r5, r1, #31
 8012b58:	d506      	bpl.n	8012b68 <_svfwprintf_r+0xad8>
 8012b5a:	2a30      	cmp	r2, #48	; 0x30
 8012b5c:	d004      	beq.n	8012b68 <_svfwprintf_r+0xad8>
 8012b5e:	2330      	movs	r3, #48	; 0x30
 8012b60:	f84a 3c04 	str.w	r3, [sl, #-4]
 8012b64:	f1a0 0a08 	sub.w	sl, r0, #8
 8012b68:	ab52      	add	r3, sp, #328	; 0x148
 8012b6a:	4626      	mov	r6, r4
 8012b6c:	eba3 040a 	sub.w	r4, r3, sl
 8012b70:	10a4      	asrs	r4, r4, #2
 8012b72:	460f      	mov	r7, r1
 8012b74:	f04f 0800 	mov.w	r8, #0
 8012b78:	4645      	mov	r5, r8
 8012b7a:	e4d8      	b.n	801252e <_svfwprintf_r+0x49e>
 8012b7c:	08016e30 	.word	0x08016e30
 8012b80:	08016df0 	.word	0x08016df0

08012b84 <wcslen>:
 8012b84:	4602      	mov	r2, r0
 8012b86:	4613      	mov	r3, r2
 8012b88:	3204      	adds	r2, #4
 8012b8a:	6819      	ldr	r1, [r3, #0]
 8012b8c:	2900      	cmp	r1, #0
 8012b8e:	d1fa      	bne.n	8012b86 <wcslen+0x2>
 8012b90:	1a18      	subs	r0, r3, r0
 8012b92:	1080      	asrs	r0, r0, #2
 8012b94:	4770      	bx	lr

08012b96 <__ascii_wctomb>:
 8012b96:	b149      	cbz	r1, 8012bac <__ascii_wctomb+0x16>
 8012b98:	2aff      	cmp	r2, #255	; 0xff
 8012b9a:	bf85      	ittet	hi
 8012b9c:	238a      	movhi	r3, #138	; 0x8a
 8012b9e:	6003      	strhi	r3, [r0, #0]
 8012ba0:	700a      	strbls	r2, [r1, #0]
 8012ba2:	f04f 30ff 	movhi.w	r0, #4294967295
 8012ba6:	bf98      	it	ls
 8012ba8:	2001      	movls	r0, #1
 8012baa:	4770      	bx	lr
 8012bac:	4608      	mov	r0, r1
 8012bae:	4770      	bx	lr

08012bb0 <wmemchr>:
 8012bb0:	b530      	push	{r4, r5, lr}
 8012bb2:	2400      	movs	r4, #0
 8012bb4:	4294      	cmp	r4, r2
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	d102      	bne.n	8012bc0 <wmemchr+0x10>
 8012bba:	2300      	movs	r3, #0
 8012bbc:	4618      	mov	r0, r3
 8012bbe:	bd30      	pop	{r4, r5, pc}
 8012bc0:	681d      	ldr	r5, [r3, #0]
 8012bc2:	428d      	cmp	r5, r1
 8012bc4:	f100 0004 	add.w	r0, r0, #4
 8012bc8:	d0f8      	beq.n	8012bbc <wmemchr+0xc>
 8012bca:	3401      	adds	r4, #1
 8012bcc:	e7f2      	b.n	8012bb4 <wmemchr+0x4>
	...

08012bd0 <__assert_func>:
 8012bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012bd2:	4614      	mov	r4, r2
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	4b09      	ldr	r3, [pc, #36]	; (8012bfc <__assert_func+0x2c>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	4605      	mov	r5, r0
 8012bdc:	68d8      	ldr	r0, [r3, #12]
 8012bde:	b14c      	cbz	r4, 8012bf4 <__assert_func+0x24>
 8012be0:	4b07      	ldr	r3, [pc, #28]	; (8012c00 <__assert_func+0x30>)
 8012be2:	9100      	str	r1, [sp, #0]
 8012be4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012be8:	4906      	ldr	r1, [pc, #24]	; (8012c04 <__assert_func+0x34>)
 8012bea:	462b      	mov	r3, r5
 8012bec:	f000 f858 	bl	8012ca0 <fiprintf>
 8012bf0:	f000 f8b1 	bl	8012d56 <abort>
 8012bf4:	4b04      	ldr	r3, [pc, #16]	; (8012c08 <__assert_func+0x38>)
 8012bf6:	461c      	mov	r4, r3
 8012bf8:	e7f3      	b.n	8012be2 <__assert_func+0x12>
 8012bfa:	bf00      	nop
 8012bfc:	20000150 	.word	0x20000150
 8012c00:	08016e70 	.word	0x08016e70
 8012c04:	08016e7d 	.word	0x08016e7d
 8012c08:	08016eab 	.word	0x08016eab

08012c0c <btowc>:
 8012c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c0e:	1c43      	adds	r3, r0, #1
 8012c10:	b087      	sub	sp, #28
 8012c12:	d103      	bne.n	8012c1c <btowc+0x10>
 8012c14:	f04f 30ff 	mov.w	r0, #4294967295
 8012c18:	b007      	add	sp, #28
 8012c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c1c:	4d1c      	ldr	r5, [pc, #112]	; (8012c90 <btowc+0x84>)
 8012c1e:	f88d 000b 	strb.w	r0, [sp, #11]
 8012c22:	ae04      	add	r6, sp, #16
 8012c24:	2208      	movs	r2, #8
 8012c26:	2100      	movs	r1, #0
 8012c28:	4630      	mov	r0, r6
 8012c2a:	f7fa fef3 	bl	800da14 <memset>
 8012c2e:	682f      	ldr	r7, [r5, #0]
 8012c30:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8012c32:	b9fc      	cbnz	r4, 8012c74 <btowc+0x68>
 8012c34:	2050      	movs	r0, #80	; 0x50
 8012c36:	f7fe f991 	bl	8010f5c <malloc>
 8012c3a:	4602      	mov	r2, r0
 8012c3c:	65b8      	str	r0, [r7, #88]	; 0x58
 8012c3e:	b920      	cbnz	r0, 8012c4a <btowc+0x3e>
 8012c40:	4b14      	ldr	r3, [pc, #80]	; (8012c94 <btowc+0x88>)
 8012c42:	4815      	ldr	r0, [pc, #84]	; (8012c98 <btowc+0x8c>)
 8012c44:	2118      	movs	r1, #24
 8012c46:	f7ff ffc3 	bl	8012bd0 <__assert_func>
 8012c4a:	682b      	ldr	r3, [r5, #0]
 8012c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012c4e:	e9c3 4400 	strd	r4, r4, [r3]
 8012c52:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8012c56:	e9c3 4404 	strd	r4, r4, [r3, #16]
 8012c5a:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 8012c5e:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 8012c62:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 8012c66:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 8012c6a:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 8012c6e:	619c      	str	r4, [r3, #24]
 8012c70:	771c      	strb	r4, [r3, #28]
 8012c72:	625c      	str	r4, [r3, #36]	; 0x24
 8012c74:	4b09      	ldr	r3, [pc, #36]	; (8012c9c <btowc+0x90>)
 8012c76:	9600      	str	r6, [sp, #0]
 8012c78:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 8012c7c:	6828      	ldr	r0, [r5, #0]
 8012c7e:	2301      	movs	r3, #1
 8012c80:	f10d 020b 	add.w	r2, sp, #11
 8012c84:	a903      	add	r1, sp, #12
 8012c86:	47a0      	blx	r4
 8012c88:	2801      	cmp	r0, #1
 8012c8a:	d8c3      	bhi.n	8012c14 <btowc+0x8>
 8012c8c:	9803      	ldr	r0, [sp, #12]
 8012c8e:	e7c3      	b.n	8012c18 <btowc+0xc>
 8012c90:	20000150 	.word	0x20000150
 8012c94:	08016ab6 	.word	0x08016ab6
 8012c98:	08016eac 	.word	0x08016eac
 8012c9c:	200001b8 	.word	0x200001b8

08012ca0 <fiprintf>:
 8012ca0:	b40e      	push	{r1, r2, r3}
 8012ca2:	b503      	push	{r0, r1, lr}
 8012ca4:	4601      	mov	r1, r0
 8012ca6:	ab03      	add	r3, sp, #12
 8012ca8:	4805      	ldr	r0, [pc, #20]	; (8012cc0 <fiprintf+0x20>)
 8012caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cae:	6800      	ldr	r0, [r0, #0]
 8012cb0:	9301      	str	r3, [sp, #4]
 8012cb2:	f7fe ffd5 	bl	8011c60 <_vfiprintf_r>
 8012cb6:	b002      	add	sp, #8
 8012cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cbc:	b003      	add	sp, #12
 8012cbe:	4770      	bx	lr
 8012cc0:	20000150 	.word	0x20000150

08012cc4 <memmove>:
 8012cc4:	4288      	cmp	r0, r1
 8012cc6:	b510      	push	{r4, lr}
 8012cc8:	eb01 0402 	add.w	r4, r1, r2
 8012ccc:	d902      	bls.n	8012cd4 <memmove+0x10>
 8012cce:	4284      	cmp	r4, r0
 8012cd0:	4623      	mov	r3, r4
 8012cd2:	d807      	bhi.n	8012ce4 <memmove+0x20>
 8012cd4:	1e43      	subs	r3, r0, #1
 8012cd6:	42a1      	cmp	r1, r4
 8012cd8:	d008      	beq.n	8012cec <memmove+0x28>
 8012cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012ce2:	e7f8      	b.n	8012cd6 <memmove+0x12>
 8012ce4:	4402      	add	r2, r0
 8012ce6:	4601      	mov	r1, r0
 8012ce8:	428a      	cmp	r2, r1
 8012cea:	d100      	bne.n	8012cee <memmove+0x2a>
 8012cec:	bd10      	pop	{r4, pc}
 8012cee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012cf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012cf6:	e7f7      	b.n	8012ce8 <memmove+0x24>

08012cf8 <_realloc_r>:
 8012cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cfc:	4680      	mov	r8, r0
 8012cfe:	4614      	mov	r4, r2
 8012d00:	460e      	mov	r6, r1
 8012d02:	b921      	cbnz	r1, 8012d0e <_realloc_r+0x16>
 8012d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d08:	4611      	mov	r1, r2
 8012d0a:	f7fa bef7 	b.w	800dafc <_malloc_r>
 8012d0e:	b92a      	cbnz	r2, 8012d1c <_realloc_r+0x24>
 8012d10:	f7fa fe88 	bl	800da24 <_free_r>
 8012d14:	4625      	mov	r5, r4
 8012d16:	4628      	mov	r0, r5
 8012d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d1c:	f000 f822 	bl	8012d64 <_malloc_usable_size_r>
 8012d20:	4284      	cmp	r4, r0
 8012d22:	4607      	mov	r7, r0
 8012d24:	d802      	bhi.n	8012d2c <_realloc_r+0x34>
 8012d26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d2a:	d812      	bhi.n	8012d52 <_realloc_r+0x5a>
 8012d2c:	4621      	mov	r1, r4
 8012d2e:	4640      	mov	r0, r8
 8012d30:	f7fa fee4 	bl	800dafc <_malloc_r>
 8012d34:	4605      	mov	r5, r0
 8012d36:	2800      	cmp	r0, #0
 8012d38:	d0ed      	beq.n	8012d16 <_realloc_r+0x1e>
 8012d3a:	42bc      	cmp	r4, r7
 8012d3c:	4622      	mov	r2, r4
 8012d3e:	4631      	mov	r1, r6
 8012d40:	bf28      	it	cs
 8012d42:	463a      	movcs	r2, r7
 8012d44:	f7fa fe58 	bl	800d9f8 <memcpy>
 8012d48:	4631      	mov	r1, r6
 8012d4a:	4640      	mov	r0, r8
 8012d4c:	f7fa fe6a 	bl	800da24 <_free_r>
 8012d50:	e7e1      	b.n	8012d16 <_realloc_r+0x1e>
 8012d52:	4635      	mov	r5, r6
 8012d54:	e7df      	b.n	8012d16 <_realloc_r+0x1e>

08012d56 <abort>:
 8012d56:	b508      	push	{r3, lr}
 8012d58:	2006      	movs	r0, #6
 8012d5a:	f000 f833 	bl	8012dc4 <raise>
 8012d5e:	2001      	movs	r0, #1
 8012d60:	f7f0 ff96 	bl	8003c90 <_exit>

08012d64 <_malloc_usable_size_r>:
 8012d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d68:	1f18      	subs	r0, r3, #4
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	bfbc      	itt	lt
 8012d6e:	580b      	ldrlt	r3, [r1, r0]
 8012d70:	18c0      	addlt	r0, r0, r3
 8012d72:	4770      	bx	lr

08012d74 <_raise_r>:
 8012d74:	291f      	cmp	r1, #31
 8012d76:	b538      	push	{r3, r4, r5, lr}
 8012d78:	4604      	mov	r4, r0
 8012d7a:	460d      	mov	r5, r1
 8012d7c:	d904      	bls.n	8012d88 <_raise_r+0x14>
 8012d7e:	2316      	movs	r3, #22
 8012d80:	6003      	str	r3, [r0, #0]
 8012d82:	f04f 30ff 	mov.w	r0, #4294967295
 8012d86:	bd38      	pop	{r3, r4, r5, pc}
 8012d88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012d8a:	b112      	cbz	r2, 8012d92 <_raise_r+0x1e>
 8012d8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012d90:	b94b      	cbnz	r3, 8012da6 <_raise_r+0x32>
 8012d92:	4620      	mov	r0, r4
 8012d94:	f000 f830 	bl	8012df8 <_getpid_r>
 8012d98:	462a      	mov	r2, r5
 8012d9a:	4601      	mov	r1, r0
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012da2:	f000 b817 	b.w	8012dd4 <_kill_r>
 8012da6:	2b01      	cmp	r3, #1
 8012da8:	d00a      	beq.n	8012dc0 <_raise_r+0x4c>
 8012daa:	1c59      	adds	r1, r3, #1
 8012dac:	d103      	bne.n	8012db6 <_raise_r+0x42>
 8012dae:	2316      	movs	r3, #22
 8012db0:	6003      	str	r3, [r0, #0]
 8012db2:	2001      	movs	r0, #1
 8012db4:	e7e7      	b.n	8012d86 <_raise_r+0x12>
 8012db6:	2400      	movs	r4, #0
 8012db8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	4798      	blx	r3
 8012dc0:	2000      	movs	r0, #0
 8012dc2:	e7e0      	b.n	8012d86 <_raise_r+0x12>

08012dc4 <raise>:
 8012dc4:	4b02      	ldr	r3, [pc, #8]	; (8012dd0 <raise+0xc>)
 8012dc6:	4601      	mov	r1, r0
 8012dc8:	6818      	ldr	r0, [r3, #0]
 8012dca:	f7ff bfd3 	b.w	8012d74 <_raise_r>
 8012dce:	bf00      	nop
 8012dd0:	20000150 	.word	0x20000150

08012dd4 <_kill_r>:
 8012dd4:	b538      	push	{r3, r4, r5, lr}
 8012dd6:	4d07      	ldr	r5, [pc, #28]	; (8012df4 <_kill_r+0x20>)
 8012dd8:	2300      	movs	r3, #0
 8012dda:	4604      	mov	r4, r0
 8012ddc:	4608      	mov	r0, r1
 8012dde:	4611      	mov	r1, r2
 8012de0:	602b      	str	r3, [r5, #0]
 8012de2:	f7f0 ff45 	bl	8003c70 <_kill>
 8012de6:	1c43      	adds	r3, r0, #1
 8012de8:	d102      	bne.n	8012df0 <_kill_r+0x1c>
 8012dea:	682b      	ldr	r3, [r5, #0]
 8012dec:	b103      	cbz	r3, 8012df0 <_kill_r+0x1c>
 8012dee:	6023      	str	r3, [r4, #0]
 8012df0:	bd38      	pop	{r3, r4, r5, pc}
 8012df2:	bf00      	nop
 8012df4:	2000a8ac 	.word	0x2000a8ac

08012df8 <_getpid_r>:
 8012df8:	f7f0 bf32 	b.w	8003c60 <_getpid>

08012dfc <_init>:
 8012dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dfe:	bf00      	nop
 8012e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e02:	bc08      	pop	{r3}
 8012e04:	469e      	mov	lr, r3
 8012e06:	4770      	bx	lr

08012e08 <_fini>:
 8012e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e0a:	bf00      	nop
 8012e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012e0e:	bc08      	pop	{r3}
 8012e10:	469e      	mov	lr, r3
 8012e12:	4770      	bx	lr
